/**
 * @license
 * Lo-Dash 2.4.2 <https://lodash.com/>
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre ES5 environments */
  var undefined;

  /** Used to pool arrays and objects used internally */
  var arrayPool = [],
      objectPool = [];

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used internally to indicate various things */
  var indicatorObject = {};

  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
  var keyPrefix = +new Date + '';

  /** Used as the size when optimizations are enabled for large arrays */
  var largeArraySize = 75;

  /** Used as the max size of the `arrayPool` and `objectPool` */
  var maxPoolSize = 40;

  /** Used to detect and test whitespace */
  var whitespace = (
    // whitespace
    ' \t\x0B\f\xA0\ufeff' +

    // line terminators
    '\n\r\u2028\u2029' +

    // unicode category "Zs" space separators
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to match ES6 template delimiters
   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to detected named functions */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to match "interpolate" template delimiters */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match leading whitespace and zeros to be removed */
  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');

  /** Used to ensure capturing order of template delimiters */
  var reNoMatch = /($^)/;

  /** Used to detect functions containing a `this` reference */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to assign default `context` object properties */
  var contextProps = [
    'Array', 'Boolean', 'Date', 'Error', 'Function', 'Math', 'Number', 'Object',
    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',
    'parseInt', 'setTimeout'
  ];

  /** Used to fix the JScript [[DontEnum]] bug */
  var shadowedProps = [
    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
    'toLocaleString', 'toString', 'valueOf'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      errorClass = '[object Error]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[funcClass] = false;
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
  cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] =
  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

  /** Used as an internal `_.debounce` options object */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used as the property descriptor for `__bindData__` */
  var descriptor = {
    'configurable': false,
    'enumerable': false,
    'value': null,
    'writable': false
  };

  /** Used as the data object for `iteratorTemplate` */
  var iteratorData = {
    'args': '',
    'array': null,
    'bottom': '',
    'firstArg': '',
    'init': '',
    'keys': null,
    'loop': '',
    'shadowedProps': null,
    'support': null,
    'top': '',
    'useHas': false
  };

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Used as a reference to the global object */
  var root = (objectTypes[typeof window] && window) || this;

  /** Detect free variable `exports` */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module` */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports` */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
  var freeGlobal = objectTypes[typeof global] && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `_.indexOf` without support for binary searches
   * or `fromIndex` constraints.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value or `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    var index = (fromIndex || 0) - 1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * An implementation of `_.contains` for cache objects that mimics the return
   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache object to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var type = typeof value;
    cache = cache.cache;

    if (type == 'boolean' || value == null) {
      return cache[value] ? 0 : -1;
    }
    if (type != 'number' && type != 'string') {
      type = 'object';
    }
    var key = type == 'number' ? value : keyPrefix + value;
    cache = (cache = cache[type]) && cache[key];

    return type == 'object'
      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)
      : (cache ? 0 : -1);
  }

  /**
   * Adds a given value to the corresponding cache object.
   *
   * @private
   * @param {*} value The value to add to the cache.
   */
  function cachePush(value) {
    var cache = this.cache,
        type = typeof value;

    if (type == 'boolean' || value == null) {
      cache[value] = true;
    } else {
      if (type != 'number' && type != 'string') {
        type = 'object';
      }
      var key = type == 'number' ? value : keyPrefix + value,
          typeCache = cache[type] || (cache[type] = {});

      if (type == 'object') {
        (typeCache[key] || (typeCache[key] = [])).push(value);
      } else {
        typeCache[key] = true;
      }
    }
  }

  /**
   * Used by `_.max` and `_.min` as the default callback when a given
   * collection is a string value.
   *
   * @private
   * @param {string} value The character to inspect.
   * @returns {number} Returns the code unit of given character.
   */
  function charAtCallback(value) {
    return value.charCodeAt(0);
  }

  /**
   * Used by `sortBy` to compare transformed `collection` elements, stable sorting
   * them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {number} Returns the sort order indicator of `1` or `-1`.
   */
  function compareAscending(a, b) {
    var ac = a.criteria,
        bc = b.criteria,
        index = -1,
        length = ac.length;

    while (++index < length) {
      var value = ac[index],
          other = bc[index];

      if (value !== other) {
        if (value > other || typeof value == 'undefined') {
          return 1;
        }
        if (value < other || typeof other == 'undefined') {
          return -1;
        }
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to return the same value for
    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
    //
    // This also ensures a stable sort in V8 and other engines.
    // See http://code.google.com/p/v8/issues/detail?id=90
    return a.index - b.index;
  }

  /**
   * Creates a cache object to optimize linear searches of large arrays.
   *
   * @private
   * @param {Array} [array=[]] The array to search.
   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.
   */
  function createCache(array) {
    var index = -1,
        length = array.length,
        first = array[0],
        mid = array[(length / 2) | 0],
        last = array[length - 1];

    if (first && typeof first == 'object' &&
        mid && typeof mid == 'object' && last && typeof last == 'object') {
      return false;
    }
    var cache = getObject();
    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;

    var result = getObject();
    result.array = array;
    result.cache = cache;
    result.push = cachePush;

    while (++index < length) {
      result.push(array[index]);
    }
    return result;
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} match The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Gets an array from the array pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Array} The array from the pool.
   */
  function getArray() {
    return arrayPool.pop() || [];
  }

  /**
   * Gets an object from the object pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Object} The object from the pool.
   */
  function getObject() {
    return objectPool.pop() || {
      'array': null,
      'cache': null,
      'criteria': null,
      'false': false,
      'index': 0,
      'null': false,
      'number': null,
      'object': null,
      'push': null,
      'string': null,
      'true': false,
      'undefined': false,
      'value': null
    };
  }

  /**
   * Checks if `value` is a DOM node in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if the `value` is a DOM node, else `false`.
   */
  function isNode(value) {
    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`
    // methods that are `typeof` "string" and still can coerce nodes to strings
    return typeof value.toString != 'function' && typeof (value + '') == 'string';
  }

  /**
   * Releases the given array back to the array pool.
   *
   * @private
   * @param {Array} [array] The array to release.
   */
  function releaseArray(array) {
    array.length = 0;
    if (arrayPool.length < maxPoolSize) {
      arrayPool.push(array);
    }
  }

  /**
   * Releases the given object back to the object pool.
   *
   * @private
   * @param {Object} [object] The object to release.
   */
  function releaseObject(object) {
    var cache = object.cache;
    if (cache) {
      releaseObject(cache);
    }
    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
    if (objectPool.length < maxPoolSize) {
      objectPool.push(object);
    }
  }

  /**
   * Slices the `collection` from the `start` index up to, but not including,
   * the `end` index.
   *
   * Note: This function is used instead of `Array#slice` to support node lists
   * in IE < 9 and to ensure dense arrays are returned.
   *
   * @private
   * @param {Array|Object|string} collection The collection to slice.
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array} Returns the new array.
   */
  function slice(array, start, end) {
    start || (start = 0);
    if (typeof end == 'undefined') {
      end = array ? array.length : 0;
    }
    var index = -1,
        length = end - start || 0,
        result = Array(length < 0 ? 0 : length);

    while (++index < length) {
      result[index] = array[start + index];
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new `lodash` function using the given context object.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns the `lodash` function.
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See http://es5.github.io/#x11.1.5.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references */
    var Array = context.Array,
        Boolean = context.Boolean,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /**
     * Used for `Array` method references.
     *
     * Normally `Array.prototype` would suffice, however, using an array literal
     * avoids issues in Narwhal.
     */
    var arrayRef = [];

    /** Used for native method references */
    var errorProto = Error.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to restore the original `_` reference in `noConflict` */
    var oldDash = context._;

    /** Used to resolve the internal [[Class]] of values */
    var toString = objectProto.toString;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    /** Native method shortcuts */
    var ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        fnToString = Function.prototype.toString,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        hasOwnProperty = objectProto.hasOwnProperty,
        push = arrayRef.push,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        setTimeout = context.setTimeout,
        splice = arrayRef.splice,
        unshift = arrayRef.unshift;

    /** Used to set meta data on functions */
    var defineProperty = (function() {
      // IE 8 only accepts DOM elements
      try {
        var o = {},
            func = isNative(func = Object.defineProperty) && func,
            result = func(o, o, o) && func;
      } catch(e) { }
      return result;
    }());

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeIsFinite = context.isFinite,
        nativeIsNaN = context.isNaN,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used to lookup a built-in constructor by [[Class]] */
    var ctorByClass = {};
    ctorByClass[arrayClass] = Array;
    ctorByClass[boolClass] = Boolean;
    ctorByClass[dateClass] = Date;
    ctorByClass[funcClass] = Function;
    ctorByClass[objectClass] = Object;
    ctorByClass[numberClass] = Number;
    ctorByClass[regexpClass] = RegExp;
    ctorByClass[stringClass] = String;

    /** Used to avoid iterating non-enumerable properties in IE < 9 */
    var nonEnumProps = {};
    nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
    nonEnumProps[boolClass] = nonEnumProps[stringClass] = { 'constructor': true, 'toString': true, 'valueOf': true };
    nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = { 'constructor': true, 'toString': true };
    nonEnumProps[objectClass] = { 'constructor': true };

    (function() {
      var length = shadowedProps.length;
      while (length--) {
        var key = shadowedProps[length];
        for (var className in nonEnumProps) {
          if (hasOwnProperty.call(nonEnumProps, className) && !hasOwnProperty.call(nonEnumProps[className], key)) {
            nonEnumProps[className][key] = false;
          }
        }
      }
    }());

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps the given value to enable intuitive
     * method chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
     * and `zip`
     *
     * The non-chainable wrapper functions are:
     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
     * `template`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first` and `last` return wrapped values when `n` is
     * provided, otherwise they return unwrapped values.
     *
     * Explicit chaining can be enabled by using the `_.chain` method.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
       ? value
       : new lodashWrapper(value);
    }

    /**
     * A fast path for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap in a `lodash` instance.
     * @param {boolean} chainAll A flag to enable chaining for all methods
     * @returns {Object} Returns a `lodash` instance.
     */
    function lodashWrapper(value, chainAll) {
      this.__chain__ = !!chainAll;
      this.__wrapped__ = value;
    }
    // ensure `new lodashWrapper` is an instance of `lodash`
    lodashWrapper.prototype = lodash.prototype;

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    (function() {
      var ctor = function() { this.x = 1; },
          object = { '0': 1, 'length': 1 },
          props = [];

      ctor.prototype = { 'valueOf': 1, 'y': 1 };
      for (var key in new ctor) { props.push(key); }
      for (key in arguments) { }

      /**
       * Detect if an `arguments` object's [[Class]] is resolvable (all but Firefox < 4, IE < 9).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.argsClass = toString.call(arguments) == argsClass;

      /**
       * Detect if `arguments` objects are `Object` objects (all but Narwhal and Opera < 10.5).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.argsObject = arguments.constructor == Object && !(arguments instanceof Array);

      /**
       * Detect if `name` or `message` properties of `Error.prototype` are
       * enumerable by default. (IE < 9, Safari < 5.1)
       *
       * @memberOf _.support
       * @type boolean
       */
      support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');

      /**
       * Detect if `prototype` properties are enumerable by default.
       *
       * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
       * (if the prototype or a property on the prototype has been set)
       * incorrectly sets a function's `prototype` property [[Enumerable]]
       * value to `true`.
       *
       * @memberOf _.support
       * @type boolean
       */
      support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');

      /**
       * Detect if functions can be decompiled by `Function#toString`
       * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

      /**
       * Detect if `Function#name` is supported (all but IE).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcNames = typeof Function.name == 'string';

      /**
       * Detect if `arguments` object indexes are non-enumerable
       * (Firefox < 4, IE < 9, PhantomJS, Safari < 5.1).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.nonEnumArgs = key != 0;

      /**
       * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
       *
       * In IE < 9 an objects own properties, shadowing non-enumerable ones, are
       * made non-enumerable as well (a.k.a the JScript [[DontEnum]] bug).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.nonEnumShadows = !/valueOf/.test(props);

      /**
       * Detect if own properties are iterated after inherited properties (all but IE < 9).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.ownLast = props[0] != 'x';

      /**
       * Detect if `Array#shift` and `Array#splice` augment array-like objects correctly.
       *
       * Firefox < 10, IE compatibility mode, and IE < 9 have buggy Array `shift()`
       * and `splice()` functions that fail to remove the last element, `value[0]`,
       * of array-like objects even though the `length` property is set to `0`.
       * The `shift()` method is buggy in IE 8 compatibility mode, while `splice()`
       * is buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.
       *
       * @memberOf _.support
       * @type boolean
       */
      support.spliceObjects = (arrayRef.splice.call(object, 0, 1), !object[0]);

      /**
       * Detect lack of support for accessing string characters by index.
       *
       * IE < 8 can't access characters by index and IE 8 can only access
       * characters by index on string literals.
       *
       * @memberOf _.support
       * @type boolean
       */
      support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';

      /**
       * Detect if a DOM node's [[Class]] is resolvable (all but IE < 9)
       * and that the JS engine errors when attempting to coerce an object to
       * a string without a `toString` function.
       *
       * @memberOf _.support
       * @type boolean
       */
      try {
        support.nodeClass = !(toString.call(document) == objectClass && !({ 'toString': 0 } + ''));
      } catch(e) {
        support.nodeClass = true;
      }
    }(1));

    /**
     * By default, the template delimiters used by Lo-Dash are similar to those in
     * embedded Ruby (ERB). Change the following template settings to use alternative
     * delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': /<%-([\s\S]+?)%>/g,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': /<%([\s\S]+?)%>/g,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The template used to create iterator functions.
     *
     * @private
     * @param {Object} data The data object used to populate the text.
     * @returns {string} Returns the interpolated text.
     */
    var iteratorTemplate = template(
      // the `iterable` may be reassigned by the `top` snippet
      'var index, iterable = <%= firstArg %>, ' +
      // assign the `result` variable an initial value
      'result = <%= init %>;\n' +
      // exit early if the first argument is falsey
      'if (!iterable) return result;\n' +
      // add code before the iteration branches
      '<%= top %>;' +

      // array-like iteration:
      '<% if (array) { %>\n' +
      'var length = iterable.length; index = -1;\n' +
      'if (<%= array %>) {' +

      // add support for accessing string characters by index if needed
      '  <% if (support.unindexedChars) { %>\n' +
      '  if (isString(iterable)) {\n' +
      "    iterable = iterable.split('')\n" +
      '  }' +
      '  <% } %>\n' +

      // iterate over the array-like value
      '  while (++index < length) {\n' +
      '    <%= loop %>;\n' +
      '  }\n' +
      '}\n' +
      'else {' +

      // object iteration:
      // add support for iterating over `arguments` objects if needed
      '  <% } else if (support.nonEnumArgs) { %>\n' +
      '  var length = iterable.length; index = -1;\n' +
      '  if (length && isArguments(iterable)) {\n' +
      '    while (++index < length) {\n' +
      "      index += '';\n" +
      '      <%= loop %>;\n' +
      '    }\n' +
      '  } else {' +
      '  <% } %>' +

      // avoid iterating over `prototype` properties in older Firefox, Opera, and Safari
      '  <% if (support.enumPrototypes) { %>\n' +
      "  var skipProto = typeof iterable == 'function';\n" +
      '  <% } %>' +

      // avoid iterating over `Error.prototype` properties in older IE and Safari
      '  <% if (support.enumErrorProps) { %>\n' +
      '  var skipErrorProps = iterable === errorProto || iterable instanceof Error;\n' +
      '  <% } %>' +

      // define conditions used in the loop
      '  <%' +
      '    var conditions = [];' +
      '    if (support.enumPrototypes) { conditions.push(\'!(skipProto && index == "prototype")\'); }' +
      '    if (support.enumErrorProps)  { conditions.push(\'!(skipErrorProps && (index == "message" || index == "name"))\'); }' +
      '  %>' +

      // iterate own properties using `Object.keys`
      '  <% if (useHas && keys) { %>\n' +
      '  var ownIndex = -1,\n' +
      '      ownProps = objectTypes[typeof iterable] && keys(iterable),\n' +
      '      length = ownProps ? ownProps.length : 0;\n\n' +
      '  while (++ownIndex < length) {\n' +
      '    index = ownProps[ownIndex];\n<%' +
      "    if (conditions.length) { %>    if (<%= conditions.join(' && ') %>) {\n  <% } %>" +
      '    <%= loop %>;' +
      '    <% if (conditions.length) { %>\n    }<% } %>\n' +
      '  }' +

      // else using a for-in loop
      '  <% } else { %>\n' +
      '  for (index in iterable) {\n<%' +
      '    if (useHas) { conditions.push("hasOwnProperty.call(iterable, index)"); }' +
      "    if (conditions.length) { %>    if (<%= conditions.join(' && ') %>) {\n  <% } %>" +
      '    <%= loop %>;' +
      '    <% if (conditions.length) { %>\n    }<% } %>\n' +
      '  }' +

      // Because IE < 9 can't set the `[[Enumerable]]` attribute of an
      // existing property and the `constructor` property of a prototype
      // defaults to non-enumerable, Lo-Dash skips the `constructor`
      // property when it infers it's iterating over a `prototype` object.
      '    <% if (support.nonEnumShadows) { %>\n\n' +
      '  if (iterable !== objectProto) {\n' +
      "    var ctor = iterable.constructor,\n" +
      '        isProto = iterable === (ctor && ctor.prototype),\n' +
      '        className = iterable === stringProto ? stringClass : iterable === errorProto ? errorClass : toString.call(iterable),\n' +
      '        nonEnum = nonEnumProps[className];\n' +
      '      <% for (k = 0; k < 7; k++) { %>\n' +
      "    index = '<%= shadowedProps[k] %>';\n" +
      '    if ((!(isProto && nonEnum[index]) && hasOwnProperty.call(iterable, index))<%' +
      '        if (!useHas) { %> || (!nonEnum[index] && iterable[index] !== objectProto[index])<% }' +
      '      %>) {\n' +
      '      <%= loop %>;\n' +
      '    }' +
      '      <% } %>\n' +
      '  }' +
      '    <% } %>' +
      '  <% } %>' +
      '  <% if (array || support.nonEnumArgs) { %>\n}<% } %>\n' +

      // add code to the bottom of the iteration function
      '<%= bottom %>;\n' +
      // finally, return the `result`
      'return result'
    );

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `_.bind` that creates the bound function and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new bound function.
     */
    function baseBind(bindData) {
      var func = bindData[0],
          partialArgs = bindData[2],
          thisArg = bindData[4];

      function bound() {
        // `Function#bind` spec
        // http://es5.github.io/#x15.3.4.5
        if (partialArgs) {
          // avoid `arguments` object deoptimizations by using `slice` instead
          // of `Array.prototype.slice.call` and not assigning `arguments` to a
          // variable as a ternary expression
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        // mimic the constructor's `return` behavior
        // http://es5.github.io/#x13.2.2
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          var thisBinding = baseCreate(func.prototype),
              result = func.apply(thisBinding, args || arguments);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisArg, args || arguments);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.clone` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, callback, stackA, stackB) {
      if (callback) {
        var result = callback(value);
        if (typeof result != 'undefined') {
          return result;
        }
      }
      // inspect [[Class]]
      var isObj = isObject(value);
      if (isObj) {
        var className = toString.call(value);
        if (!cloneableClasses[className] || (!support.nodeClass && isNode(value))) {
          return value;
        }
        var ctor = ctorByClass[className];
        switch (className) {
          case boolClass:
          case dateClass:
            return new ctor(+value);

          case numberClass:
          case stringClass:
            return new ctor(value);

          case regexpClass:
            result = ctor(value.source, reFlags.exec(value));
            result.lastIndex = value.lastIndex;
            return result;
        }
      } else {
        return value;
      }
      var isArr = isArray(value);
      if (isDeep) {
        // check for circular references and return corresponding clone
        var initedStack = !stackA;
        stackA || (stackA = getArray());
        stackB || (stackB = getArray());

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == value) {
            return stackB[length];
          }
        }
        result = isArr ? ctor(value.length) : {};
      }
      else {
        result = isArr ? slice(value) : assign({}, value);
      }
      // add array properties assigned by `RegExp#exec`
      if (isArr) {
        if (hasOwnProperty.call(value, 'index')) {
          result.index = value.index;
        }
        if (hasOwnProperty.call(value, 'input')) {
          result.input = value.input;
        }
      }
      // exit for shallow clone
      if (!isDeep) {
        return result;
      }
      // add the source value to the stack of traversed objects
      // and associate it with its clone
      stackA.push(value);
      stackB.push(result);

      // recursively populate clone (susceptible to call stack limits)
      (isArr ? baseEach : forOwn)(value, function(objValue, key) {
        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
      });

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(prototype, properties) {
      return isObject(prototype) ? nativeCreate(prototype) : {};
    }
    // fallback for browsers without `Object.create`
    if (!nativeCreate) {
      baseCreate = (function() {
        function Object() {}
        return function(prototype) {
          if (isObject(prototype)) {
            Object.prototype = prototype;
            var result = new Object;
            Object.prototype = null;
          }
          return result || context.Object();
        };
      }());
    }

    /**
     * The base implementation of `_.createCallback` without support for creating
     * "_.pluck" or "_.where" style callbacks.
     *
     * @private
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     */
    function baseCreateCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      // exit early for no `thisArg` or already bound by `Function#bind`
      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
        return func;
      }
      var bindData = func.__bindData__;
      if (typeof bindData == 'undefined') {
        if (support.funcNames) {
          bindData = !func.name;
        }
        bindData = bindData || !support.funcDecomp;
        if (!bindData) {
          var source = fnToString.call(func);
          if (!support.funcNames) {
            bindData = !reFuncName.test(source);
          }
          if (!bindData) {
            // checks if `func` references the `this` keyword and stores the result
            bindData = reThis.test(source);
            setBindData(func, bindData);
          }
        }
      }
      // exit early if there are no `this` references or `func` is bound
      if (bindData === false || (bindData !== true && bindData[1] & 1)) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 2: return function(a, b) {
          return func.call(thisArg, a, b);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      }
      return bind(func, thisArg);
    }

    /**
     * The base implementation of `createWrapper` that creates the wrapper and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new function.
     */
    function baseCreateWrapper(bindData) {
      var func = bindData[0],
          bitmask = bindData[1],
          partialArgs = bindData[2],
          partialRightArgs = bindData[3],
          thisArg = bindData[4],
          arity = bindData[5];

      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          key = func;

      function bound() {
        var thisBinding = isBind ? thisArg : this;
        if (partialArgs) {
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        if (partialRightArgs || isCurry) {
          args || (args = slice(arguments));
          if (partialRightArgs) {
            push.apply(args, partialRightArgs);
          }
          if (isCurry && args.length < arity) {
            bitmask |= 16 & ~32;
            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
          }
        }
        args || (args = arguments);
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (this instanceof bound) {
          thisBinding = baseCreate(func.prototype);
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.difference` that accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {Array} [values] The array of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     */
    function baseDifference(array, values) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          isLarge = length >= largeArraySize && indexOf === baseIndexOf,
          result = [];

      if (isLarge) {
        var cache = createCache(values);
        if (cache) {
          indexOf = cacheIndexOf;
          values = cache;
        } else {
          isLarge = false;
        }
      }
      while (++index < length) {
        var value = array[index];
        if (indexOf(values, value) < 0) {
          result.push(value);
        }
      }
      if (isLarge) {
        releaseObject(values);
      }
      return result;
    }

    /**
     * The base implementation of `_.flatten` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
     * @param {number} [fromIndex=0] The index to start from.
     * @returns {Array} Returns a new flattened array.
     */
    function baseFlatten(array, isShallow, isStrict, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value && typeof value == 'object' && typeof value.length == 'number'
            && (isArray(value) || isArguments(value))) {
          // recursively flatten arrays (susceptible to call stack limits)
          if (!isShallow) {
            value = baseFlatten(value, isShallow, isStrict);
          }
          var valIndex = -1,
              valLength = value.length,
              resIndex = result.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[resIndex++] = value[valIndex];
          }
        } else if (!isStrict) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.isEqual`, without support for `thisArg` binding,
     * that allows partial "_.where" style comparisons.
     *
     * @private
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `a` objects.
     * @param {Array} [stackB=[]] Tracks traversed `b` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
      // used to indicate that when comparing objects, `a` has at least the properties of `b`
      if (callback) {
        var result = callback(a, b);
        if (typeof result != 'undefined') {
          return !!result;
        }
      }
      // exit early for identical values
      if (a === b) {
        // treat `+0` vs. `-0` as not equal
        return a !== 0 || (1 / a == 1 / b);
      }
      var type = typeof a,
          otherType = typeof b;

      // exit early for unlike primitive values
      if (a === a &&
          !(a && objectTypes[type]) &&
          !(b && objectTypes[otherType])) {
        return false;
      }
      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior
      // http://es5.github.io/#x15.3.4.4
      if (a == null || b == null) {
        return a === b;
      }
      // compare [[Class]] names
      var className = toString.call(a),
          otherClass = toString.call(b);

      if (className == argsClass) {
        className = objectClass;
      }
      if (otherClass == argsClass) {
        otherClass = objectClass;
      }
      if (className != otherClass) {
        return false;
      }
      switch (className) {
        case boolClass:
        case dateClass:
          // coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
          return +a == +b;

        case numberClass:
          // treat `NaN` vs. `NaN` as equal
          return (a != +a)
            ? b != +b
            // but treat `+0` vs. `-0` as not equal
            : (a == 0 ? (1 / a == 1 / b) : a == +b);

        case regexpClass:
        case stringClass:
          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
          // treat string primitives and their corresponding object instances as equal
          return a == String(b);
      }
      var isArr = className == arrayClass;
      if (!isArr) {
        // unwrap any `lodash` wrapped values
        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
            bWrapped = hasOwnProperty.call(b, '__wrapped__');

        if (aWrapped || bWrapped) {
          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
        }
        // exit for functions and DOM nodes
        if (className != objectClass || (!support.nodeClass && (isNode(a) || isNode(b)))) {
          return false;
        }
        // in older versions of Opera, `arguments` objects have `Array` constructors
        var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,
            ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;

        // non `Object` object instances with different constructors are not equal
        if (ctorA != ctorB &&
              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
              ('constructor' in a && 'constructor' in b)
            ) {
          return false;
        }
      }
      // assume cyclic structures are equal
      // the algorithm for detecting cyclic structures is adapted from ES 5.1
      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
      var initedStack = !stackA;
      stackA || (stackA = getArray());
      stackB || (stackB = getArray());

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == a) {
          return stackB[length] == b;
        }
      }
      var size = 0;
      result = true;

      // add `a` and `b` to the stack of traversed objects
      stackA.push(a);
      stackB.push(b);

      // recursively compare objects and arrays (susceptible to call stack limits)
      if (isArr) {
        // compare lengths to determine if a deep comparison is necessary
        length = a.length;
        size = b.length;
        result = size == length;

        if (result || isWhere) {
          // deep compare the contents, ignoring non-numeric properties
          while (size--) {
            var index = length,
                value = b[size];

            if (isWhere) {
              while (index--) {
                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
                  break;
                }
              }
            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
              break;
            }
          }
        }
      }
      else {
        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
        // which, in this case, is more costly
        forIn(b, function(value, key, b) {
          if (hasOwnProperty.call(b, key)) {
            // count the number of properties.
            size++;
            // deep compare each property value.
            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));
          }
        });

        if (result && !isWhere) {
          // ensure both objects have the same number of properties
          forIn(a, function(value, key, a) {
            if (hasOwnProperty.call(a, key)) {
              // `size` will be `-1` if `a` has more properties than `b`
              return (result = --size > -1);
            }
          });
        }
      }
      stackA.pop();
      stackB.pop();

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.merge` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     */
    function baseMerge(object, source, callback, stackA, stackB) {
      (isArray(source) ? forEach : forOwn)(source, function(source, key) {
        var found,
            isArr,
            result = source,
            value = object[key];

        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
          // avoid merging previously merged cyclic sources
          var stackLength = stackA.length;
          while (stackLength--) {
            if ((found = stackA[stackLength] == source)) {
              value = stackB[stackLength];
              break;
            }
          }
          if (!found) {
            var isShallow;
            if (callback) {
              result = callback(value, source);
              if ((isShallow = typeof result != 'undefined')) {
                value = result;
              }
            }
            if (!isShallow) {
              value = isArr
                ? (isArray(value) ? value : [])
                : (isPlainObject(value) ? value : {});
            }
            // add `source` and associated `value` to the stack of traversed objects
            stackA.push(source);
            stackB.push(value);

            // recursively merge objects and arrays (susceptible to call stack limits)
            if (!isShallow) {
              baseMerge(value, source, callback, stackA, stackB);
            }
          }
        }
        else {
          if (callback) {
            result = callback(value, source);
            if (typeof result == 'undefined') {
              result = source;
            }
          }
          if (typeof result != 'undefined') {
            value = result;
          }
        }
        object[key] = value;
      });
    }

    /**
     * The base implementation of `_.random` without argument juggling or support
     * for returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns a random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function} [callback] The function called per iteration.
     * @returns {Array} Returns a duplicate-value-free array.
     */
    function baseUniq(array, isSorted, callback) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          result = [];

      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,
          seen = (callback || isLarge) ? getArray() : result;

      if (isLarge) {
        var cache = createCache(seen);
        indexOf = cacheIndexOf;
        seen = cache;
      }
      while (++index < length) {
        var value = array[index],
            computed = callback ? callback(value, index, array) : value;

        if (isSorted
              ? !index || seen[seen.length - 1] !== computed
              : indexOf(seen, computed) < 0
            ) {
          if (callback || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      if (isLarge) {
        releaseArray(seen.array);
        releaseObject(seen);
      } else if (callback) {
        releaseArray(seen);
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an object composed
     * of keys generated from the results of running each element of the collection
     * through a callback. The given `setter` function sets the keys and values
     * of the composed object.
     *
     * @private
     * @param {Function} setter The setter function.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter) {
      return function(collection, callback, thisArg) {
        var result = {};
        callback = lodash.createCallback(callback, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, callback(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, callback(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that, when called, either curries or invokes `func`
     * with an optional `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of method flags to compose.
     *  The bitmask may be composed of the following flags:
     *  1 - `_.bind`
     *  2 - `_.bindKey`
     *  4 - `_.curry`
     *  8 - `_.curry` (bound)
     *  16 - `_.partial`
     *  32 - `_.partialRight`
     * @param {Array} [partialArgs] An array of arguments to prepend to those
     *  provided to the new function.
     * @param {Array} [partialRightArgs] An array of arguments to append to those
     *  provided to the new function.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new function.
     */
    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          isPartial = bitmask & 16,
          isPartialRight = bitmask & 32;

      if (!isBindKey && !isFunction(func)) {
        throw new TypeError;
      }
      if (isPartial && !partialArgs.length) {
        bitmask &= ~16;
        isPartial = partialArgs = false;
      }
      if (isPartialRight && !partialRightArgs.length) {
        bitmask &= ~32;
        isPartialRight = partialRightArgs = false;
      }
      var bindData = func && func.__bindData__;
      if (bindData && bindData !== true) {
        // clone `bindData`
        bindData = slice(bindData);
        if (bindData[2]) {
          bindData[2] = slice(bindData[2]);
        }
        if (bindData[3]) {
          bindData[3] = slice(bindData[3]);
        }
        // set `thisBinding` is not previously bound
        if (isBind && !(bindData[1] & 1)) {
          bindData[4] = thisArg;
        }
        // set if previously bound but not currently (subsequent curried functions)
        if (!isBind && bindData[1] & 1) {
          bitmask |= 8;
        }
        // set curried arity if not yet set
        if (isCurry && !(bindData[1] & 4)) {
          bindData[5] = arity;
        }
        // append partial left arguments
        if (isPartial) {
          push.apply(bindData[2] || (bindData[2] = []), partialArgs);
        }
        // append partial right arguments
        if (isPartialRight) {
          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
        }
        // merge flags
        bindData[1] |= bitmask;
        return createWrapper.apply(null, bindData);
      }
      // fast path for `_.bind`
      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
    }

    /**
     * Creates compiled iteration functions.
     *
     * @private
     * @param {...Object} [options] The compile options object(s).
     * @param {string} [options.array] Code to determine if the iterable is an array or array-like.
     * @param {boolean} [options.useHas] Specify using `hasOwnProperty` checks in the object loop.
     * @param {Function} [options.keys] A reference to `_.keys` for use in own property iteration.
     * @param {string} [options.args] A comma separated string of iteration function arguments.
     * @param {string} [options.top] Code to execute before the iteration branches.
     * @param {string} [options.loop] Code to execute in the object loop.
     * @param {string} [options.bottom] Code to execute after the iteration branches.
     * @returns {Function} Returns the compiled function.
     */
    function createIterator() {
      // data properties
      iteratorData.shadowedProps = shadowedProps;
      iteratorData.support = support;

      // iterator options
      iteratorData.array = iteratorData.bottom = iteratorData.loop = iteratorData.top = '';
      iteratorData.init = 'iterable';
      iteratorData.useHas = true;

      // merge options into a template data object
      for (var object, index = 0; object = arguments[index]; index++) {
        for (var key in object) {
          iteratorData[key] = object[key];
        }
      }
      var args = iteratorData.args;
      iteratorData.firstArg = /^[^,]+/.exec(args)[0];

      // create the function factory
      var factory = Function(
          'baseCreateCallback, errorClass, errorProto, hasOwnProperty, ' +
          'indicatorObject, isArguments, isArray, isString, keys, objectProto, ' +
          'objectTypes, nonEnumProps, stringClass, stringProto, toString',
        'return function(' + args + ') {\n' + iteratorTemplate(iteratorData) + '\n}'
      );

      // return the compiled function
      return factory(
        baseCreateCallback, errorClass, errorProto, hasOwnProperty,
        indicatorObject, isArguments, isArray, isString, iteratorData.keys, objectProto,
        objectTypes, nonEnumProps, stringClass, stringProto, toString
      );
    }

    /**
     * Used by `escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} match The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeHtmlChar(match) {
      return htmlEscapes[match];
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized, this method returns the custom method, otherwise it returns
     * the `baseIndexOf` function.
     *
     * @private
     * @returns {Function} Returns the "indexOf" function.
     */
    function getIndexOf() {
      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
      return result;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
     */
    function isNative(value) {
      return typeof value == 'function' && reNative.test(value);
    }

    /**
     * Sets `this` binding data on a given function.
     *
     * @private
     * @param {Function} func The function to set data on.
     * @param {Array} value The data array to set.
     */
    var setBindData = !defineProperty ? noop : function(func, value) {
      descriptor.value = value;
      defineProperty(func, '__bindData__', descriptor);
      descriptor.value = null;
    };

    /**
     * A fallback implementation of `isPlainObject` which checks if a given value
     * is an object created by the `Object` constructor, assuming objects created
     * by the `Object` constructor have no inherited enumerable properties and that
     * there are no `Object.prototype` extensions.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var ctor,
          result;

      // avoid non Object objects, `arguments` objects, and DOM elements
      if (!(value && toString.call(value) == objectClass) ||
          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor)) ||
          (!support.argsClass && isArguments(value)) ||
          (!support.nodeClass && isNode(value))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      if (support.ownLast) {
        forIn(value, function(value, key, object) {
          result = hasOwnProperty.call(object, key);
          return false;
        });
        return result !== false;
      }
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      forIn(value, function(value, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /**
     * Used by `unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} match The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    function unescapeHtmlChar(match) {
      return htmlUnescapes[match];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == argsClass || false;
    }
    // fallback for browsers that can't detect `arguments` objects by [[Class]]
    if (!support.argsClass) {
      isArguments = function(value) {
        return value && typeof value == 'object' && typeof value.length == 'number' &&
          hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee') || false;
      };
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    var isArray = nativeIsArray || function(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == arrayClass || false;
    };

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     */
    var shimKeys = createIterator({
      'args': 'object',
      'init': '[]',
      'top': 'if (!(objectTypes[typeof object])) return result',
      'loop': 'result.push(index)'
    });

    /**
     * Creates an array composed of the own enumerable property names of an object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (!isObject(object)) {
        return [];
      }
      if ((support.enumPrototypes && typeof object == 'function') ||
          (support.nonEnumArgs && object.length && isArguments(object))) {
        return shimKeys(object);
      }
      return nativeKeys(object);
    };

    /** Reusable iterator options shared by `each`, `forIn`, and `forOwn` */
    var eachIteratorOptions = {
      'args': 'collection, callback, thisArg',
      'top': "callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3)",
      'array': "typeof length == 'number'",
      'keys': keys,
      'loop': 'if (callback(iterable[index], index, collection) === false) return result'
    };

    /** Reusable iterator options for `assign` and `defaults` */
    var defaultsIteratorOptions = {
      'args': 'object, source, guard',
      'top':
        'var args = arguments,\n' +
        '    argsIndex = 0,\n' +
        "    argsLength = typeof guard == 'number' ? 2 : args.length;\n" +
        'while (++argsIndex < argsLength) {\n' +
        '  iterable = args[argsIndex];\n' +
        '  if (iterable && objectTypes[typeof iterable]) {',
      'keys': keys,
      'loop': "if (typeof result[index] == 'undefined') result[index] = iterable[index]",
      'bottom': '  }\n}'
    };

    /** Reusable iterator options for `forIn` and `forOwn` */
    var forOwnIteratorOptions = {
      'top': 'if (!objectTypes[typeof iterable]) return result;\n' + eachIteratorOptions.top,
      'array': false
    };

    /**
     * Used to convert characters to HTML entities:
     *
     * Though the `>` character is escaped for symmetry, characters like `>` and `/`
     * don't require escaping in HTML and have no special meaning unless they're part
     * of a tag or an unquoted attribute value.
     * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
     */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to convert HTML entities to characters */
    var htmlUnescapes = invert(htmlEscapes);

    /** Used to match HTML entities and HTML characters */
    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

    /**
     * A function compiled to iterate `arguments` objects, arrays, objects, and
     * strings consistenly across environments, executing the callback for each
     * element in the collection. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index|key, collection). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @private
     * @type Function
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createIterator(eachIteratorOptions);

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a callback is provided it will be executed to produce the
     * assigned values. The callback is bound to `thisArg` and invoked with two
     * arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @type Function
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
     * // => { 'name': 'fred', 'employer': 'slate' }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * var object = { 'name': 'barney' };
     * defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var assign = createIterator(defaultsIteratorOptions, {
      'top':
        defaultsIteratorOptions.top.replace(';',
          ';\n' +
          "if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\n" +
          '  var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);\n' +
          "} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\n" +
          '  callback = args[--argsLength];\n' +
          '}'
        ),
      'loop': 'result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]'
    });

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
     * be cloned, otherwise they will be assigned by reference. If a callback
     * is provided it will be executed to produce the cloned values. If the
     * callback returns `undefined` cloning will be handled by the method instead.
     * The callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var shallow = _.clone(characters);
     * shallow[0] === characters[0];
     * // => true
     *
     * var deep = _.clone(characters, true);
     * deep[0] === characters[0];
     * // => false
     *
     * _.mixin({
     *   'clone': _.partialRight(_.clone, function(value) {
     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
     *   })
     * });
     *
     * var clone = _.clone(document.body);
     * clone.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, callback, thisArg) {
      // allows working with "Collections" methods without using their `index`
      // and `collection` arguments for `isDeep` and `callback`
      if (typeof isDeep != 'boolean' && isDeep != null) {
        thisArg = callback;
        callback = isDeep;
        isDeep = false;
      }
      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates a deep clone of `value`. If a callback is provided it will be
     * executed to produce the cloned values. If the callback returns `undefined`
     * cloning will be handled by the method instead. The callback is bound to
     * `thisArg` and invoked with one argument; (value).
     *
     * Note: This method is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var deep = _.cloneDeep(characters);
     * deep[0] === characters[0];
     * // => false
     *
     * var view = {
     *   'label': 'docs',
     *   'node': element
     * };
     *
     * var clone = _.cloneDeep(view, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * clone.node == view.node;
     * // => false
     */
    function cloneDeep(value, callback, thisArg) {
      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? assign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param- {Object} [guard] Allows working with `_.reduce` without using its
     *  `key` and `object` arguments as sources.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var object = { 'name': 'barney' };
     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var defaults = createIterator(defaultsIteratorOptions);

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': false },
     *   'fred': {    'age': 40, 'blocked': true },
     *   'pebbles': { 'age': 1,  'blocked': false }
     * };
     *
     * _.findKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (property order is not guaranteed across environments)
     *
     * // using "_.where" callback shorthand
     * _.findKey(characters, { 'age': 1 });
     * // => 'pebbles'
     *
     * // using "_.pluck" callback shorthand
     * _.findKey(characters, 'blocked');
     * // => 'fred'
     */
    function findKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwn(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': true },
     *   'fred': {    'age': 40, 'blocked': false },
     *   'pebbles': { 'age': 1,  'blocked': true }
     * };
     *
     * _.findLastKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles`, assuming `_.findKey` returns `barney`
     *
     * // using "_.where" callback shorthand
     * _.findLastKey(characters, { 'age': 40 });
     * // => 'fred'
     *
     * // using "_.pluck" callback shorthand
     * _.findLastKey(characters, 'blocked');
     * // => 'pebbles'
     */
    function findLastKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwnRight(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over own and inherited enumerable properties of an object,
     * executing the callback for each property. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, key, object). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forIn(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
     */
    var forIn = createIterator(eachIteratorOptions, forOwnIteratorOptions, {
      'useHas': false
    });

    /**
     * This method is like `_.forIn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forInRight(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'
     */
    function forInRight(object, callback, thisArg) {
      var pairs = [];

      forIn(object, function(value, key) {
        pairs.push(key, value);
      });

      var length = pairs.length;
      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(pairs[length--], pairs[length], object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Iterates over own enumerable properties of an object, executing the callback
     * for each property. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, key, object). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
     */
    var forOwn = createIterator(eachIteratorOptions, forOwnIteratorOptions);

    /**
     * This method is like `_.forOwn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
     */
    function forOwnRight(object, callback, thisArg) {
      var props = keys(object),
          length = props.length;

      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        var key = props[length];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Creates a sorted array of property names of all enumerable properties,
     * own and inherited, of `object` that have function values.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names that have function values.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
     */
    function functions(object) {
      var result = [];
      forIn(object, function(value, key) {
        if (isFunction(value)) {
          result.push(key);
        }
      });
      return result.sort();
    }

    /**
     * Checks if the specified property name exists as a direct property of `object`,
     * instead of an inherited property.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to check.
     * @returns {boolean} Returns `true` if key is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of the given object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the created inverted object.
     * @example
     *
     * _.invert({ 'first': 'fred', 'second': 'barney' });
     * // => { 'fred': 'first', 'barney': 'second' }
     */
    function invert(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        result[object[key]] = key;
      }
      return result;
    }

    /**
     * Checks if `value` is a boolean value.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
     * @example
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        value && typeof value == 'object' && toString.call(value) == boolClass || false;
    }

    /**
     * Checks if `value` is a date.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     */
    function isDate(value) {
      return value && typeof value == 'object' && toString.call(value) == dateClass || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     */
    function isElement(value) {
      return value && value.nodeType === 1 || false;
    }

    /**
     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
     * length of `0` and objects with no own enumerable properties are considered
     * "empty".
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({});
     * // => true
     *
     * _.isEmpty('');
     * // => true
     */
    function isEmpty(value) {
      var result = true;
      if (!value) {
        return result;
      }
      var className = toString.call(value),
          length = value.length;

      if ((className == arrayClass || className == stringClass ||
          (support.argsClass ? className == argsClass : isArguments(value))) ||
          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
        return !length;
      }
      forOwn(value, function() {
        return (result = false);
      });
      return result;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent to each other. If a callback is provided it will be executed
     * to compare values. If the callback returns `undefined` comparisons will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (a, b).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var copy = { 'name': 'fred' };
     *
     * object == copy;
     * // => false
     *
     * _.isEqual(object, copy);
     * // => true
     *
     * var words = ['hello', 'goodbye'];
     * var otherWords = ['hi', 'goodbye'];
     *
     * _.isEqual(words, otherWords, function(a, b) {
     *   var reGreet = /^(?:hello|hi)$/i,
     *       aGreet = _.isString(a) && reGreet.test(a),
     *       bGreet = _.isString(b) && reGreet.test(b);
     *
     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
     * });
     * // => true
     */
    function isEqual(a, b, callback, thisArg) {
      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
    }

    /**
     * Checks if `value` is, or can be coerced to, a finite number.
     *
     * Note: This is not the same as native `isFinite` which will return true for
     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
     * @example
     *
     * _.isFinite(-101);
     * // => true
     *
     * _.isFinite('10');
     * // => true
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite('');
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
    }

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }
    // fallback for older versions of Chrome and Safari
    if (isFunction(/x/)) {
      isFunction = function(value) {
        return typeof value == 'function' && toString.call(value) == funcClass;
      };
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.io/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      return !!(value && objectTypes[typeof value]);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * Note: This is not the same as native `isNaN` which will return `true` for
     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // `NaN` as a primitive is the only value that is not equal to itself
      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(undefined);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is a number.
     *
     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(8.4 * 5);
     * // => true
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        value && typeof value == 'object' && toString.call(value) == numberClass || false;
    }

    /**
     * Checks if `value` is an object created by the `Object` constructor.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * _.isPlainObject(new Shape);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && toString.call(value) == objectClass) || (!support.argsClass && isArguments(value))) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is a regular expression.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
     * @example
     *
     * _.isRegExp(/fred/);
     * // => true
     */
    function isRegExp(value) {
      return value && objectTypes[typeof value] && toString.call(value) == regexpClass || false;
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('fred');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' ||
        value && typeof value == 'object' && toString.call(value) == stringClass || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new object with values of the results of each `callback` execution.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     *
     * var characters = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // using "_.pluck" callback shorthand
     * _.mapValues(characters, 'age');
     * // => { 'fred': 40, 'pebbles': 1 }
     */
    function mapValues(object, callback, thisArg) {
      var result = {};
      callback = lodash.createCallback(callback, thisArg, 3);

      forOwn(object, function(value, key, object) {
        result[key] = callback(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * will overwrite property assignments of previous sources. If a callback is
     * provided it will be executed to produce the merged values of the destination
     * and source properties. If the callback returns `undefined` merging will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var names = {
     *   'characters': [
     *     { 'name': 'barney' },
     *     { 'name': 'fred' }
     *   ]
     * };
     *
     * var ages = {
     *   'characters': [
     *     { 'age': 36 },
     *     { 'age': 40 }
     *   ]
     * };
     *
     * _.merge(names, ages);
     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
     *
     * var food = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var otherFood = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(food, otherFood, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
     */
    function merge(object) {
      var args = arguments,
          length = 2;

      if (!isObject(object)) {
        return object;
      }
      // allows working with `_.reduce` and `_.reduceRight` without using
      // their `index` and `collection` arguments
      if (typeof args[2] != 'number') {
        length = args.length;
      }
      if (length > 3 && typeof args[length - 2] == 'function') {
        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
      } else if (length > 2 && typeof args[length - 1] == 'function') {
        callback = args[--length];
      }
      var sources = slice(arguments, 1, length),
          index = -1,
          stackA = getArray(),
          stackB = getArray();

      while (++index < length) {
        baseMerge(object, sources[index], callback, stackA, stackB);
      }
      releaseArray(stackA);
      releaseArray(stackB);
      return object;
    }

    /**
     * Creates a shallow clone of `object` excluding the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` omitting the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The properties to omit or the
     *  function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object without the omitted properties.
     * @example
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
     * // => { 'name': 'fred' }
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
     *   return typeof value == 'number';
     * });
     * // => { 'name': 'fred' }
     */
    function omit(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var props = [];
        forIn(object, function(value, key) {
          props.push(key);
        });
        props = baseDifference(props, baseFlatten(arguments, true, false, 1));

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          result[key] = object[key];
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (!callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * Creates a two dimensional array of an object's key-value pairs,
     * i.e. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates a shallow clone of `object` composed of the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` picking the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The function called per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object composed of the picked properties.
     * @example
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
     * // => { 'name': 'fred' }
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
     *   return key.charAt(0) != '_';
     * });
     * // => { 'name': 'fred' }
     */
    function pick(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var index = -1,
            props = baseFlatten(arguments, true, false, 1),
            length = isObject(object) ? props.length : 0;

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * An alternative to `_.reduce` this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable properties through a callback, with each callback execution
     * potentially mutating the `accumulator` object. The callback is bound to
     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).
     * Callbacks may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {
     *   num *= num;
     *   if (num % 2) {
     *     return result.push(num) < 3;
     *   }
     * });
     * // => [1, 9, 25]
     *
     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     * });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function transform(object, callback, accumulator, thisArg) {
      var isArr = isArray(object);
      if (accumulator == null) {
        if (isArr) {
          accumulator = [];
        } else {
          var ctor = object && object.constructor,
              proto = ctor && ctor.prototype;

          accumulator = baseCreate(proto);
        }
      }
      if (callback) {
        callback = lodash.createCallback(callback, thisArg, 4);
        (isArr ? baseEach : forOwn)(object, function(value, index, object) {
          return callback(accumulator, value, index, object);
        });
      }
      return accumulator;
    }

    /**
     * Creates an array composed of the own enumerable property values of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property values.
     * @example
     *
     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
     * // => [1, 2, 3] (property order is not guaranteed across environments)
     */
    function values(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array of elements from the specified indexes, or keys, of the
     * `collection`. Indexes may be specified as individual arguments or as arrays
     * of indexes.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`
     *   to retrieve, specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns a new array of elements corresponding to the
     *  provided indexes.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection) {
      var args = arguments,
          index = -1,
          props = baseFlatten(args, true, false, 1),
          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,
          result = Array(length);

      if (support.unindexedChars && isString(collection)) {
        collection = collection.split('');
      }
      while(++index < length) {
        result[index] = collection[props[index]];
      }
      return result;
    }

    /**
     * Checks if a given value is present in a collection using strict equality
     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
     * offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @alias include
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {*} target The value to check for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
     * @example
     *
     * _.contains([1, 2, 3], 1);
     * // => true
     *
     * _.contains([1, 2, 3], 1, 2);
     * // => false
     *
     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.contains('pebbles', 'eb');
     * // => true
     */
    function contains(collection, target, fromIndex) {
      var index = -1,
          indexOf = getIndexOf(),
          length = collection ? collection.length : 0,
          result = false;

      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
      if (isArray(collection)) {
        result = indexOf(collection, target, fromIndex) > -1;
      } else if (typeof length == 'number') {
        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
      } else {
        baseEach(collection, function(value) {
          if (++index >= fromIndex) {
            return !(result = value === target);
          }
        });
      }
      return result;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through the callback. The corresponding value
     * of each key is the number of times the key was returned by the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
    });

    /**
     * Checks if the given callback returns truey value for **all** elements of
     * a collection. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if all elements passed the callback check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes']);
     * // => false
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.every(characters, 'age');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.every(characters, { 'age': 36 });
     * // => false
     */
    function every(collection, callback, thisArg) {
      var result = true;
      callback = lodash.createCallback(callback, thisArg, 3);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          if (!(result = !!callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          return (result = !!callback(value, index, collection));
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning an array of all elements
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that passed the callback check.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [2, 4, 6]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.filter(characters, 'blocked');
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     *
     * // using "_.where" callback shorthand
     * _.filter(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     */
    function filter(collection, callback, thisArg) {
      var result = [];
      callback = lodash.createCallback(callback, thisArg, 3);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            result.push(value);
          }
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result.push(value);
          }
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning the first element that
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect, findWhere
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.find(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => { 'name': 'barney', 'age': 36, 'blocked': false }
     *
     * // using "_.where" callback shorthand
     * _.find(characters, { 'age': 1 });
     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
     *
     * // using "_.pluck" callback shorthand
     * _.find(characters, 'blocked');
     * // => { 'name': 'fred', 'age': 40, 'blocked': true }
     */
    function find(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            return value;
          }
        }
      } else {
        var result;
        baseEach(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }
    }

    /**
     * This method is like `_.find` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(num) {
     *   return num % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forEachRight(collection, function(value, index, collection) {
        if (callback(value, index, collection)) {
          result = value;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over elements of a collection, executing the callback for each
     * element. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * Note: As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
     * // => logs each number and returns '1,2,3'
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
     * // => logs each number and returns the object (property order is not guaranteed across environments)
     */
    function forEach(collection, callback, thisArg) {
      if (callback && typeof thisArg == 'undefined' && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          if (callback(collection[index], index, collection) === false) {
            break;
          }
        }
      } else {
        baseEach(collection, callback, thisArg);
      }
      return collection;
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
     * // => logs each number from right to left and returns '3,2,1'
     */
    function forEachRight(collection, callback, thisArg) {
      var iterable = collection,
          length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (isArray(collection)) {
        while (length--) {
          if (callback(collection[length], length, collection) === false) {
            break;
          }
        }
      } else {
        if (typeof length != 'number') {
          var props = keys(collection);
          length = props.length;
        } else if (support.unindexedChars && isString(collection)) {
          iterable = collection.split('');
        }
        baseEach(collection, function(value, key, collection) {
          key = props ? props[--length] : --length;
          return callback(iterable[key], key, collection);
        });
      }
      return collection;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of a collection through the callback. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using "_.pluck" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of the collection through the given callback. The corresponding
     * value of each key is the last element responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keys = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keys, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in the `collection`
     * returning an array of the results of each invoked method. Additional arguments
     * will be provided to each invoked method. If `methodName` is a function it
     * will be invoked for, and `this` bound to, each element in the `collection`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [arg] Arguments to invoke the method with.
     * @returns {Array} Returns a new array of the results of each invoked method.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      var args = slice(arguments, 2),
          index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in the collection
     * through the callback. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * _.map([1, 2, 3], function(num) { return num * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
     * // => [3, 6, 9] (property order is not guaranteed across environments)
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(characters, 'name');
     * // => ['barney', 'fred']
     */
    function map(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      callback = lodash.createCallback(callback, thisArg, 3);
      if (isArray(collection)) {
        while (++index < length) {
          result[index] = callback(collection[index], index, collection);
        }
      } else {
        baseEach(collection, function(value, key, collection) {
          result[++index] = callback(value, key, collection);
        });
      }
      return result;
    }

    /**
     * Retrieves the maximum value of a collection. If the collection is empty or
     * falsey `-Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.max(characters, function(chr) { return chr.age; });
     * // => { 'name': 'fred', 'age': 40 };
     *
     * // using "_.pluck" callback shorthand
     * _.max(characters, 'age');
     * // => { 'name': 'fred', 'age': 40 };
     */
    function max(collection, callback, thisArg) {
      var computed = -Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value > result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        baseEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current > computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the minimum value of a collection. If the collection is empty or
     * falsey `Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.min(characters, function(chr) { return chr.age; });
     * // => { 'name': 'barney', 'age': 36 };
     *
     * // using "_.pluck" callback shorthand
     * _.min(characters, 'age');
     * // => { 'name': 'barney', 'age': 36 };
     */
    function min(collection, callback, thisArg) {
      var computed = Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value < result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        baseEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current < computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the value of a specified property from all elements in the collection.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} property The name of the property to pluck.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(characters, 'name');
     * // => ['barney', 'fred']
     */
    var pluck = map;

    /**
     * Reduces a collection to a value which is the accumulated result of running
     * each element in the collection through the callback, where each successive
     * callback execution consumes the return value of the previous execution. If
     * `accumulator` is not provided the first element of the collection will be
     * used as the initial `accumulator` value. The callback is bound to `thisArg`
     * and invoked with four arguments; (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function reduce(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        if (noaccum) {
          accumulator = collection[++index];
        }
        while (++index < length) {
          accumulator = callback(accumulator, collection[index], index, collection);
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          accumulator = noaccum
            ? (noaccum = false, value)
            : callback(accumulator, value, index, collection)
        });
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var list = [[0, 1], [2, 3], [4, 5]];
     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);
      forEachRight(collection, function(value, index, collection) {
        accumulator = noaccum
          ? (noaccum = false, value)
          : callback(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The opposite of `_.filter` this method returns the elements of a
     * collection that the callback does **not** return truey for.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that failed the callback check.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [1, 3, 5]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.reject(characters, 'blocked');
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     *
     * // using "_.where" callback shorthand
     * _.reject(characters, { 'age': 36 });
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     */
    function reject(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);
      return filter(collection, function(value, index, collection) {
        return !callback(value, index, collection);
      });
    }

    /**
     * Retrieves a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Allows working with functions like `_.map`
     *  without using their `index` arguments as `n`.
     * @returns {Array} Returns the random sample(s) of `collection`.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (collection && typeof collection.length != 'number') {
        collection = values(collection);
      } else if (support.unindexedChars && isString(collection)) {
        collection = collection.split('');
      }
      if (n == null || guard) {
        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(nativeMax(0, n), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns a new shuffled collection.
     * @example
     *
     * _.shuffle([1, 2, 3, 4, 5, 6]);
     * // => [4, 1, 6, 3, 5, 2]
     */
    function shuffle(collection) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        var rand = baseRandom(0, ++index);
        result[index] = result[rand];
        result[rand] = value;
      });
      return result;
    }

    /**
     * Gets the size of the `collection` by returning `collection.length` for arrays
     * and array-like objects or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns `collection.length` or number of own enumerable properties.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return typeof length == 'number' ? length : keys(collection).length;
    }

    /**
     * Checks if the callback returns a truey value for **any** element of a
     * collection. The function returns as soon as it finds a passing value and
     * does not iterate over the entire collection. The callback is bound to
     * `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if any element passed the callback check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.some(characters, 'blocked');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.some(characters, { 'age': 1 });
     * // => false
     */
    function some(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          if ((result = callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          return !(result = callback(value, index, collection));
        });
      }
      return !!result;
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through the callback. This method
     * performs a stable sort, that is, it will preserve the original sort order
     * of equal elements. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an array of property names is provided for `callback` the collection
     * will be sorted by each property value.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of sorted elements.
     * @example
     *
     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
     * // => [3, 1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'barney',  'age': 26 },
     *   { 'name': 'fred',    'age': 30 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(_.sortBy(characters, 'age'), _.values);
     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
     *
     * // sorting by multiple properties
     * _.map(_.sortBy(characters, ['name', 'age']), _.values);
     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortBy(collection, callback, thisArg) {
      var index = -1,
          isArr = isArray(callback),
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      if (!isArr) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      forEach(collection, function(value, key, collection) {
        var object = result[++index] = getObject();
        if (isArr) {
          object.criteria = map(callback, function(key) { return value[key]; });
        } else {
          (object.criteria = getArray())[0] = callback(value, key, collection);
        }
        object.index = index;
        object.value = value;
      });

      length = result.length;
      result.sort(compareAscending);
      while (length--) {
        var object = result[length];
        result[length] = object.value;
        if (!isArr) {
          releaseArray(object.criteria);
        }
        releaseObject(object);
      }
      return result;
    }

    /**
     * Converts the `collection` to an array.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to convert.
     * @returns {Array} Returns the new converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     * // => [2, 3, 4]
     */
    function toArray(collection) {
      if (collection && typeof collection.length == 'number') {
        return (support.unindexedChars && isString(collection))
          ? collection.split('')
          : slice(collection);
      }
      return values(collection);
    }

    /**
     * Performs a deep comparison of each element in a `collection` to the given
     * `properties` object, returning an array of all elements that have equivalent
     * property values.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Object} props The object of property values to filter by.
     * @returns {Array} Returns a new array of elements that have the given properties.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.where(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
     *
     * _.where(characters, { 'pets': ['dino'] });
     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
     */
    var where = filter;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are all falsey.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to compact.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using strict
     * equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     * // => [1, 3, 4]
     */
    function difference(array) {
      return baseDifference(array, baseFlatten(arguments, true, true, 1));
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.findIndex(characters, function(chr) {
     *   return chr.age < 20;
     * });
     * // => 2
     *
     * // using "_.where" callback shorthand
     * _.findIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findIndex(characters, 'blocked');
     * // => 1
     */
    function findIndex(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        if (callback(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': true },
     *   { 'name': 'fred',    'age': 40, 'blocked': false },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }
     * ];
     *
     * _.findLastIndex(characters, function(chr) {
     *   return chr.age > 30;
     * });
     * // => 1
     *
     * // using "_.where" callback shorthand
     * _.findLastIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findLastIndex(characters, 'blocked');
     * // => 2
     */
    function findLastIndex(array, callback, thisArg) {
      var length = array ? array.length : 0;
      callback = lodash.createCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element or first `n` elements of an array. If a callback
     * is provided elements at the beginning of the array are returned as long
     * as the callback returns truey. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias head, take
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the first element(s) of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.first([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.first(characters, 'blocked');
     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
     * // => ['barney', 'fred']
     */
    function first(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = -1;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[0] : undefined;
        }
      }
      return slice(array, 0, nativeMin(nativeMax(0, n), length));
    }

    /**
     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
     * is truey, the array will only be flattened a single level. If a callback
     * is provided each element of the array is passed through the callback before
     * flattening. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     *
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, [[4]]];
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.flatten(characters, 'pets');
     * // => ['hoppy', 'baby puss', 'dino']
     */
    function flatten(array, isShallow, callback, thisArg) {
      // juggle arguments
      if (typeof isShallow != 'boolean' && isShallow != null) {
        thisArg = callback;
        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;
        isShallow = false;
      }
      if (callback != null) {
        array = map(array, callback, thisArg);
      }
      return baseFlatten(array, isShallow);
    }

    /**
     * Gets the index at which the first occurrence of `value` is found using
     * strict equality for comparisons, i.e. `===`. If the array is already sorted
     * providing `true` for `fromIndex` will run a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      if (typeof fromIndex == 'number') {
        var length = array ? array.length : 0;
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
      } else if (fromIndex) {
        var index = sortedIndex(array, value);
        return array[index] === value ? index : -1;
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element or last `n` elements of an array. If a
     * callback is provided elements at the end of the array are excluded from
     * the result as long as the callback returns truey. The callback is bound
     * to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     *
     * _.initial([1, 2, 3], 2);
     * // => [1]
     *
     * _.initial([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [1]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.initial(characters, 'blocked');
     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
     * // => ['barney', 'fred']
     */
    function initial(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : callback || n;
      }
      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
    }

    /**
     * Creates an array of unique values present in all provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of shared values.
     * @example
     *
     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = getArray(),
          indexOf = getIndexOf(),
          trustIndexOf = indexOf === baseIndexOf,
          seen = getArray();

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push(trustIndexOf && value.length >= largeArraySize &&
            createCache(argsIndex ? args[argsIndex] : seen));
        }
      }
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [];

      outer:
      while (++index < length) {
        var cache = caches[0];
        value = array[index];

        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
          argsIndex = argsLength;
          (cache || seen).push(value);
          while (--argsIndex) {
            cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
              continue outer;
            }
          }
          result.push(value);
        }
      }
      while (argsLength--) {
        cache = caches[argsLength];
        if (cache) {
          releaseObject(cache);
        }
      }
      releaseArray(caches);
      releaseArray(seen);
      return result;
    }

    /**
     * Gets the last element or last `n` elements of an array. If a callback is
     * provided elements at the end of the array are returned as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the last element(s) of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     *
     * _.last([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.last([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [2, 3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.last(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.last(characters, { 'employer': 'na' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function last(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[length - 1] : undefined;
        }
      }
      return slice(array, nativeMax(0, length - n));
    }

    /**
     * Gets the index at which the last occurrence of `value` is found using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var index = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from the given array using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {...*} [value] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull(array) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          length = array ? array.length : 0;

      while (++argsIndex < argsLength) {
        var index = -1,
            value = args[argsIndex];
        while (++index < length) {
          if (array[index] === value) {
            splice.call(array, index--, 1);
            length--;
          }
        }
      }
      return array;
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to but not including `end`. If `start` is less than `stop` a
     * zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns a new range array.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      start = +start || 0;
      step = typeof step == 'number' ? step : (+step || 1);

      if (end == null) {
        end = start;
        start = 0;
      }
      // use `Array(length)` so engines like Chakra and V8 avoid slower modes
      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
      var index = -1,
          length = nativeMax(0, ceil((end - start) / (step || 1))),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Removes all elements from an array that the callback returns truey for
     * and returns an array of removed elements. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4, 5, 6];
     * var evens = _.remove(array, function(num) { return num % 2 == 0; });
     *
     * console.log(array);
     * // => [1, 3, 5]
     *
     * console.log(evens);
     * // => [2, 4, 6]
     */
    function remove(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (callback(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * The opposite of `_.initial` this method gets all but the first element or
     * first `n` elements of an array. If a callback function is provided elements
     * at the beginning of the array are excluded from the result as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias drop, tail
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     *
     * _.rest([1, 2, 3], 2);
     * // => [3]
     *
     * _.rest([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.rest(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.rest(characters, { 'employer': 'slate' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function rest(array, callback, thisArg) {
      if (typeof callback != 'number' && callback != null) {
        var n = 0,
            index = -1,
            length = array ? array.length : 0;

        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
      }
      return slice(array, n);
    }

    /**
     * Uses a binary search to determine the smallest index at which a value
     * should be inserted into a given sorted array in order to maintain the sort
     * order of the array. If a callback is provided it will be executed for
     * `value` and each element of `array` to compute their sort ranking. The
     * callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([20, 30, 50], 40);
     * // => 2
     *
     * // using "_.pluck" callback shorthand
     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 2
     *
     * var dict = {
     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
     * };
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return dict.wordToNumber[word];
     * });
     * // => 2
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return this.wordToNumber[word];
     * }, dict);
     * // => 2
     */
    function sortedIndex(array, value, callback, thisArg) {
      var low = 0,
          high = array ? array.length : low;

      // explicitly reference `identity` for better inlining in Firefox
      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
      value = callback(value);

      while (low < high) {
        var mid = (low + high) >>> 1;
        (callback(array[mid]) < value)
          ? low = mid + 1
          : high = mid;
      }
      return low;
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of combined values.
     * @example
     *
     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2, 3, 5, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, true, true));
    }

    /**
     * Creates a duplicate-value-free version of an array using strict equality
     * for comparisons, i.e. `===`. If the array is sorted, providing
     * `true` for `isSorted` will use a faster algorithm. If a callback is provided
     * each element of `array` is passed through the callback before uniqueness
     * is computed. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1, 3, 1]);
     * // => [1, 2, 3]
     *
     * _.uniq([1, 1, 2, 2, 3], true);
     * // => [1, 2, 3]
     *
     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
     * // => ['A', 'b', 'C']
     *
     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
     * // => [1, 2.5, 3]
     *
     * // using "_.pluck" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, callback, thisArg) {
      // juggle arguments
      if (typeof isSorted != 'boolean' && isSorted != null) {
        thisArg = callback;
        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;
        isSorted = false;
      }
      if (callback != null) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      return baseUniq(array, isSorted, callback);
    }

    /**
     * Creates an array excluding all provided values using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to filter.
     * @param {...*} [value] The values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return baseDifference(array, slice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See http://en.wikipedia.org/wiki/Symmetric_difference.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of values.
     * @example
     *
     * _.xor([1, 2, 3], [5, 2, 1, 4]);
     * // => [3, 5, 4]
     *
     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
     * // => [1, 4, 5]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))
            : array;
        }
      }
      return result || [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second
     * elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @alias unzip
     * @category Arrays
     * @param {...Array} [array] Arrays to process.
     * @returns {Array} Returns a new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    function zip() {
      var array = arguments.length > 1 ? arguments : arguments[0],
          index = -1,
          length = array ? max(pluck(array, 'length')) : 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = pluck(array, index);
      }
      return result;
    }

    /**
     * Creates an object composed from arrays of `keys` and `values`. Provide
     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of `keys` and one of corresponding `values`.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Arrays
     * @param {Array} keys The array of keys.
     * @param {Array} [values=[]] The array of values.
     * @returns {Object} Returns an object composed of the given keys and
     *  corresponding values.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(keys, values) {
      var index = -1,
          length = keys ? keys.length : 0,
          result = {};

      if (!values && length && !isArray(keys[0])) {
        values = [];
      }
      while (++index < length) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that executes `func`, with  the `this` binding and
     * arguments of the created function, only after being called `n` times.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {number} n The number of times the function must be called before
     *  `func` is executed.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('Done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'Done saving!', after all saves have completed
     */
    function after(n, func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * provided to the bound function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'fred' }, 'hi');
     * func();
     * // => 'hi fred'
     */
    function bind(func, thisArg) {
      return arguments.length > 2
        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
        : createWrapper(func, 1, null, null, thisArg);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all the function properties
     * of `object` will be bound.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...string} [methodName] The object method names to
     *  bind, specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() { console.log('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs', when the button is clicked
     */
    function bindAll(object) {
      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
          index = -1,
          length = funcs.length;

      while (++index < length) {
        var key = funcs[index];
        object[key] = createWrapper(object[key], 1, null, null, object);
      }
      return object;
    }

    /**
     * Creates a function that, when called, invokes the method at `object[key]`
     * and prepends any additional `bindKey` arguments to those provided to the bound
     * function. This method differs from `_.bind` by allowing bound functions to
     * reference methods that will be redefined or don't yet exist.
     * See http://michaux.ca/articles/lazy-function-definition-pattern.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'name': 'fred',
     *   'greet': function(greeting) {
     *     return greeting + ' ' + this.name;
     *   }
     * };
     *
     * var func = _.bindKey(object, 'greet', 'hi');
     * func();
     * // => 'hi fred'
     *
     * object.greet = function(greeting) {
     *   return greeting + 'ya ' + this.name + '!';
     * };
     *
     * func();
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      return arguments.length > 2
        ? createWrapper(key, 19, slice(arguments, 2), null, object)
        : createWrapper(key, 3, null, null, object);
    }

    /**
     * Creates a function that is the composition of the provided functions,
     * where each function consumes the return value of the function that follows.
     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
     * Each function is executed with the `this` binding of the composed function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {...Function} [func] Functions to compose.
     * @returns {Function} Returns the new composed function.
     * @example
     *
     * var realNameMap = {
     *   'pebbles': 'penelope'
     * };
     *
     * var format = function(name) {
     *   name = realNameMap[name.toLowerCase()] || name;
     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
     * };
     *
     * var greet = function(formatted) {
     *   return 'Hiya ' + formatted + '!';
     * };
     *
     * var welcome = _.compose(greet, format);
     * welcome('pebbles');
     * // => 'Hiya Penelope!'
     */
    function compose() {
      var funcs = arguments,
          length = funcs.length;

      while (length--) {
        if (!isFunction(funcs[length])) {
          throw new TypeError;
        }
      }
      return function() {
        var args = arguments,
            length = funcs.length;

        while (length--) {
          args = [funcs[length].apply(this, args)];
        }
        return args[0];
      };
    }

    /**
     * Creates a function which accepts one or more arguments of `func` that when
     * invoked either executes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` can be specified
     * if `func.length` is not sufficient.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var curried = _.curry(function(a, b, c) {
     *   console.log(a + b + c);
     * });
     *
     * curried(1)(2)(3);
     * // => 6
     *
     * curried(1, 2)(3);
     * // => 6
     *
     * curried(1, 2, 3);
     * // => 6
     */
    function curry(func, arity) {
      arity = typeof arity == 'number' ? arity : (+arity || func.length);
      return createWrapper(func, 4, null, null, null, arity);
    }

    /**
     * Creates a function that will delay the execution of `func` until after
     * `wait` milliseconds have elapsed since the last time it was invoked.
     * Provide an options object to indicate that `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
     * to the debounced function will return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to debounce.
     * @param {number} wait The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * var lazyLayout = _.debounce(calculateLayout, 150);
     * jQuery(window).on('resize', lazyLayout);
     *
     * // execute `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * });
     *
     * // ensure `batchLog` is executed once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * source.addEventListener('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }, false);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      wait = nativeMax(0, wait) || 0;
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      var delayed = function() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      };

      var maxDelayed = function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      };

      return function() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      };
    }

    /**
     * Defers executing the `func` function until the current call stack has cleared.
     * Additional arguments will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to defer.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) { console.log(text); }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 1);
      return setTimeout(function() { func.apply(undefined, args); }, 1);
    }

    /**
     * Executes the `func` function after `wait` milliseconds. Additional arguments
     * will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay execution.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) { console.log(text); }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 2);
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it will be used to determine the cache key for storing the result
     * based on the arguments provided to the memoized function. By default, the
     * first argument provided to the memoized function is used as the cache key.
     * The `func` is executed with the `this` binding of the memoized function.
     * The result cache is exposed as the `cache` property on the memoized function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] A function used to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var fibonacci = _.memoize(function(n) {
     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
     * });
     *
     * fibonacci(9)
     * // => 34
     *
     * var data = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // modifying the result cache
     * var get = _.memoize(function(name) { return data[name]; }, _.identity);
     * get('pebbles');
     * // => { 'name': 'pebbles', 'age': 1 }
     *
     * get.cache.pebbles.name = 'penelope';
     * get('pebbles');
     * // => { 'name': 'penelope', 'age': 1 }
     */
    function memoize(func, resolver) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var memoized = function() {
        var cache = memoized.cache,
            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];

        return hasOwnProperty.call(cache, key)
          ? cache[key]
          : (cache[key] = func.apply(this, arguments));
      }
      memoized.cache = {};
      return memoized;
    }

    /**
     * Creates a function that is restricted to execute `func` once. Repeat calls to
     * the function will return the value of the first call. The `func` is executed
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` executes `createApplication` once
     */
    function once(func) {
      var ran,
          result;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (ran) {
          return result;
        }
        ran = true;
        result = func.apply(this, arguments);

        // clear the `func` variable so the function may be garbage collected
        func = null;
        return result;
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with any additional
     * `partial` arguments prepended to those provided to the new function. This
     * method is similar to `_.bind` except it does **not** alter the `this` binding.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) { return greeting + ' ' + name; };
     * var hi = _.partial(greet, 'hi');
     * hi('fred');
     * // => 'hi fred'
     */
    function partial(func) {
      return createWrapper(func, 16, slice(arguments, 1));
    }

    /**
     * This method is like `_.partial` except that `partial` arguments are
     * appended to those provided to the new function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
     *
     * var options = {
     *   'variable': 'data',
     *   'imports': { 'jq': $ }
     * };
     *
     * defaultsDeep(options, _.templateSettings);
     *
     * options.variable
     * // => 'data'
     *
     * options.imports
     * // => { '_': _, 'jq': $ }
     */
    function partialRight(func) {
      return createWrapper(func, 32, null, slice(arguments, 1));
    }

    /**
     * Creates a function that, when executed, will only call the `func` function
     * at most once per every `wait` milliseconds. Provide an options object to
     * indicate that `func` should be invoked on the leading and/or trailing edge
     * of the `wait` timeout. Subsequent calls to the throttled function will
     * return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to throttle.
     * @param {number} wait The number of milliseconds to throttle executions to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * var throttled = _.throttle(updatePosition, 100);
     * jQuery(window).on('scroll', throttled);
     *
     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? options.leading : leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = wait;
      debounceOptions.trailing = trailing;

      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Additional arguments provided to the function are appended
     * to those provided to the wrapper function. The wrapper is executed with
     * the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('Fred, Wilma, & Pebbles');
     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'
     */
    function wrap(value, wrapper) {
      return createWrapper(wrapper, 16, [value]);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var getter = _.constant(object);
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Produces a callback bound to an optional `thisArg`. If `func` is a property
     * name the created callback will return the property value for a given element.
     * If `func` is an object the created callback will return `true` for elements
     * that contain the equivalent object properties, otherwise it will return `false`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
     *   return !match ? func(callback, thisArg) : function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(characters, 'age__gt38');
     * // => [{ 'name': 'fred', 'age': 40 }]
     */
    function createCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (func == null || type == 'function') {
        return baseCreateCallback(func, thisArg, argCount);
      }
      // handle "_.pluck" style callback shorthands
      if (type != 'object') {
        return property(func);
      }
      var props = keys(func),
          key = props[0],
          a = func[key];

      // handle "_.where" style callback shorthands
      if (props.length == 1 && a === a && !isObject(a)) {
        // fast path the common case of providing an object with a single
        // property containing a primitive value
        return function(object) {
          var b = object[key];
          return a === b && (a !== 0 || (1 / a == 1 / b));
        };
      }
      return function(object) {
        var length = props.length,
            result = false;

        while (length--) {
          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
            break;
          }
        }
        return result;
      };
    }

    /**
     * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
     * corresponding HTML entities.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('Fred, Wilma, & Pebbles');
     * // => 'Fred, Wilma, &amp; Pebbles'
     */
    function escape(string) {
      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Adds function properties of a source object to the destination object.
     * If `object` is a function methods will be added to its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Function|Object} [object=lodash] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
     * @example
     *
     * function capitalize(string) {
     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
     * }
     *
     * _.mixin({ 'capitalize': capitalize });
     * _.capitalize('fred');
     * // => 'Fred'
     *
     * _('fred').capitalize().value();
     * // => 'Fred'
     *
     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });
     * _('fred').capitalize();
     * // => 'Fred'
     */
    function mixin(object, source, options) {
      var chain = true,
          methodNames = source && functions(source);

      if (!source || (!options && !methodNames.length)) {
        if (options == null) {
          options = source;
        }
        ctor = lodashWrapper;
        source = object;
        object = lodash;
        methodNames = functions(source);
      }
      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      var ctor = object,
          isFunc = isFunction(ctor);

      forEach(methodNames, function(methodName) {
        var func = object[methodName] = source[methodName];
        if (isFunc) {
          ctor.prototype[methodName] = function() {
            var chainAll = this.__chain__,
                value = this.__wrapped__,
                args = [value];

            push.apply(args, arguments);
            var result = func.apply(object, args);
            if (chain || chainAll) {
              if (value === result && isObject(result)) {
                return this;
              }
              result = new ctor(result);
              result.__chain__ = chainAll;
            }
            return result;
          };
        }
      });
    }

    /**
     * Reverts the '_' variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // no operation performed
    }

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var stamp = _.now();
     * _.defer(function() { console.log(_.now() - stamp); });
     * // => logs the number of milliseconds it took for the deferred function to be called
     */
    var now = isNative(now = Date.now) && now || function() {
      return new Date().getTime();
    };

    /**
     * Converts the given value into an integer of the specified radix.
     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the
     * `value` is a hexadecimal, in which case a `radix` of `16` is used.
     *
     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
     * implementations. See http://es5.github.io/#E.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} value The value to parse.
     * @param {number} [radix] The radix used to interpret the value to parse.
     * @returns {number} Returns the new integer value.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     */
    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {
      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`
      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);
    };

    /**
     * Creates a "_.pluck" style function, which returns the `key` value of a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} key The name of the property to retrieve.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var characters = [
     *   { 'name': 'fred',   'age': 40 },
     *   { 'name': 'barney', 'age': 36 }
     * ];
     *
     * var getName = _.property('name');
     *
     * _.map(characters, getName);
     * // => ['barney', 'fred']
     *
     * _.sortBy(characters, getName);
     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
     */
    function property(key) {
      return function(object) {
        return object[key];
      };
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number will be
     * returned. If `floating` is truey or either `min` or `max` are floats a
     * floating-point number will be returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating=false] Specify returning a floating-point number.
     * @returns {number} Returns a random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (typeof min == 'boolean' && noMax) {
          floating = min;
          min = 1;
        }
        else if (!noMax && typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /**
     * Resolves the value of property `key` on `object`. If `key` is a function
     * it will be invoked with the `this` binding of `object` and its result returned,
     * else the property value is returned. If `object` is falsey then `undefined`
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to resolve.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = {
     *   'cheese': 'crumpets',
     *   'stuff': function() {
     *     return 'nonsense';
     *   }
     * };
     *
     * _.result(object, 'cheese');
     * // => 'crumpets'
     *
     * _.result(object, 'stuff');
     * // => 'nonsense'
     */
    function result(object, key) {
      if (object) {
        var value = object[key];
        return isFunction(value) ? object[key]() : value;
      }
    }

    /**
     * A micro-templating method that handles arbitrary delimiters, preserves
     * whitespace, and correctly escapes quotes within interpolated code.
     *
     * Note: In the development build, `_.template` utilizes sourceURLs for easier
     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
     *
     * For more information on precompiling templates see:
     * https://lodash.com/custom-builds
     *
     * For more information on Chrome extension sandboxes see:
     * http://developer.chrome.com/stable/extensions/sandboxingEval.html
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} text The template text.
     * @param {Object} data The data object used to populate the text.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as local variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [variable] The data object variable name.
     * @returns {Function|string} Returns a compiled function when no `data` object
     *  is given, else it returns the interpolated text.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= name %>');
     * compiled({ 'name': 'fred' });
     * // => 'hello fred'
     *
     * // using the "escape" delimiter to escape HTML in data property values
     * _.template('<b><%- value %></b>', { 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to generate HTML
     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
     * _.template('hello ${ name }', { 'name': 'pebbles' });
     * // => 'hello pebbles'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
     * // => 'hello barney!'
     *
     * // using a custom template delimiters
     * _.templateSettings = {
     *   'interpolate': /{{([\s\S]+?)}}/g
     * };
     *
     * _.template('hello {{ name }}!', { 'name': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using the `imports` option to import jQuery
     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '', __e = _.escape;
     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(text, data, options) {
      // based on John Resig's `tmpl` implementation
      // http://ejohn.org/blog/javascript-micro-templating/
      // and Laura Doktorova's doT.js
      // https://github.com/olado/doT
      var settings = lodash.templateSettings;
      text = String(text || '');

      // avoid missing dependencies when `iteratorTemplate` is not defined
      options = iteratorTemplate ? defaults({}, options, settings) : settings;

      var imports = iteratorTemplate && defaults({}, options.imports, settings.imports),
          importsKeys = iteratorTemplate ? keys(imports) : ['_'],
          importsValues = iteratorTemplate ? values(imports) : [lodash];

      var isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // compile the regexp to match each delimiter
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // escape characters that cannot be included in string literals
        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // replace delimiters with snippets
        if (escapeValue) {
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // the JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value
        return match;
      });

      source += "';\n";

      // if `variable` is not specified, wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain
      var variable = options.variable,
          hasVariable = variable;

      if (!hasVariable) {
        variable = 'obj';
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      // cleanup code by stripping empty strings
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // frame code as the function body
      source = 'function(' + variable + ') {\n' +
        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
        "var __t, __p = '', __e = _.escape" +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      // Use a sourceURL for easier debugging.
      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
      var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

      try {
        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
      } catch(e) {
        e.source = source;
        throw e;
      }
      if (data) {
        return result(data);
      }
      // provide the compiled function's source by its `toString` method, in
      // supported environments, or the `source` property as a convenience for
      // inlining compiled templates during the build process
      result.source = source;
      return result;
    }

    /**
     * Executes the callback `n` times, returning an array of the results
     * of each callback execution. The callback is bound to `thisArg` and invoked
     * with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} n The number of times to execute the callback.
     * @param {Function} callback The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns an array of the results of each `callback` execution.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also calls `mage.castSpell(n)` three times
     */
    function times(n, callback, thisArg) {
      n = (n = +n) > -1 ? n : 0;
      var index = -1,
          result = Array(n);

      callback = baseCreateCallback(callback, thisArg, 1);
      while (++index < n) {
        result[index] = callback(index);
      }
      return result;
    }

    /**
     * The inverse of `_.escape` this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
     * corresponding characters.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('Fred, Barney &amp; Pebbles');
     * // => 'Fred, Barney & Pebbles'
     */
    function unescape(string) {
      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return String(prefix == null ? '' : prefix) + id;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps the given value with explicit
     * method chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(characters)
     *     .sortBy('age')
     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
     *     .first()
     *     .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      value = new lodashWrapper(value);
      value.__chain__ = true;
      return value;
    }

    /**
     * Invokes `interceptor` with the `value` as the first argument and then
     * returns `value`. The purpose of this method is to "tap into" a method
     * chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3, 4])
     *  .tap(function(array) { array.pop(); })
     *  .reverse()
     *  .value();
     * // => [3, 2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chaining
     * @returns {*} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(characters).first();
     * // => { 'name': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(characters).chain()
     *   .first()
     *   .pick('age')
     *   .value();
     * // => { 'age': 36 }
     */
    function wrapperChain() {
      this.__chain__ = true;
      return this;
    }

    /**
     * Produces the `toString` result of the wrapped value.
     *
     * @name toString
     * @memberOf _
     * @category Chaining
     * @returns {string} Returns the string result.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return String(this.__wrapped__);
    }

    /**
     * Extracts the wrapped value.
     *
     * @name valueOf
     * @memberOf _
     * @alias value
     * @category Chaining
     * @returns {*} Returns the wrapped value.
     * @example
     *
     * _([1, 2, 3]).valueOf();
     * // => [1, 2, 3]
     */
    function wrapperValueOf() {
      return this.__wrapped__;
    }

    /*--------------------------------------------------------------------------*/

    // add functions that return wrapped values when chaining
    lodash.after = after;
    lodash.assign = assign;
    lodash.at = at;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.compose = compose;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.createCallback = createCallback;
    lodash.curry = curry;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.max = max;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.min = min;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.pull = pull;
    lodash.range = range;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.values = values;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // add aliases
    lodash.collect = map;
    lodash.drop = rest;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;
    lodash.unzip = zip;

    // add functions to `lodash.prototype`
    mixin(lodash);

    /*--------------------------------------------------------------------------*/

    // add functions that return unwrapped values when chaining
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.contains = contains;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.has = has;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.lastIndexOf = lastIndexOf;
    lodash.mixin = mixin;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.template = template;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;

    // add aliases
    lodash.all = every;
    lodash.any = some;
    lodash.detect = find;
    lodash.findWhere = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.include = contains;
    lodash.inject = reduce;

    mixin(function() {
      var source = {}
      forOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }(), false);

    /*--------------------------------------------------------------------------*/

    // add functions capable of returning wrapped and unwrapped values when chaining
    lodash.first = first;
    lodash.last = last;
    lodash.sample = sample;

    // add aliases
    lodash.take = first;
    lodash.head = first;

    forOwn(lodash, function(func, methodName) {
      var callbackable = methodName !== 'sample';
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName]= function(n, guard) {
          var chainAll = this.__chain__,
              result = func(this.__wrapped__, n, guard);

          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))
            ? result
            : new lodashWrapper(result, chainAll);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = '2.4.2';

    // add "Chaining" functions to the wrapper
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.value = wrapperValueOf;
    lodash.prototype.valueOf = wrapperValueOf;

    // add `Array` functions that return unwrapped values
    baseEach(['join', 'pop', 'shift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        var chainAll = this.__chain__,
            result = func.apply(this.__wrapped__, arguments);

        return chainAll
          ? new lodashWrapper(result, chainAll)
          : result;
      };
    });

    // add `Array` functions that return the existing wrapped value
    baseEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        func.apply(this.__wrapped__, arguments);
        return this;
      };
    });

    // add `Array` functions that return new wrapped values
    baseEach(['concat', 'slice', 'splice'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
      };
    });

    // avoid array-like object bugs with `Array#shift` and `Array#splice`
    // in IE < 9, Firefox < 10, Narwhal, and RingoJS
    if (!support.spliceObjects) {
      baseEach(['pop', 'shift', 'splice'], function(methodName) {
        var func = arrayRef[methodName],
            isSplice = methodName == 'splice';

        lodash.prototype[methodName] = function() {
          var chainAll = this.__chain__,
              value = this.__wrapped__,
              result = func.apply(value, arguments);

          if (value.length === 0) {
            delete value[0];
          }
          return (chainAll || isSplice)
            ? new lodashWrapper(result, chainAll)
            : result;
        };
      });
    }

    // add pseudo private property to be used and removed during the build process
    lodash._baseEach = baseEach;
    lodash._iteratorTemplate = iteratorTemplate;
    lodash._shimKeys = shimKeys;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  var _ = runInContext();

  // some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash is loaded with a RequireJS shim config.
    // See http://requirejs.org/docs/api.html#config-shim
    root._ = _;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define(function() {
      return _;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // in Narwhal or Rhino -require
    else {
      freeExports._ = _;
    }
  }
  else {
    // in a browser or Rhino
    root._ = _;
  }
}.call(this));

/*!

 handlebars v2.0.0

Copyright (C) 2011-2014 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@license
*/
/* exported Handlebars */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.Handlebars = root.Handlebars || factory();
  }
}(this, function () {
// handlebars/safe-string.js
var __module3__ = (function() {
  "use strict";
  var __exports__;
  // Build out our basic SafeString type
  function SafeString(string) {
    this.string = string;
  }

  SafeString.prototype.toString = function() {
    return "" + this.string;
  };

  __exports__ = SafeString;
  return __exports__;
})();

// handlebars/utils.js
var __module2__ = (function(__dependency1__) {
  "use strict";
  var __exports__ = {};
  /*jshint -W004 */
  var SafeString = __dependency1__;

  var escape = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };

  var badChars = /[&<>"'`]/g;
  var possible = /[&<>"'`]/;

  function escapeChar(chr) {
    return escape[chr];
  }

  function extend(obj /* , ...source */) {
    for (var i = 1; i < arguments.length; i++) {
      for (var key in arguments[i]) {
        if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
          obj[key] = arguments[i][key];
        }
      }
    }

    return obj;
  }

  __exports__.extend = extend;var toString = Object.prototype.toString;
  __exports__.toString = toString;
  // Sourced from lodash
  // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
  var isFunction = function(value) {
    return typeof value === 'function';
  };
  // fallback for older versions of Chrome and Safari
  /* istanbul ignore next */
  if (isFunction(/x/)) {
    isFunction = function(value) {
      return typeof value === 'function' && toString.call(value) === '[object Function]';
    };
  }
  var isFunction;
  __exports__.isFunction = isFunction;
  /* istanbul ignore next */
  var isArray = Array.isArray || function(value) {
    return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
  };
  __exports__.isArray = isArray;

  function escapeExpression(string) {
    // don't escape SafeStrings, since they're already safe
    if (string instanceof SafeString) {
      return string.toString();
    } else if (string == null) {
      return "";
    } else if (!string) {
      return string + '';
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = "" + string;

    if(!possible.test(string)) { return string; }
    return string.replace(badChars, escapeChar);
  }

  __exports__.escapeExpression = escapeExpression;function isEmpty(value) {
    if (!value && value !== 0) {
      return true;
    } else if (isArray(value) && value.length === 0) {
      return true;
    } else {
      return false;
    }
  }

  __exports__.isEmpty = isEmpty;function appendContextPath(contextPath, id) {
    return (contextPath ? contextPath + '.' : '') + id;
  }

  __exports__.appendContextPath = appendContextPath;
  return __exports__;
})(__module3__);

// handlebars/exception.js
var __module4__ = (function() {
  "use strict";
  var __exports__;

  var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

  function Exception(message, node) {
    var line;
    if (node && node.firstLine) {
      line = node.firstLine;

      message += ' - ' + line + ':' + node.firstColumn;
    }

    var tmp = Error.prototype.constructor.call(this, message);

    // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
    for (var idx = 0; idx < errorProps.length; idx++) {
      this[errorProps[idx]] = tmp[errorProps[idx]];
    }

    if (line) {
      this.lineNumber = line;
      this.column = node.firstColumn;
    }
  }

  Exception.prototype = new Error();

  __exports__ = Exception;
  return __exports__;
})();

// handlebars/base.js
var __module1__ = (function(__dependency1__, __dependency2__) {
  "use strict";
  var __exports__ = {};
  var Utils = __dependency1__;
  var Exception = __dependency2__;

  var VERSION = "2.0.0";
  __exports__.VERSION = VERSION;var COMPILER_REVISION = 6;
  __exports__.COMPILER_REVISION = COMPILER_REVISION;
  var REVISION_CHANGES = {
    1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
    2: '== 1.0.0-rc.3',
    3: '== 1.0.0-rc.4',
    4: '== 1.x.x',
    5: '== 2.0.0-alpha.x',
    6: '>= 2.0.0-beta.1'
  };
  __exports__.REVISION_CHANGES = REVISION_CHANGES;
  var isArray = Utils.isArray,
      isFunction = Utils.isFunction,
      toString = Utils.toString,
      objectType = '[object Object]';

  function HandlebarsEnvironment(helpers, partials) {
    this.helpers = helpers || {};
    this.partials = partials || {};

    registerDefaultHelpers(this);
  }

  __exports__.HandlebarsEnvironment = HandlebarsEnvironment;HandlebarsEnvironment.prototype = {
    constructor: HandlebarsEnvironment,

    logger: logger,
    log: log,

    registerHelper: function(name, fn) {
      if (toString.call(name) === objectType) {
        if (fn) { throw new Exception('Arg not supported with multiple helpers'); }
        Utils.extend(this.helpers, name);
      } else {
        this.helpers[name] = fn;
      }
    },
    unregisterHelper: function(name) {
      delete this.helpers[name];
    },

    registerPartial: function(name, partial) {
      if (toString.call(name) === objectType) {
        Utils.extend(this.partials,  name);
      } else {
        this.partials[name] = partial;
      }
    },
    unregisterPartial: function(name) {
      delete this.partials[name];
    }
  };

  function registerDefaultHelpers(instance) {
    instance.registerHelper('helperMissing', function(/* [args, ]options */) {
      if(arguments.length === 1) {
        // A missing field in a {{foo}} constuct.
        return undefined;
      } else {
        // Someone is actually trying to call something, blow up.
        throw new Exception("Missing helper: '" + arguments[arguments.length-1].name + "'");
      }
    });

    instance.registerHelper('blockHelperMissing', function(context, options) {
      var inverse = options.inverse,
          fn = options.fn;

      if(context === true) {
        return fn(this);
      } else if(context === false || context == null) {
        return inverse(this);
      } else if (isArray(context)) {
        if(context.length > 0) {
          if (options.ids) {
            options.ids = [options.name];
          }

          return instance.helpers.each(context, options);
        } else {
          return inverse(this);
        }
      } else {
        if (options.data && options.ids) {
          var data = createFrame(options.data);
          data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
          options = {data: data};
        }

        return fn(context, options);
      }
    });

    instance.registerHelper('each', function(context, options) {
      if (!options) {
        throw new Exception('Must pass iterator to #each');
      }

      var fn = options.fn, inverse = options.inverse;
      var i = 0, ret = "", data;

      var contextPath;
      if (options.data && options.ids) {
        contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
      }

      if (isFunction(context)) { context = context.call(this); }

      if (options.data) {
        data = createFrame(options.data);
      }

      if(context && typeof context === 'object') {
        if (isArray(context)) {
          for(var j = context.length; i<j; i++) {
            if (data) {
              data.index = i;
              data.first = (i === 0);
              data.last  = (i === (context.length-1));

              if (contextPath) {
                data.contextPath = contextPath + i;
              }
            }
            ret = ret + fn(context[i], { data: data });
          }
        } else {
          for(var key in context) {
            if(context.hasOwnProperty(key)) {
              if(data) {
                data.key = key;
                data.index = i;
                data.first = (i === 0);

                if (contextPath) {
                  data.contextPath = contextPath + key;
                }
              }
              ret = ret + fn(context[key], {data: data});
              i++;
            }
          }
        }
      }

      if(i === 0){
        ret = inverse(this);
      }

      return ret;
    });

    instance.registerHelper('if', function(conditional, options) {
      if (isFunction(conditional)) { conditional = conditional.call(this); }

      // Default behavior is to render the positive path if the value is truthy and not empty.
      // The `includeZero` option may be set to treat the condtional as purely not empty based on the
      // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
      if ((!options.hash.includeZero && !conditional) || Utils.isEmpty(conditional)) {
        return options.inverse(this);
      } else {
        return options.fn(this);
      }
    });

    instance.registerHelper('unless', function(conditional, options) {
      return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});
    });

    instance.registerHelper('with', function(context, options) {
      if (isFunction(context)) { context = context.call(this); }

      var fn = options.fn;

      if (!Utils.isEmpty(context)) {
        if (options.data && options.ids) {
          var data = createFrame(options.data);
          data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
          options = {data:data};
        }

        return fn(context, options);
      } else {
        return options.inverse(this);
      }
    });

    instance.registerHelper('log', function(message, options) {
      var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
      instance.log(level, message);
    });

    instance.registerHelper('lookup', function(obj, field) {
      return obj && obj[field];
    });
  }

  var logger = {
    methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

    // State enum
    DEBUG: 0,
    INFO: 1,
    WARN: 2,
    ERROR: 3,
    level: 3,

    // can be overridden in the host environment
    log: function(level, message) {
      if (logger.level <= level) {
        var method = logger.methodMap[level];
        if (typeof console !== 'undefined' && console[method]) {
          console[method].call(console, message);
        }
      }
    }
  };
  __exports__.logger = logger;
  var log = logger.log;
  __exports__.log = log;
  var createFrame = function(object) {
    var frame = Utils.extend({}, object);
    frame._parent = object;
    return frame;
  };
  __exports__.createFrame = createFrame;
  return __exports__;
})(__module2__, __module4__);

// handlebars/runtime.js
var __module5__ = (function(__dependency1__, __dependency2__, __dependency3__) {
  "use strict";
  var __exports__ = {};
  var Utils = __dependency1__;
  var Exception = __dependency2__;
  var COMPILER_REVISION = __dependency3__.COMPILER_REVISION;
  var REVISION_CHANGES = __dependency3__.REVISION_CHANGES;
  var createFrame = __dependency3__.createFrame;

  function checkRevision(compilerInfo) {
    var compilerRevision = compilerInfo && compilerInfo[0] || 1,
        currentRevision = COMPILER_REVISION;

    if (compilerRevision !== currentRevision) {
      if (compilerRevision < currentRevision) {
        var runtimeVersions = REVISION_CHANGES[currentRevision],
            compilerVersions = REVISION_CHANGES[compilerRevision];
        throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. "+
              "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").");
      } else {
        // Use the embedded version info since the runtime doesn't know about this revision yet
        throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. "+
              "Please update your runtime to a newer version ("+compilerInfo[1]+").");
      }
    }
  }

  __exports__.checkRevision = checkRevision;// TODO: Remove this line and break up compilePartial

  function template(templateSpec, env) {
    /* istanbul ignore next */
    if (!env) {
      throw new Exception("No environment passed to template");
    }
    if (!templateSpec || !templateSpec.main) {
      throw new Exception('Unknown template object: ' + typeof templateSpec);
    }

    // Note: Using env.VM references rather than local var references throughout this section to allow
    // for external users to override these as psuedo-supported APIs.
    env.VM.checkRevision(templateSpec.compiler);

    var invokePartialWrapper = function(partial, indent, name, context, hash, helpers, partials, data, depths) {
      if (hash) {
        context = Utils.extend({}, context, hash);
      }

      var result = env.VM.invokePartial.call(this, partial, name, context, helpers, partials, data, depths);

      if (result == null && env.compile) {
        var options = { helpers: helpers, partials: partials, data: data, depths: depths };
        partials[name] = env.compile(partial, { data: data !== undefined, compat: templateSpec.compat }, env);
        result = partials[name](context, options);
      }
      if (result != null) {
        if (indent) {
          var lines = result.split('\n');
          for (var i = 0, l = lines.length; i < l; i++) {
            if (!lines[i] && i + 1 === l) {
              break;
            }

            lines[i] = indent + lines[i];
          }
          result = lines.join('\n');
        }
        return result;
      } else {
        throw new Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
      }
    };

    // Just add water
    var container = {
      lookup: function(depths, name) {
        var len = depths.length;
        for (var i = 0; i < len; i++) {
          if (depths[i] && depths[i][name] != null) {
            return depths[i][name];
          }
        }
      },
      lambda: function(current, context) {
        return typeof current === 'function' ? current.call(context) : current;
      },

      escapeExpression: Utils.escapeExpression,
      invokePartial: invokePartialWrapper,

      fn: function(i) {
        return templateSpec[i];
      },

      programs: [],
      program: function(i, data, depths) {
        var programWrapper = this.programs[i],
            fn = this.fn(i);
        if (data || depths) {
          programWrapper = program(this, i, fn, data, depths);
        } else if (!programWrapper) {
          programWrapper = this.programs[i] = program(this, i, fn);
        }
        return programWrapper;
      },

      data: function(data, depth) {
        while (data && depth--) {
          data = data._parent;
        }
        return data;
      },
      merge: function(param, common) {
        var ret = param || common;

        if (param && common && (param !== common)) {
          ret = Utils.extend({}, common, param);
        }

        return ret;
      },

      noop: env.VM.noop,
      compilerInfo: templateSpec.compiler
    };

    var ret = function(context, options) {
      options = options || {};
      var data = options.data;

      ret._setup(options);
      if (!options.partial && templateSpec.useData) {
        data = initData(context, data);
      }
      var depths;
      if (templateSpec.useDepths) {
        depths = options.depths ? [context].concat(options.depths) : [context];
      }

      return templateSpec.main.call(container, context, container.helpers, container.partials, data, depths);
    };
    ret.isTop = true;

    ret._setup = function(options) {
      if (!options.partial) {
        container.helpers = container.merge(options.helpers, env.helpers);

        if (templateSpec.usePartial) {
          container.partials = container.merge(options.partials, env.partials);
        }
      } else {
        container.helpers = options.helpers;
        container.partials = options.partials;
      }
    };

    ret._child = function(i, data, depths) {
      if (templateSpec.useDepths && !depths) {
        throw new Exception('must pass parent depths');
      }

      return program(container, i, templateSpec[i], data, depths);
    };
    return ret;
  }

  __exports__.template = template;function program(container, i, fn, data, depths) {
    var prog = function(context, options) {
      options = options || {};

      return fn.call(container, context, container.helpers, container.partials, options.data || data, depths && [context].concat(depths));
    };
    prog.program = i;
    prog.depth = depths ? depths.length : 0;
    return prog;
  }

  __exports__.program = program;function invokePartial(partial, name, context, helpers, partials, data, depths) {
    var options = { partial: true, helpers: helpers, partials: partials, data: data, depths: depths };

    if(partial === undefined) {
      throw new Exception("The partial " + name + " could not be found");
    } else if(partial instanceof Function) {
      return partial(context, options);
    }
  }

  __exports__.invokePartial = invokePartial;function noop() { return ""; }

  __exports__.noop = noop;function initData(context, data) {
    if (!data || !('root' in data)) {
      data = data ? createFrame(data) : {};
      data.root = context;
    }
    return data;
  }
  return __exports__;
})(__module2__, __module4__, __module1__);

// handlebars.runtime.js
var __module0__ = (function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {
  "use strict";
  var __exports__;
  /*globals Handlebars: true */
  var base = __dependency1__;

  // Each of these augment the Handlebars object. No need to setup here.
  // (This is done to easily share code between commonjs and browse envs)
  var SafeString = __dependency2__;
  var Exception = __dependency3__;
  var Utils = __dependency4__;
  var runtime = __dependency5__;

  // For compatibility and usage outside of module systems, make the Handlebars object a namespace
  var create = function() {
    var hb = new base.HandlebarsEnvironment();

    Utils.extend(hb, base);
    hb.SafeString = SafeString;
    hb.Exception = Exception;
    hb.Utils = Utils;
    hb.escapeExpression = Utils.escapeExpression;

    hb.VM = runtime;
    hb.template = function(spec) {
      return runtime.template(spec, hb);
    };

    return hb;
  };

  var Handlebars = create();
  Handlebars.create = create;

  Handlebars['default'] = Handlebars;

  __exports__ = Handlebars;
  return __exports__;
})(__module1__, __module3__, __module4__, __module2__, __module5__);

  return __module0__;
}));

this["Metro"] = this["Metro"] || {};
this["Metro"]["templates"] = this["Metro"]["templates"] || {};
this["Metro"]["templates"]["callout"] = Handlebars.template({"1":function(depth0,helpers,partials,data) {
  return " _single";
  },"3":function(depth0,helpers,partials,data) {
  var stack1, buffer = "        <div class=\"callout__crossing\">\n";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 != null ? depth0.callout : depth0)) != null ? stack1.crossing : stack1), {"name":"each","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  return buffer + "        </div>\n";
},"4":function(depth0,helpers,partials,data) {
  var stack1, helper, lambda=this.lambda, escapeExpression=this.escapeExpression, functionType="function", helperMissing=helpers.helperMissing, buffer = "                <input type=\"radio\" class=\"callout__crossing-radio\" id=\"station-"
    + escapeExpression(lambda((data && data.index), depth0))
    + "\" value=\""
    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))
    + "\"name=\"crossing\"";
  stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.checked : depth0), {"name":"if","hash":{},"fn":this.program(5, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  return buffer + ">\n                <label for=\"station-"
    + escapeExpression(lambda((data && data.index), depth0))
    + "\" class=\"callout__crossing-label\" style=\"border-color: #"
    + escapeExpression(((helper = (helper = helpers.color || (depth0 != null ? depth0.color : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"color","hash":{},"data":data}) : helper)))
    + ";\">\n                    "
    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))
    + "\n                </label>\n";
},"5":function(depth0,helpers,partials,data) {
  return " checked";
  },"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, buffer = "<div class=\"callout\">\n\n    <header class=\"callout__header\" style=\"border-color: #"
    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.callout : depth0)) != null ? stack1.color : stack1), depth0))
    + "\">\n<h2 class=\"callout__header-title";
  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 != null ? depth0.callout : depth0)) != null ? stack1.crossing : stack1), {"name":"unless","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  buffer += "\">\n            "
    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.callout : depth0)) != null ? stack1.title : stack1), depth0))
    + "\n        </h2>\n    </header>\n\n";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 != null ? depth0.callout : depth0)) != null ? stack1.crossing : stack1), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  return buffer + "\n    <div class=\"callout__main\">\n        <button class=\"callout__from\">Отсюда</button>\n        <button class=\"callout__to\">Сюда</button>\n    </div>\n\n</div>";
},"useData":true});
this["Metro"]["templates"]["scheme"] = Handlebars.template({"1":function(depth0,helpers,partials,data) {
  return " _widget";
  },"3":function(depth0,helpers,partials,data) {
  var stack1, buffer = "";
  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.scheme : depth0), {"name":"each","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  return buffer;
},"4":function(depth0,helpers,partials,data) {
  var stack1, helper, lambda=this.lambda, escapeExpression=this.escapeExpression, functionType="function", helperMissing=helpers.helperMissing, buffer = "                <div class=\"scheme__tabs-item";
  stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.current : depth0), {"name":"if","hash":{},"fn":this.program(5, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  return buffer + "\" data-rel=\""
    + escapeExpression(lambda((data && data.index), depth0))
    + "\">\n                    "
    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))
    + "\n                </div>\n";
},"5":function(depth0,helpers,partials,data) {
  return " _current";
  },"7":function(depth0,helpers,partials,data) {
  var stack1, helper, lambda=this.lambda, escapeExpression=this.escapeExpression, functionType="function", helperMissing=helpers.helperMissing, buffer = "            <div class=\"scheme__main-path";
  stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.current : depth0), {"name":"if","hash":{},"fn":this.program(5, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  buffer += "\" id=\"path-"
    + escapeExpression(lambda((data && data.index), depth0))
    + "\">\n\n                <div class=\"scheme__duration\">\n                    "
    + escapeExpression(((helper = (helper = helpers.duration || (depth0 != null ? depth0.duration : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"duration","hash":{},"data":data}) : helper)))
    + " мин.\n                </div>\n\n";
  stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.sections : depth0), {"name":"if","hash":{},"fn":this.program(8, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  return buffer + "\n            </div>\n";
},"8":function(depth0,helpers,partials,data) {
  var stack1, buffer = "                    <div class=\"scheme__scroller\">\n                        <ul class=\"scheme__list\">\n";
  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.sections : depth0), {"name":"each","hash":{},"fn":this.program(9, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  return buffer + "                        </ul>\n                    </div>\n";
},"9":function(depth0,helpers,partials,data) {
  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                                <li class=\"scheme__list-item";
  stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.modifier : depth0), {"name":"if","hash":{},"fn":this.program(10, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  buffer += "\" style=\"border-color: #"
    + escapeExpression(((helper = (helper = helpers.color || (depth0 != null ? depth0.color : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"color","hash":{},"data":data}) : helper)))
    + ";\">\n                                    <span class=\"scheme__list-item-station\">\n                                        "
    + escapeExpression(((helper = (helper = helpers.station || (depth0 != null ? depth0.station : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"station","hash":{},"data":data}) : helper)))
    + "\n                                    </span>\n                                    <span class=\"scheme__list-item-tip\">\n";
  stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.length : depth0), {"name":"if","hash":{},"fn":this.program(12, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  return buffer + "                                    </span>\n                                </li>\n";
},"10":function(depth0,helpers,partials,data) {
  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;
  return " _"
    + escapeExpression(((helper = (helper = helpers.modifier || (depth0 != null ? depth0.modifier : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"modifier","hash":{},"data":data}) : helper)));
},"12":function(depth0,helpers,partials,data) {
  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;
  return "                                            "
    + escapeExpression(((helper = (helper = helpers.length || (depth0 != null ? depth0.length : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"length","hash":{},"data":data}) : helper)))
    + " ст.\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
  var stack1, buffer = "<div class=\"scheme";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 != null ? depth0.scheme : depth0)) != null ? stack1.widget : stack1), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  buffer += "\">\n\n    <nav class=\"scheme__tabs\">\n";
  stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.tabs : depth0), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  buffer += "    </nav>\n\n    <div class=\"scheme__main\">\n";
  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.scheme : depth0), {"name":"each","hash":{},"fn":this.program(7, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  return buffer + "    </div>\n\n</div>";
},"useData":true});
this["Metro"]["templates"]["schemewidget"] = Handlebars.template({"1":function(depth0,helpers,partials,data) {
  var stack1, buffer = "                <ul class=\"schemewidget__list\">\n";
  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.sections : depth0), {"name":"each","hash":{},"fn":this.program(2, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  return buffer + "                </ul>\n";
},"2":function(depth0,helpers,partials,data) {
  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                        <li class=\"schemewidget__list-item";
  stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.modifier : depth0), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  buffer += "\" style=\"border-color: #"
    + escapeExpression(((helper = (helper = helpers.color || (depth0 != null ? depth0.color : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"color","hash":{},"data":data}) : helper)))
    + ";\">\n                            <span class=\"schemewidget__list-item-station\">\n                                "
    + escapeExpression(((helper = (helper = helpers.station || (depth0 != null ? depth0.station : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"station","hash":{},"data":data}) : helper)))
    + "\n                            </span>\n                            <span class=\"schemewidget__list-item-tip\">\n";
  stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.length : depth0), {"name":"if","hash":{},"fn":this.program(5, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  return buffer + "                            </span>\n                        </li>\n";
},"3":function(depth0,helpers,partials,data) {
  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;
  return " _"
    + escapeExpression(((helper = (helper = helpers.modifier || (depth0 != null ? depth0.modifier : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"modifier","hash":{},"data":data}) : helper)));
},"5":function(depth0,helpers,partials,data) {
  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;
  return "                                    "
    + escapeExpression(((helper = (helper = helpers.length || (depth0 != null ? depth0.length : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"length","hash":{},"data":data}) : helper)))
    + " ст.\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<div class=\"schemewidget\">\n\n    <div class=\"schemewidget__head\">\n        <div class=\"schemewidget__head-inner\">\n            <span class=\"schemewidget__head-time\">"
    + escapeExpression(((helper = (helper = helpers.duration || (depth0 != null ? depth0.duration : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"duration","hash":{},"data":data}) : helper)))
    + " мин</span>\n            <a href=\"/metro-map/"
    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))
    + "\" target=\"_blank\" class=\"schemewidget__head-btn\">На карте</a>\n        </div>\n    </div>\n\n    <div class=\"schemewidget__main\">\n        <div class=\"schemewidget__main-path\">\n\n";
  stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.sections : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  return buffer + "\n        </div>\n    </div>\n\n</div>";
},"useData":true});
/**
 * innerHTML property for SVGElement
 * Copyright(c) 2010, Jeff Schiller
 *
 * Licensed under the Apache License, Version 2
 *
 * Works in a SVG document in Chrome 6+, Safari 5+, Firefox 4+ and IE9+.
 * Works in a HTML5 document in Chrome 7+, Firefox 4+ and IE9+.
 * Does not work in Opera since it doesn't support the SVGElement interface yet.
 *
 * I haven't decided on the best name for this property - thus the duplication.
 */

(function() {
var serializeXML = function(node, output) {
  var nodeType = node.nodeType;
  if (nodeType == 3) { // TEXT nodes.
    // Replace special XML characters with their entities.
    output.push(node.textContent.replace(/&/, '&amp;').replace(/</, '&lt;').replace('>', '&gt;'));
  } else if (nodeType == 1) { // ELEMENT nodes.
    // Serialize Element nodes.
    output.push('<', node.tagName);
    if (node.hasAttributes()) {
      var attrMap = node.attributes;
      for (var i = 0, len = attrMap.length; i < len; ++i) {
        var attrNode = attrMap.item(i);
        output.push(' ', attrNode.name, '=\'', attrNode.value, '\'');
      }
    }
    if (node.hasChildNodes()) {
      output.push('>');
      var childNodes = node.childNodes;
      for (var i = 0, len = childNodes.length; i < len; ++i) {
        serializeXML(childNodes.item(i), output);
      }
      output.push('</', node.tagName, '>');
    } else {
      output.push('/>');
    }
  } else if (nodeType == 8) {
    // TODO(codedread): Replace special characters with XML entities?
    output.push('<!--', node.nodeValue, '-->');
  } else {
    // TODO: Handle CDATA nodes.
    // TODO: Handle ENTITY nodes.
    // TODO: Handle DOCUMENT nodes.
    throw 'Error serializing XML. Unhandled node of type: ' + nodeType;
  }
}
// The innerHTML DOM property for SVGElement.
Object.defineProperty(SVGElement.prototype, 'innerHTML', {
  get: function() {
    var output = [];
    var childNode = this.firstChild;
    while (childNode) {
      serializeXML(childNode, output);
      childNode = childNode.nextSibling;
    }
    return output.join('');
  },
  set: function(markupText) {
    // Wipe out the current contents of the element.
    while (this.firstChild) {
      this.removeChild(this.firstChild);
    }

    try {
      // Parse the markup into valid nodes.
      var dXML = new DOMParser();
      dXML.async = false;
      // Wrap the markup into a SVG node to ensure parsing works.
      sXML = '<svg xmlns=\'http://www.w3.org/2000/svg\'>' + markupText + '</svg>';
      var svgDocElement = dXML.parseFromString(sXML, 'text/xml').documentElement;

      // Now take each node, import it and append to this element.
      var childNode = svgDocElement.firstChild;
      while(childNode) {
        this.appendChild(this.ownerDocument.importNode(childNode, true));
        childNode = childNode.nextSibling;
      }
    } catch(e) {
      throw new Error('Error parsing XML string');
    };
  }
});

// The innerSVG DOM property for SVGElement.
Object.defineProperty(SVGElement.prototype, 'innerSVG', {
  get: function() {
    return this.innerHTML;
  },
  set: function(markupText) {
    this.innerHTML = markupText;
  }
});

})();

/** jQuery JavaScript Library PLACE*/

/*!
* jquery.inputmask.js
* http://github.com/RobinHerbots/jquery.inputmask
* Copyright (c) 2010 - 2015 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 3.1.63
*/
!function(factory) {
    "function" == typeof define && define.amd ? define([ "jquery" ], factory) : "object" == typeof exports ? module.exports = factory(require("jquery")) : factory(jQuery);
}(function($) {
    function isInputEventSupported(eventName) {
        var el = document.createElement("input"), evName = "on" + eventName, isSupported = evName in el;
        return isSupported || (el.setAttribute(evName, "return;"), isSupported = "function" == typeof el[evName]), 
        el = null, isSupported;
    }
    function isInputTypeSupported(inputType) {
        var isSupported = "text" == inputType || "tel" == inputType || "password" == inputType;
        if (!isSupported) {
            var el = document.createElement("input");
            el.setAttribute("type", inputType), isSupported = "text" === el.type, el = null;
        }
        return isSupported;
    }
    function resolveAlias(aliasStr, options, opts) {
        var aliasDefinition = opts.aliases[aliasStr];
        return aliasDefinition ? (aliasDefinition.alias && resolveAlias(aliasDefinition.alias, void 0, opts), 
        $.extend(!0, opts, aliasDefinition), $.extend(!0, opts, options), !0) : !1;
    }
    function generateMaskSet(opts, nocache) {
        function analyseMask(mask) {
            function maskToken(isGroup, isOptional, isQuantifier, isAlternator) {
                this.matches = [], this.isGroup = isGroup || !1, this.isOptional = isOptional || !1, 
                this.isQuantifier = isQuantifier || !1, this.isAlternator = isAlternator || !1, 
                this.quantifier = {
                    min: 1,
                    max: 1
                };
            }
            function insertTestDefinition(mtoken, element, position) {
                var maskdef = opts.definitions[element], newBlockMarker = 0 == mtoken.matches.length;
                if (position = void 0 != position ? position : mtoken.matches.length, maskdef && !escaped) {
                    maskdef.placeholder = $.isFunction(maskdef.placeholder) ? maskdef.placeholder.call(this, opts) : maskdef.placeholder;
                    for (var prevalidators = maskdef.prevalidator, prevalidatorsL = prevalidators ? prevalidators.length : 0, i = 1; i < maskdef.cardinality; i++) {
                        var prevalidator = prevalidatorsL >= i ? prevalidators[i - 1] : [], validator = prevalidator.validator, cardinality = prevalidator.cardinality;
                        mtoken.matches.splice(position++, 0, {
                            fn: validator ? "string" == typeof validator ? new RegExp(validator) : new function() {
                                this.test = validator;
                            }() : new RegExp("."),
                            cardinality: cardinality ? cardinality : 1,
                            optionality: mtoken.isOptional,
                            newBlockMarker: newBlockMarker,
                            casing: maskdef.casing,
                            def: maskdef.definitionSymbol || element,
                            placeholder: maskdef.placeholder,
                            mask: element
                        });
                    }
                    mtoken.matches.splice(position++, 0, {
                        fn: maskdef.validator ? "string" == typeof maskdef.validator ? new RegExp(maskdef.validator) : new function() {
                            this.test = maskdef.validator;
                        }() : new RegExp("."),
                        cardinality: maskdef.cardinality,
                        optionality: mtoken.isOptional,
                        newBlockMarker: newBlockMarker,
                        casing: maskdef.casing,
                        def: maskdef.definitionSymbol || element,
                        placeholder: maskdef.placeholder,
                        mask: element
                    });
                } else mtoken.matches.splice(position++, 0, {
                    fn: null,
                    cardinality: 0,
                    optionality: mtoken.isOptional,
                    newBlockMarker: newBlockMarker,
                    casing: null,
                    def: element,
                    placeholder: void 0,
                    mask: element
                }), escaped = !1;
            }
            for (var match, m, openingToken, currentOpeningToken, alternator, lastMatch, tokenizer = /(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})\??|[^.?*+^${[]()|\\]+|./g, escaped = !1, currentToken = new maskToken(), openenings = [], maskTokens = []; match = tokenizer.exec(mask); ) switch (m = match[0], 
            m.charAt(0)) {
              case opts.optionalmarker.end:
              case opts.groupmarker.end:
                if (openingToken = openenings.pop(), openenings.length > 0) {
                    if (currentOpeningToken = openenings[openenings.length - 1], currentOpeningToken.matches.push(openingToken), 
                    currentOpeningToken.isAlternator) {
                        alternator = openenings.pop();
                        for (var mndx = 0; mndx < alternator.matches.length; mndx++) alternator.matches[mndx].isGroup = !1;
                        openenings.length > 0 ? (currentOpeningToken = openenings[openenings.length - 1], 
                        currentOpeningToken.matches.push(alternator)) : currentToken.matches.push(alternator);
                    }
                } else currentToken.matches.push(openingToken);
                break;

              case opts.optionalmarker.start:
                openenings.push(new maskToken(!1, !0));
                break;

              case opts.groupmarker.start:
                openenings.push(new maskToken(!0));
                break;

              case opts.quantifiermarker.start:
                var quantifier = new maskToken(!1, !1, !0);
                m = m.replace(/[{}]/g, "");
                var mq = m.split(","), mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]), mq1 = 1 == mq.length ? mq0 : isNaN(mq[1]) ? mq[1] : parseInt(mq[1]);
                if (("*" == mq1 || "+" == mq1) && (mq0 = "*" == mq1 ? 0 : 1), quantifier.quantifier = {
                    min: mq0,
                    max: mq1
                }, openenings.length > 0) {
                    var matches = openenings[openenings.length - 1].matches;
                    if (match = matches.pop(), !match.isGroup) {
                        var groupToken = new maskToken(!0);
                        groupToken.matches.push(match), match = groupToken;
                    }
                    matches.push(match), matches.push(quantifier);
                } else {
                    if (match = currentToken.matches.pop(), !match.isGroup) {
                        var groupToken = new maskToken(!0);
                        groupToken.matches.push(match), match = groupToken;
                    }
                    currentToken.matches.push(match), currentToken.matches.push(quantifier);
                }
                break;

              case opts.escapeChar:
                escaped = !0;
                break;

              case opts.alternatormarker:
                openenings.length > 0 ? (currentOpeningToken = openenings[openenings.length - 1], 
                lastMatch = currentOpeningToken.matches.pop()) : lastMatch = currentToken.matches.pop(), 
                lastMatch.isAlternator ? openenings.push(lastMatch) : (alternator = new maskToken(!1, !1, !1, !0), 
                alternator.matches.push(lastMatch), openenings.push(alternator));
                break;

              default:
                if (openenings.length > 0) {
                    if (currentOpeningToken = openenings[openenings.length - 1], currentOpeningToken.matches.length > 0 && !currentOpeningToken.isAlternator && (lastMatch = currentOpeningToken.matches[currentOpeningToken.matches.length - 1], 
                    lastMatch.isGroup && (lastMatch.isGroup = !1, insertTestDefinition(lastMatch, opts.groupmarker.start, 0), 
                    insertTestDefinition(lastMatch, opts.groupmarker.end))), insertTestDefinition(currentOpeningToken, m), 
                    currentOpeningToken.isAlternator) {
                        alternator = openenings.pop();
                        for (var mndx = 0; mndx < alternator.matches.length; mndx++) alternator.matches[mndx].isGroup = !1;
                        openenings.length > 0 ? (currentOpeningToken = openenings[openenings.length - 1], 
                        currentOpeningToken.matches.push(alternator)) : currentToken.matches.push(alternator);
                    }
                } else currentToken.matches.length > 0 && (lastMatch = currentToken.matches[currentToken.matches.length - 1], 
                lastMatch.isGroup && (lastMatch.isGroup = !1, insertTestDefinition(lastMatch, opts.groupmarker.start, 0), 
                insertTestDefinition(lastMatch, opts.groupmarker.end))), insertTestDefinition(currentToken, m);
            }
            return currentToken.matches.length > 0 && (lastMatch = currentToken.matches[currentToken.matches.length - 1], 
            lastMatch.isGroup && (lastMatch.isGroup = !1, insertTestDefinition(lastMatch, opts.groupmarker.start, 0), 
            insertTestDefinition(lastMatch, opts.groupmarker.end)), maskTokens.push(currentToken)), 
            maskTokens;
        }
        function generateMask(mask, metadata) {
            if (void 0 == mask || "" == mask) return void 0;
            if (1 == mask.length && 0 == opts.greedy && 0 != opts.repeat && (opts.placeholder = ""), 
            opts.repeat > 0 || "*" == opts.repeat || "+" == opts.repeat) {
                var repeatStart = "*" == opts.repeat ? 0 : "+" == opts.repeat ? 1 : opts.repeat;
                mask = opts.groupmarker.start + mask + opts.groupmarker.end + opts.quantifiermarker.start + repeatStart + "," + opts.repeat + opts.quantifiermarker.end;
            }
            var masksetDefinition;
            return void 0 == $.inputmask.masksCache[mask] || nocache === !0 ? (masksetDefinition = {
                mask: mask,
                maskToken: analyseMask(mask),
                validPositions: {},
                _buffer: void 0,
                buffer: void 0,
                tests: {},
                metadata: metadata
            }, nocache !== !0 && ($.inputmask.masksCache[mask] = masksetDefinition)) : masksetDefinition = $.extend(!0, {}, $.inputmask.masksCache[mask]), 
            masksetDefinition;
        }
        function preProcessMask(mask) {
            if (mask = mask.toString(), opts.numericInput) {
                mask = mask.split("").reverse();
                for (var ndx = 0; ndx < mask.length; ndx++) mask[ndx] == opts.optionalmarker.start ? mask[ndx] = opts.optionalmarker.end : mask[ndx] == opts.optionalmarker.end ? mask[ndx] = opts.optionalmarker.start : mask[ndx] == opts.groupmarker.start ? mask[ndx] = opts.groupmarker.end : mask[ndx] == opts.groupmarker.end && (mask[ndx] = opts.groupmarker.start);
                mask = mask.join("");
            }
            return mask;
        }
        var ms = void 0;
        if ($.isFunction(opts.mask) && (opts.mask = opts.mask.call(this, opts)), $.isArray(opts.mask)) {
            if (opts.mask.length > 1) {
                opts.keepStatic = void 0 == opts.keepStatic ? !0 : opts.keepStatic;
                var altMask = "(";
                return $.each(opts.mask, function(ndx, msk) {
                    altMask.length > 1 && (altMask += ")|("), altMask += preProcessMask(void 0 == msk.mask || $.isFunction(msk.mask) ? msk : msk.mask);
                }), altMask += ")", generateMask(altMask, opts.mask);
            }
            opts.mask = opts.mask.pop();
        }
        return opts.mask && (ms = void 0 == opts.mask.mask || $.isFunction(opts.mask.mask) ? generateMask(preProcessMask(opts.mask), opts.mask) : generateMask(preProcessMask(opts.mask.mask), opts.mask)), 
        ms;
    }
    function maskScope(actionObj, maskset, opts) {
        function getMaskTemplate(baseOnInput, minimalPos, includeInput) {
            minimalPos = minimalPos || 0;
            var ndxIntlzr, test, testPos, maskTemplate = [], pos = 0;
            do {
                if (baseOnInput === !0 && getMaskSet().validPositions[pos]) {
                    var validPos = getMaskSet().validPositions[pos];
                    test = validPos.match, ndxIntlzr = validPos.locator.slice(), maskTemplate.push(includeInput === !0 ? validPos.input : getPlaceholder(pos, test));
                } else testPos = getTestTemplate(pos, ndxIntlzr, pos - 1), test = testPos.match, 
                ndxIntlzr = testPos.locator.slice(), maskTemplate.push(getPlaceholder(pos, test));
                pos++;
            } while ((void 0 == maxLength || maxLength > pos - 1) && null != test.fn || null == test.fn && "" != test.def || minimalPos >= pos);
            return maskTemplate.pop(), maskTemplate;
        }
        function getMaskSet() {
            return maskset;
        }
        function resetMaskSet(soft) {
            var maskset = getMaskSet();
            maskset.buffer = void 0, maskset.tests = {}, soft !== !0 && (maskset._buffer = void 0, 
            maskset.validPositions = {}, maskset.p = 0);
        }
        function getLastValidPosition(closestTo, strict) {
            var maskset = getMaskSet(), lastValidPosition = -1, valids = maskset.validPositions;
            void 0 == closestTo && (closestTo = -1);
            var before = lastValidPosition, after = lastValidPosition;
            for (var posNdx in valids) {
                var psNdx = parseInt(posNdx);
                valids[psNdx] && (strict || null != valids[psNdx].match.fn) && (closestTo >= psNdx && (before = psNdx), 
                psNdx >= closestTo && (after = psNdx));
            }
            return lastValidPosition = -1 != before && closestTo - before > 1 || closestTo > after ? before : after;
        }
        function setValidPosition(pos, validTest, fromSetValid) {
            if (opts.insertMode && void 0 != getMaskSet().validPositions[pos] && void 0 == fromSetValid) {
                var i, positionsClone = $.extend(!0, {}, getMaskSet().validPositions), lvp = getLastValidPosition();
                for (i = pos; lvp >= i; i++) delete getMaskSet().validPositions[i];
                getMaskSet().validPositions[pos] = validTest;
                var j, valid = !0, vps = getMaskSet().validPositions;
                for (i = j = pos; lvp >= i; i++) {
                    var t = positionsClone[i];
                    if (void 0 != t) for (var posMatch = j, prevPosMatch = -1; posMatch < getMaskLength() && (null == t.match.fn && vps[i] && (vps[i].match.optionalQuantifier === !0 || vps[i].match.optionality === !0) || null != t.match.fn); ) {
                        if (null == t.match.fn || !opts.keepStatic && vps[i] && (void 0 != vps[i + 1] && getTests(i + 1, vps[i].locator.slice(), i).length > 1 || void 0 != vps[i].alternation) ? posMatch++ : posMatch = seekNext(j), 
                        positionCanMatchDefinition(posMatch, t.match.def)) {
                            valid = isValid(posMatch, t.input, !0, !0) !== !1, j = posMatch;
                            break;
                        }
                        if (valid = null == t.match.fn, prevPosMatch == posMatch) break;
                        prevPosMatch = posMatch;
                    }
                    if (!valid) break;
                }
                if (!valid) return getMaskSet().validPositions = $.extend(!0, {}, positionsClone), 
                !1;
            } else getMaskSet().validPositions[pos] = validTest;
            return !0;
        }
        function stripValidPositions(start, end, nocheck, strict) {
            var i, startPos = start;
            getMaskSet().p = start, void 0 != getMaskSet().validPositions[start] && getMaskSet().validPositions[start].input == opts.radixPoint && (end++, 
            startPos++);
            for (i = startPos; end > i; i++) void 0 != getMaskSet().validPositions[i] && (nocheck === !0 || 0 != opts.canClearPosition(getMaskSet(), i, getLastValidPosition(), strict, opts)) && delete getMaskSet().validPositions[i];
            for (resetMaskSet(!0), i = startPos + 1; i <= getLastValidPosition(); ) {
                for (;void 0 != getMaskSet().validPositions[startPos]; ) startPos++;
                var s = getMaskSet().validPositions[startPos];
                startPos > i && (i = startPos + 1);
                var t = getMaskSet().validPositions[i];
                void 0 != t && void 0 == s ? (positionCanMatchDefinition(startPos, t.match.def) && isValid(startPos, t.input, !0) !== !1 && (delete getMaskSet().validPositions[i], 
                i++), startPos++) : i++;
            }
            var lvp = getLastValidPosition(), ml = getMaskLength();
            for (lvp >= start && void 0 != getMaskSet().validPositions[lvp] && getMaskSet().validPositions[lvp].input == opts.radixPoint && delete getMaskSet().validPositions[lvp], 
            i = lvp + 1; ml >= i; i++) getMaskSet().validPositions[i] && delete getMaskSet().validPositions[i];
            resetMaskSet(!0);
        }
        function getTestTemplate(pos, ndxIntlzr, tstPs) {
            var testPos = getMaskSet().validPositions[pos];
            if (void 0 == testPos) for (var testPositions = getTests(pos, ndxIntlzr, tstPs), lvp = getLastValidPosition(), lvTest = getMaskSet().validPositions[lvp] || getTests(0)[0], lvTestAltArr = void 0 != lvTest.alternation ? lvTest.locator[lvTest.alternation].toString().split(",") : [], ndx = 0; ndx < testPositions.length && (testPos = testPositions[ndx], 
            !(testPos.match && (opts.greedy && testPos.match.optionalQuantifier !== !0 || (testPos.match.optionality === !1 || testPos.match.newBlockMarker === !1) && testPos.match.optionalQuantifier !== !0) && (void 0 == lvTest.alternation || lvTest.alternation != testPos.alternation || void 0 != testPos.locator[lvTest.alternation] && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","), lvTestAltArr)))); ndx++) ;
            return testPos;
        }
        function getTest(pos) {
            return getMaskSet().validPositions[pos] ? getMaskSet().validPositions[pos].match : getTests(pos)[0].match;
        }
        function positionCanMatchDefinition(pos, def) {
            for (var valid = !1, tests = getTests(pos), tndx = 0; tndx < tests.length; tndx++) if (tests[tndx].match && tests[tndx].match.def == def) {
                valid = !0;
                break;
            }
            return valid;
        }
        function getTests(pos, ndxIntlzr, tstPs, cacheable) {
            function ResolveTestFromToken(maskToken, ndxInitializer, loopNdx, quantifierRecurse) {
                function handleMatch(match, loopNdx, quantifierRecurse) {
                    if (testPos > 1e4) return alert("jquery.inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. " + getMaskSet().mask), 
                    !0;
                    if (testPos == pos && void 0 == match.matches) return matches.push({
                        match: match,
                        locator: loopNdx.reverse()
                    }), !0;
                    if (void 0 != match.matches) {
                        if (match.isGroup && quantifierRecurse !== !0) {
                            if (match = handleMatch(maskToken.matches[tndx + 1], loopNdx)) return !0;
                        } else if (match.isOptional) {
                            var optionalToken = match;
                            if (match = ResolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse)) {
                                var latestMatch = matches[matches.length - 1].match, isFirstMatch = 0 == $.inArray(latestMatch, optionalToken.matches);
                                if (!isFirstMatch) return !0;
                                insertStop = !0, testPos = pos;
                            }
                        } else if (match.isAlternator) {
                            var maltMatches, alternateToken = match, malternateMatches = [], currentMatches = matches.slice(), loopNdxCnt = loopNdx.length, altIndex = ndxInitializer.length > 0 ? ndxInitializer.shift() : -1;
                            if (-1 == altIndex || "string" == typeof altIndex) {
                                var currentPos = testPos, ndxInitializerClone = ndxInitializer.slice(), altIndexArr = [];
                                "string" == typeof altIndex && (altIndexArr = altIndex.split(","));
                                for (var amndx = 0; amndx < alternateToken.matches.length; amndx++) {
                                    if (matches = [], match = handleMatch(alternateToken.matches[amndx], [ amndx ].concat(loopNdx), quantifierRecurse) || match, 
                                    match !== !0 && void 0 != match && altIndexArr[altIndexArr.length - 1] < alternateToken.matches.length) {
                                        var ntndx = maskToken.matches.indexOf(match) + 1;
                                        maskToken.matches.length > ntndx && (match = handleMatch(maskToken.matches[ntndx], [ ntndx ].concat(loopNdx.slice(1, loopNdx.length)), quantifierRecurse), 
                                        match && (altIndexArr.push(ntndx.toString()), $.each(matches, function(ndx, lmnt) {
                                            lmnt.alternation = loopNdx.length - 1;
                                        })));
                                    }
                                    maltMatches = matches.slice(), testPos = currentPos, matches = [];
                                    for (var i = 0; i < ndxInitializerClone.length; i++) ndxInitializer[i] = ndxInitializerClone[i];
                                    for (var ndx1 = 0; ndx1 < maltMatches.length; ndx1++) {
                                        var altMatch = maltMatches[ndx1];
                                        altMatch.alternation = altMatch.alternation || loopNdxCnt;
                                        for (var ndx2 = 0; ndx2 < malternateMatches.length; ndx2++) {
                                            var altMatch2 = malternateMatches[ndx2];
                                            if (altMatch.match.mask == altMatch2.match.mask && ("string" != typeof altIndex || -1 != $.inArray(altMatch.locator[altMatch.alternation].toString(), altIndexArr))) {
                                                maltMatches.splice(ndx1, 1), ndx1--, altMatch2.locator[altMatch.alternation] = altMatch2.locator[altMatch.alternation] + "," + altMatch.locator[altMatch.alternation], 
                                                altMatch2.alternation = altMatch.alternation;
                                                break;
                                            }
                                        }
                                    }
                                    malternateMatches = malternateMatches.concat(maltMatches);
                                }
                                "string" == typeof altIndex && (malternateMatches = $.map(malternateMatches, function(lmnt, ndx) {
                                    if (isFinite(ndx)) {
                                        var mamatch, alternation = lmnt.alternation, altLocArr = lmnt.locator[alternation].toString().split(",");
                                        lmnt.locator[alternation] = void 0, lmnt.alternation = void 0;
                                        for (var alndx = 0; alndx < altLocArr.length; alndx++) mamatch = -1 != $.inArray(altLocArr[alndx], altIndexArr), 
                                        mamatch && (void 0 != lmnt.locator[alternation] ? (lmnt.locator[alternation] += ",", 
                                        lmnt.locator[alternation] += altLocArr[alndx]) : lmnt.locator[alternation] = parseInt(altLocArr[alndx]), 
                                        lmnt.alternation = alternation);
                                        if (void 0 != lmnt.locator[alternation]) return lmnt;
                                    }
                                })), matches = currentMatches.concat(malternateMatches), testPos = pos, insertStop = matches.length > 0;
                            } else match = alternateToken.matches[altIndex] ? handleMatch(alternateToken.matches[altIndex], [ altIndex ].concat(loopNdx), quantifierRecurse) : !1;
                            if (match) return !0;
                        } else if (match.isQuantifier && quantifierRecurse !== !0) for (var qt = match, qndx = ndxInitializer.length > 0 && quantifierRecurse !== !0 ? ndxInitializer.shift() : 0; qndx < (isNaN(qt.quantifier.max) ? qndx + 1 : qt.quantifier.max) && pos >= testPos; qndx++) {
                            var tokenGroup = maskToken.matches[$.inArray(qt, maskToken.matches) - 1];
                            if (match = handleMatch(tokenGroup, [ qndx ].concat(loopNdx), !0)) {
                                var latestMatch = matches[matches.length - 1].match;
                                latestMatch.optionalQuantifier = qndx > qt.quantifier.min - 1;
                                var isFirstMatch = 0 == $.inArray(latestMatch, tokenGroup.matches);
                                if (isFirstMatch) {
                                    if (qndx > qt.quantifier.min - 1) {
                                        insertStop = !0, testPos = pos;
                                        break;
                                    }
                                    return !0;
                                }
                                return !0;
                            }
                        } else if (match = ResolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse)) return !0;
                    } else testPos++;
                }
                for (var tndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; tndx < maskToken.matches.length; tndx++) if (maskToken.matches[tndx].isQuantifier !== !0) {
                    var match = handleMatch(maskToken.matches[tndx], [ tndx ].concat(loopNdx), quantifierRecurse);
                    if (match && testPos == pos) return match;
                    if (testPos > pos) break;
                }
            }
            var maskTokens = getMaskSet().maskToken, testPos = ndxIntlzr ? tstPs : 0, ndxInitializer = ndxIntlzr || [ 0 ], matches = [], insertStop = !1;
            if (cacheable === !0 && getMaskSet().tests[pos]) return getMaskSet().tests[pos];
            if (void 0 == ndxIntlzr) {
                for (var test, previousPos = pos - 1; void 0 == (test = getMaskSet().validPositions[previousPos]) && previousPos > -1 && (!getMaskSet().tests[previousPos] || void 0 == (test = getMaskSet().tests[previousPos][0])); ) previousPos--;
                void 0 != test && previousPos > -1 && (testPos = previousPos, ndxInitializer = test.locator.slice());
            }
            for (var mtndx = ndxInitializer.shift(); mtndx < maskTokens.length; mtndx++) {
                var match = ResolveTestFromToken(maskTokens[mtndx], ndxInitializer, [ mtndx ]);
                if (match && testPos == pos || testPos > pos) break;
            }
            return (0 == matches.length || insertStop) && matches.push({
                match: {
                    fn: null,
                    cardinality: 0,
                    optionality: !0,
                    casing: null,
                    def: ""
                },
                locator: []
            }), getMaskSet().tests[pos] = $.extend(!0, [], matches), getMaskSet().tests[pos];
        }
        function getBufferTemplate() {
            return void 0 == getMaskSet()._buffer && (getMaskSet()._buffer = getMaskTemplate(!1, 1)), 
            getMaskSet()._buffer;
        }
        function getBuffer() {
            return void 0 == getMaskSet().buffer && (getMaskSet().buffer = getMaskTemplate(!0, getLastValidPosition(), !0)), 
            getMaskSet().buffer;
        }
        function refreshFromBuffer(start, end, buffer) {
            if (buffer = buffer || getBuffer().slice(), start === !0) resetMaskSet(), start = 0, 
            end = buffer.length; else for (var i = start; end > i; i++) delete getMaskSet().validPositions[i], 
            delete getMaskSet().tests[i];
            for (var i = start; end > i; i++) buffer[i] != opts.skipOptionalPartCharacter && isValid(i, buffer[i], !0, !0);
        }
        function casing(elem, test) {
            switch (test.casing) {
              case "upper":
                elem = elem.toUpperCase();
                break;

              case "lower":
                elem = elem.toLowerCase();
            }
            return elem;
        }
        function checkAlternationMatch(altArr1, altArr2) {
            for (var altArrC = opts.greedy ? altArr2 : altArr2.slice(0, 1), isMatch = !1, alndx = 0; alndx < altArr1.length; alndx++) if (-1 != $.inArray(altArr1[alndx], altArrC)) {
                isMatch = !0;
                break;
            }
            return isMatch;
        }
        function isValid(pos, c, strict, fromSetValid) {
            function _isValid(position, c, strict, fromSetValid) {
                var rslt = !1;
                return $.each(getTests(position), function(ndx, tst) {
                    for (var test = tst.match, loopend = c ? 1 : 0, chrs = "", i = (getBuffer(), test.cardinality); i > loopend; i--) chrs += getBufferElement(position - (i - 1));
                    if (c && (chrs += c), rslt = null != test.fn ? test.fn.test(chrs, getMaskSet(), position, strict, opts) : c != test.def && c != opts.skipOptionalPartCharacter || "" == test.def ? !1 : {
                        c: test.def,
                        pos: position
                    }, rslt !== !1) {
                        var elem = void 0 != rslt.c ? rslt.c : c;
                        elem = elem == opts.skipOptionalPartCharacter && null === test.fn ? test.def : elem;
                        var validatedPos = position, possibleModifiedBuffer = getBuffer();
                        if (void 0 != rslt.remove && ($.isArray(rslt.remove) || (rslt.remove = [ rslt.remove ]), 
                        $.each(rslt.remove.sort(function(a, b) {
                            return b - a;
                        }), function(ndx, lmnt) {
                            stripValidPositions(lmnt, lmnt + 1, !0);
                        })), void 0 != rslt.insert && ($.isArray(rslt.insert) || (rslt.insert = [ rslt.insert ]), 
                        $.each(rslt.insert.sort(function(a, b) {
                            return a - b;
                        }), function(ndx, lmnt) {
                            isValid(lmnt.pos, lmnt.c, !0);
                        })), rslt.refreshFromBuffer) {
                            var refresh = rslt.refreshFromBuffer;
                            if (strict = !0, refreshFromBuffer(refresh === !0 ? refresh : refresh.start, refresh.end, possibleModifiedBuffer), 
                            void 0 == rslt.pos && void 0 == rslt.c) return rslt.pos = getLastValidPosition(), 
                            !1;
                            if (validatedPos = void 0 != rslt.pos ? rslt.pos : position, validatedPos != position) return rslt = $.extend(rslt, isValid(validatedPos, elem, !0)), 
                            !1;
                        } else if (rslt !== !0 && void 0 != rslt.pos && rslt.pos != position && (validatedPos = rslt.pos, 
                        refreshFromBuffer(position, validatedPos), validatedPos != position)) return rslt = $.extend(rslt, isValid(validatedPos, elem, !0)), 
                        !1;
                        return 1 != rslt && void 0 == rslt.pos && void 0 == rslt.c ? !1 : (ndx > 0 && resetMaskSet(!0), 
                        setValidPosition(validatedPos, $.extend({}, tst, {
                            input: casing(elem, test)
                        }), fromSetValid) || (rslt = !1), !1);
                    }
                }), rslt;
            }
            function alternate(pos, c, strict, fromSetValid) {
                for (var lastAlt, alternation, isValidRslt, altPos, validPsClone = $.extend(!0, {}, getMaskSet().validPositions), lAlt = getLastValidPosition(); lAlt >= 0 && (altPos = getMaskSet().validPositions[lAlt], 
                !altPos || void 0 == altPos.alternation || (lastAlt = lAlt, alternation = getMaskSet().validPositions[lastAlt].alternation, 
                getTestTemplate(lastAlt).locator[altPos.alternation] == altPos.locator[altPos.alternation])); lAlt--) ;
                if (void 0 != alternation) for (var decisionPos in getMaskSet().validPositions) if (altPos = getMaskSet().validPositions[decisionPos], 
                parseInt(decisionPos) > parseInt(lastAlt) && void 0 != altPos.alternation) {
                    var altNdxs = getMaskSet().validPositions[lastAlt].locator[alternation].toString().split(","), decisionTaker = altPos.locator[alternation] || altNdxs[0];
                    decisionTaker.length > 0 && (decisionTaker = decisionTaker.split(",")[0]);
                    for (var mndx = 0; mndx < altNdxs.length; mndx++) if (decisionTaker < altNdxs[mndx]) {
                        for (var possibilityPos, possibilities, dp = decisionPos - 1; dp >= 0; dp--) if (possibilityPos = getMaskSet().validPositions[dp], 
                        void 0 != possibilityPos) {
                            possibilities = possibilityPos.locator[alternation], possibilityPos.locator[alternation] = parseInt(altNdxs[mndx]);
                            break;
                        }
                        if (decisionTaker != possibilityPos.locator[alternation]) {
                            for (var validInputs = [], i = decisionPos; i < getLastValidPosition() + 1; i++) {
                                var validPos = getMaskSet().validPositions[i];
                                validPos && null != validPos.match.fn && validInputs.push(validPos.input), delete getMaskSet().validPositions[i], 
                                delete getMaskSet().tests[i];
                            }
                            for (resetMaskSet(!0), opts.keepStatic = !opts.keepStatic, isValidRslt = !0; validInputs.length > 0; ) {
                                var input = validInputs.shift();
                                if (input != opts.skipOptionalPartCharacter && !(isValidRslt = isValid(getLastValidPosition() + 1, input, !1, !0))) break;
                            }
                            if (possibilityPos.alternation = alternation, possibilityPos.locator[alternation] = possibilities, 
                            isValidRslt) {
                                var targetLvp = getLastValidPosition(pos) + 1;
                                isValidRslt = isValid(pos > targetLvp ? targetLvp : pos, c, strict, fromSetValid);
                            }
                            if (opts.keepStatic = !opts.keepStatic, isValidRslt) return isValidRslt;
                            resetMaskSet(), getMaskSet().validPositions = $.extend(!0, {}, validPsClone);
                        }
                    }
                    break;
                }
                return !1;
            }
            function trackbackAlternations(originalPos, newPos) {
                for (var vp = getMaskSet().validPositions[newPos], targetLocator = vp.locator, tll = targetLocator.length, ps = originalPos; newPos > ps; ps++) if (!isMask(ps)) {
                    var tests = getTests(ps), bestMatch = tests[0], equality = -1;
                    $.each(tests, function(ndx, tst) {
                        for (var i = 0; tll > i; i++) tst.locator[i] && checkAlternationMatch(tst.locator[i].toString().split(","), targetLocator[i].toString().split(",")) && i > equality && (equality = i, 
                        bestMatch = tst);
                    }), setValidPosition(ps, $.extend({}, bestMatch, {
                        input: bestMatch.match.def
                    }), !0);
                }
            }
            strict = strict === !0;
            for (var buffer = getBuffer(), pndx = pos - 1; pndx > -1 && !getMaskSet().validPositions[pndx]; pndx--) ;
            for (pndx++; pos > pndx; pndx++) void 0 == getMaskSet().validPositions[pndx] && ((!isMask(pndx) || buffer[pndx] != getPlaceholder(pndx)) && getTests(pndx).length > 1 || buffer[pndx] == opts.radixPoint || "0" == buffer[pndx] && $.inArray(opts.radixPoint, buffer) < pndx) && _isValid(pndx, buffer[pndx], !0);
            var maskPos = pos, result = !1, positionsClone = $.extend(!0, {}, getMaskSet().validPositions);
            if (maskPos < getMaskLength() && (result = _isValid(maskPos, c, strict, fromSetValid), 
            (!strict || fromSetValid) && result === !1)) {
                var currentPosValid = getMaskSet().validPositions[maskPos];
                if (!currentPosValid || null != currentPosValid.match.fn || currentPosValid.match.def != c && c != opts.skipOptionalPartCharacter) {
                    if ((opts.insertMode || void 0 == getMaskSet().validPositions[seekNext(maskPos)]) && !isMask(maskPos)) for (var nPos = maskPos + 1, snPos = seekNext(maskPos); snPos >= nPos; nPos++) if (result = _isValid(nPos, c, strict, fromSetValid), 
                    result !== !1) {
                        trackbackAlternations(maskPos, nPos), maskPos = nPos;
                        break;
                    }
                } else result = {
                    caret: seekNext(maskPos)
                };
            }
            if (result === !1 && opts.keepStatic && isComplete(buffer) && (result = alternate(pos, c, strict, fromSetValid)), 
            result === !0 && (result = {
                pos: maskPos
            }), $.isFunction(opts.postValidation) && 0 != result && !strict) {
                resetMaskSet(!0);
                var postValidResult = opts.postValidation(getBuffer(), opts);
                if (!postValidResult) return resetMaskSet(!0), getMaskSet().validPositions = $.extend(!0, {}, positionsClone), 
                !1;
            }
            return result;
        }
        function isMask(pos) {
            var test = getTest(pos);
            if (null != test.fn) return test.fn;
            if (!opts.keepStatic && void 0 == getMaskSet().validPositions[pos]) {
                for (var tests = getTests(pos), staticAlternations = !0, i = 0; i < tests.length; i++) if ("" != tests[i].match.def && (void 0 == tests[i].alternation || tests[i].locator[tests[i].alternation].length > 1)) {
                    staticAlternations = !1;
                    break;
                }
                return staticAlternations;
            }
            return !1;
        }
        function getMaskLength() {
            var maskLength;
            maxLength = $el.prop("maxLength"), -1 == maxLength && (maxLength = void 0);
            var pos, lvp = getLastValidPosition(), testPos = getMaskSet().validPositions[lvp], ndxIntlzr = void 0 != testPos ? testPos.locator.slice() : void 0;
            for (pos = lvp + 1; void 0 == testPos || null != testPos.match.fn || null == testPos.match.fn && "" != testPos.match.def; pos++) testPos = getTestTemplate(pos, ndxIntlzr, pos - 1), 
            ndxIntlzr = testPos.locator.slice();
            var lastTest = getTest(pos - 1);
            return maskLength = "" != lastTest.def ? pos : pos - 1, void 0 == maxLength || maxLength > maskLength ? maskLength : maxLength;
        }
        function seekNext(pos) {
            var maskL = getMaskLength();
            if (pos >= maskL) return maskL;
            for (var position = pos; ++position < maskL && !isMask(position) && (opts.nojumps !== !0 || opts.nojumpsThreshold > position); ) ;
            return position;
        }
        function seekPrevious(pos) {
            var position = pos;
            if (0 >= position) return 0;
            for (;--position > 0 && !isMask(position); ) ;
            return position;
        }
        function getBufferElement(position) {
            return void 0 == getMaskSet().validPositions[position] ? getPlaceholder(position) : getMaskSet().validPositions[position].input;
        }
        function writeBuffer(input, buffer, caretPos, event, triggerInputEvent) {
            if (event && $.isFunction(opts.onBeforeWrite)) {
                var result = opts.onBeforeWrite.call(input, event, buffer, caretPos, opts);
                if (result) {
                    if (result.refreshFromBuffer) {
                        var refresh = result.refreshFromBuffer;
                        refreshFromBuffer(refresh === !0 ? refresh : refresh.start, refresh.end, result.buffer), 
                        resetMaskSet(!0), buffer = getBuffer();
                    }
                    caretPos = result.caret || caretPos;
                }
            }
            input._valueSet(buffer.join("")), void 0 != caretPos && caret(input, caretPos), 
            triggerInputEvent === !0 && (skipInputEvent = !0, $(input).trigger("input"));
        }
        function getPlaceholder(pos, test) {
            if (test = test || getTest(pos), void 0 != test.placeholder) return test.placeholder;
            if (null == test.fn) {
                if (!opts.keepStatic && void 0 == getMaskSet().validPositions[pos]) {
                    for (var tests = getTests(pos), staticAlternations = !0, i = 0; i < tests.length; i++) if ("" != tests[i].match.def && (null !== tests[i].match.fn || void 0 == tests[i].alternation || tests[i].locator[tests[i].alternation].length > 1)) {
                        staticAlternations = !1;
                        break;
                    }
                    if (staticAlternations) return opts.placeholder.charAt(pos % opts.placeholder.length);
                }
                return test.def;
            }
            return opts.placeholder.charAt(pos % opts.placeholder.length);
        }
        function checkVal(input, writeOut, strict, nptvl) {
            function isTemplateMatch() {
                var isMatch = !1, charCodeNdx = getBufferTemplate().slice(initialNdx, seekNext(initialNdx)).join("").indexOf(charCodes);
                if (-1 != charCodeNdx && !isMask(initialNdx)) {
                    isMatch = !0;
                    for (var bufferTemplateArr = getBufferTemplate().slice(initialNdx, initialNdx + charCodeNdx), i = 0; i < bufferTemplateArr.length; i++) if (" " != bufferTemplateArr[i]) {
                        isMatch = !1;
                        break;
                    }
                }
                return isMatch;
            }
            var inputValue = void 0 != nptvl ? nptvl.slice() : input._valueGet().split(""), charCodes = "", initialNdx = 0;
            if (resetMaskSet(), getMaskSet().p = seekNext(-1), writeOut && input._valueSet(""), 
            !strict) {
                var staticInput = getBufferTemplate().slice(0, seekNext(-1)).join(""), matches = inputValue.join("").match(new RegExp("^" + escapeRegex(staticInput), "g"));
                matches && matches.length > 0 && (inputValue.splice(0, matches.length * staticInput.length), 
                initialNdx = seekNext(initialNdx));
            }
            $.each(inputValue, function(ndx, charCode) {
                var keypress = $.Event("keypress");
                keypress.which = charCode.charCodeAt(0), charCodes += charCode;
                var lvp = getLastValidPosition(void 0, !0), lvTest = getMaskSet().validPositions[lvp], nextTest = getTestTemplate(lvp + 1, lvTest ? lvTest.locator.slice() : void 0, lvp);
                if (!isTemplateMatch() || strict) {
                    var pos = strict ? ndx : null == nextTest.match.fn && nextTest.match.optionality && lvp + 1 < getMaskSet().p ? lvp + 1 : getMaskSet().p;
                    keypressEvent.call(input, keypress, !0, !1, strict, pos), initialNdx = pos + 1, 
                    charCodes = "";
                } else keypressEvent.call(input, keypress, !0, !1, !0, lvp + 1);
            }), writeOut && writeBuffer(input, getBuffer(), $(input).is(":focus") ? seekNext(getLastValidPosition(0)) : void 0, $.Event("checkval"));
        }
        function escapeRegex(str) {
            return $.inputmask.escapeRegex(str);
        }
        function unmaskedvalue($input) {
            if ($input.data("_inputmask") && !$input.hasClass("hasDatepicker")) {
                var umValue = [], vps = getMaskSet().validPositions;
                for (var pndx in vps) vps[pndx].match && null != vps[pndx].match.fn && umValue.push(vps[pndx].input);
                var unmaskedValue = (isRTL ? umValue.reverse() : umValue).join(""), bufferValue = (isRTL ? getBuffer().slice().reverse() : getBuffer()).join("");
                return $.isFunction(opts.onUnMask) && (unmaskedValue = opts.onUnMask.call($input, bufferValue, unmaskedValue, opts) || unmaskedValue), 
                unmaskedValue;
            }
            return $input[0]._valueGet();
        }
        function TranslatePosition(pos) {
            if (isRTL && "number" == typeof pos && (!opts.greedy || "" != opts.placeholder)) {
                var bffrLght = getBuffer().length;
                pos = bffrLght - pos;
            }
            return pos;
        }
        function caret(input, begin, end) {
            var range, npt = input.jquery && input.length > 0 ? input[0] : input;
            if ("number" != typeof begin) return npt.setSelectionRange ? (begin = npt.selectionStart, 
            end = npt.selectionEnd) : window.getSelection ? (range = window.getSelection().getRangeAt(0), 
            (range.commonAncestorContainer.parentNode == npt || range.commonAncestorContainer == npt) && (begin = range.startOffset, 
            end = range.endOffset)) : document.selection && document.selection.createRange && (range = document.selection.createRange(), 
            begin = 0 - range.duplicate().moveStart("character", -1e5), end = begin + range.text.length), 
            {
                begin: TranslatePosition(begin),
                end: TranslatePosition(end)
            };
            if (begin = TranslatePosition(begin), end = TranslatePosition(end), end = "number" == typeof end ? end : begin, 
            $(npt).is(":visible")) {
                var scrollCalc = $(npt).css("font-size").replace("px", "") * end;
                if (npt.scrollLeft = scrollCalc > npt.scrollWidth ? scrollCalc : 0, androidchrome || 0 != opts.insertMode || begin != end || end++, 
                npt.setSelectionRange) npt.selectionStart = begin, npt.selectionEnd = end; else if (window.getSelection) {
                    if (range = document.createRange(), void 0 == npt.firstChild) {
                        var textNode = document.createTextNode("");
                        npt.appendChild(textNode);
                    }
                    range.setStart(npt.firstChild, begin < npt._valueGet().length ? begin : npt._valueGet().length), 
                    range.setEnd(npt.firstChild, end < npt._valueGet().length ? end : npt._valueGet().length), 
                    range.collapse(!0);
                    var sel = window.getSelection();
                    sel.removeAllRanges(), sel.addRange(range);
                } else npt.createTextRange && (range = npt.createTextRange(), range.collapse(!0), 
                range.moveEnd("character", end), range.moveStart("character", begin), range.select());
            }
        }
        function determineLastRequiredPosition(returnDefinition) {
            var pos, testPos, buffer = getBuffer(), bl = buffer.length, lvp = getLastValidPosition(), positions = {}, lvTest = getMaskSet().validPositions[lvp], ndxIntlzr = void 0 != lvTest ? lvTest.locator.slice() : void 0;
            for (pos = lvp + 1; pos < buffer.length; pos++) testPos = getTestTemplate(pos, ndxIntlzr, pos - 1), 
            ndxIntlzr = testPos.locator.slice(), positions[pos] = $.extend(!0, {}, testPos);
            var lvTestAlt = lvTest && void 0 != lvTest.alternation ? lvTest.locator[lvTest.alternation] : void 0;
            for (pos = bl - 1; pos > lvp && (testPos = positions[pos], (testPos.match.optionality || testPos.match.optionalQuantifier || lvTestAlt && (lvTestAlt != positions[pos].locator[lvTest.alternation] && null != testPos.match.fn || null == testPos.match.fn && testPos.locator[lvTest.alternation] && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","), lvTestAlt.split(",")) && "" != getTests(pos)[0].def)) && buffer[pos] == getPlaceholder(pos, testPos.match)); pos--) bl--;
            return returnDefinition ? {
                l: bl,
                def: positions[bl] ? positions[bl].match : void 0
            } : bl;
        }
        function clearOptionalTail(buffer) {
            for (var rl = determineLastRequiredPosition(), lmib = buffer.length - 1; lmib > rl && !isMask(lmib); lmib--) ;
            return buffer.splice(rl, lmib + 1 - rl), buffer;
        }
        function isComplete(buffer) {
            if ($.isFunction(opts.isComplete)) return opts.isComplete.call($el, buffer, opts);
            if ("*" == opts.repeat) return void 0;
            {
                var complete = !1, lrp = determineLastRequiredPosition(!0), aml = seekPrevious(lrp.l);
                getLastValidPosition();
            }
            if (void 0 == lrp.def || lrp.def.newBlockMarker || lrp.def.optionality || lrp.def.optionalQuantifier) {
                complete = !0;
                for (var i = 0; aml >= i; i++) {
                    var test = getTestTemplate(i).match;
                    if (null != test.fn && void 0 == getMaskSet().validPositions[i] && test.optionality !== !0 && test.optionalQuantifier !== !0 || null == test.fn && buffer[i] != getPlaceholder(i, test)) {
                        complete = !1;
                        break;
                    }
                }
            }
            return complete;
        }
        function isSelection(begin, end) {
            return isRTL ? begin - end > 1 || begin - end == 1 && opts.insertMode : end - begin > 1 || end - begin == 1 && opts.insertMode;
        }
        function installEventRuler(npt) {
            var events = $._data(npt).events, inComposition = !1;
            $.each(events, function(eventType, eventHandlers) {
                $.each(eventHandlers, function(ndx, eventHandler) {
                    if ("inputmask" == eventHandler.namespace && "setvalue" != eventHandler.type) {
                        var handler = eventHandler.handler;
                        eventHandler.handler = function(e) {
                            if (!(this.disabled || this.readOnly && !("keydown" == e.type && e.ctrlKey && 67 == e.keyCode || e.keyCode == $.inputmask.keyCode.TAB))) {
                                switch (e.type) {
                                  case "input":
                                    if (skipInputEvent === !0 || inComposition === !0) return skipInputEvent = !1, e.preventDefault();
                                    break;

                                  case "keydown":
                                    skipKeyPressEvent = !1, inComposition = !1;
                                    break;

                                  case "keypress":
                                    if (skipKeyPressEvent === !0) return e.preventDefault();
                                    skipKeyPressEvent = !0;
                                    break;

                                  case "compositionstart":
                                    inComposition = !0;
                                    break;

                                  case "compositionupdate":
                                    skipInputEvent = !0;
                                    break;

                                  case "compositionend":
                                    inComposition = !1;
                                }
                                return handler.apply(this, arguments);
                            }
                            e.preventDefault();
                        };
                    }
                });
            });
        }
        function patchValueProperty(npt) {
            function PatchValhook(type) {
                if (void 0 == $.valHooks[type] || 1 != $.valHooks[type].inputmaskpatch) {
                    var valhookGet = $.valHooks[type] && $.valHooks[type].get ? $.valHooks[type].get : function(elem) {
                        return elem.value;
                    }, valhookSet = $.valHooks[type] && $.valHooks[type].set ? $.valHooks[type].set : function(elem, value) {
                        return elem.value = value, elem;
                    };
                    $.valHooks[type] = {
                        get: function(elem) {
                            var $elem = $(elem);
                            if ($elem.data("_inputmask")) {
                                if ($elem.data("_inputmask").opts.autoUnmask) return $elem.inputmask("unmaskedvalue");
                                var result = valhookGet(elem), inputData = $elem.data("_inputmask"), maskset = inputData.maskset, bufferTemplate = maskset._buffer;
                                return bufferTemplate = bufferTemplate ? bufferTemplate.join("") : "", result != bufferTemplate ? result : "";
                            }
                            return valhookGet(elem);
                        },
                        set: function(elem, value) {
                            var result, $elem = $(elem), inputData = $elem.data("_inputmask");
                            return result = valhookSet(elem, value), inputData && $elem.triggerHandler("setvalue.inputmask"), 
                            result;
                        },
                        inputmaskpatch: !0
                    };
                }
            }
            function getter() {
                var $self = $(this), inputData = $(this).data("_inputmask");
                return inputData ? inputData.opts.autoUnmask ? $self.inputmask("unmaskedvalue") : valueGet.call(this) != getBufferTemplate().join("") ? valueGet.call(this) : "" : valueGet.call(this);
            }
            function setter(value) {
                var inputData = $(this).data("_inputmask");
                valueSet.call(this, value), inputData && $(this).triggerHandler("setvalue.inputmask");
            }
            function InstallNativeValueSetFallback(npt) {
                $(npt).bind("mouseenter.inputmask", function(event) {
                    var $input = $(this), input = this, value = input._valueGet();
                    "" != value && value != getBuffer().join("") && $input.triggerHandler("setvalue.inputmask");
                });
                //!! the bound handlers are executed in the order they where bound
                var events = $._data(npt).events, handlers = events.mouseover;
                if (handlers) {
                    for (var ourHandler = handlers[handlers.length - 1], i = handlers.length - 1; i > 0; i--) handlers[i] = handlers[i - 1];
                    handlers[0] = ourHandler;
                }
            }
            var valueGet, valueSet;
            if (!npt._valueGet) {
                var valueProperty;
                Object.getOwnPropertyDescriptor && void 0 == npt.value ? (valueGet = function() {
                    return this.textContent;
                }, valueSet = function(value) {
                    this.textContent = value;
                }, Object.defineProperty(npt, "value", {
                    get: getter,
                    set: setter
                })) : ((valueProperty = Object.getOwnPropertyDescriptor && Object.getOwnPropertyDescriptor(npt, "value")) && valueProperty.configurable, 
                document.__lookupGetter__ && npt.__lookupGetter__("value") ? (valueGet = npt.__lookupGetter__("value"), 
                valueSet = npt.__lookupSetter__("value"), npt.__defineGetter__("value", getter), 
                npt.__defineSetter__("value", setter)) : (valueGet = function() {
                    return npt.value;
                }, valueSet = function(value) {
                    npt.value = value;
                }, PatchValhook(npt.type), InstallNativeValueSetFallback(npt))), npt._valueGet = function(overruleRTL) {
                    return isRTL && overruleRTL !== !0 ? valueGet.call(this).split("").reverse().join("") : valueGet.call(this);
                }, npt._valueSet = function(value) {
                    valueSet.call(this, isRTL ? value.split("").reverse().join("") : value);
                };
            }
        }
        function handleRemove(input, k, pos, strict) {
            function generalize() {
                if (opts.keepStatic) {
                    resetMaskSet(!0);
                    var lastAlt, validInputs = [], positionsClone = $.extend(!0, {}, getMaskSet().validPositions);
                    for (lastAlt = getLastValidPosition(); lastAlt >= 0; lastAlt--) {
                        var validPos = getMaskSet().validPositions[lastAlt];
                        if (validPos) {
                            if (void 0 != validPos.alternation && validPos.locator[validPos.alternation] == getTestTemplate(lastAlt).locator[validPos.alternation]) break;
                            null != validPos.match.fn && validInputs.push(validPos.input), delete getMaskSet().validPositions[lastAlt];
                        }
                    }
                    if (lastAlt > 0) for (;validInputs.length > 0; ) {
                        getMaskSet().p = seekNext(getLastValidPosition());
                        var keypress = $.Event("keypress");
                        keypress.which = validInputs.pop().charCodeAt(0), keypressEvent.call(input, keypress, !0, !1, !1, getMaskSet().p);
                    } else getMaskSet().validPositions = $.extend(!0, {}, positionsClone);
                }
            }
            if ((opts.numericInput || isRTL) && (k == $.inputmask.keyCode.BACKSPACE ? k = $.inputmask.keyCode.DELETE : k == $.inputmask.keyCode.DELETE && (k = $.inputmask.keyCode.BACKSPACE), 
            isRTL)) {
                var pend = pos.end;
                pos.end = pos.begin, pos.begin = pend;
            }
            if (k == $.inputmask.keyCode.BACKSPACE && (pos.end - pos.begin < 1 || 0 == opts.insertMode) ? pos.begin = seekPrevious(pos.begin) : k == $.inputmask.keyCode.DELETE && pos.begin == pos.end && (pos.end = isMask(pos.end) ? pos.end + 1 : seekNext(pos.end) + 1), 
            stripValidPositions(pos.begin, pos.end, !1, strict), strict !== !0) {
                generalize();
                var lvp = getLastValidPosition(pos.begin);
                lvp < pos.begin ? (-1 == lvp && resetMaskSet(), getMaskSet().p = seekNext(lvp)) : getMaskSet().p = pos.begin;
            }
        }
        function keydownEvent(e) {
            var input = this, $input = $(input), k = e.keyCode, pos = caret(input);
            k == $.inputmask.keyCode.BACKSPACE || k == $.inputmask.keyCode.DELETE || iphone && 127 == k || e.ctrlKey && 88 == k && !isInputEventSupported("cut") ? (e.preventDefault(), 
            88 == k && (undoValue = getBuffer().join("")), handleRemove(input, k, pos), writeBuffer(input, getBuffer(), getMaskSet().p, e, undoValue != getBuffer().join("")), 
            input._valueGet() == getBufferTemplate().join("") ? $input.trigger("cleared") : isComplete(getBuffer()) === !0 && $input.trigger("complete"), 
            opts.showTooltip && $input.prop("title", getMaskSet().mask)) : k == $.inputmask.keyCode.END || k == $.inputmask.keyCode.PAGE_DOWN ? setTimeout(function() {
                var caretPos = seekNext(getLastValidPosition());
                opts.insertMode || caretPos != getMaskLength() || e.shiftKey || caretPos--, caret(input, e.shiftKey ? pos.begin : caretPos, caretPos);
            }, 0) : k == $.inputmask.keyCode.HOME && !e.shiftKey || k == $.inputmask.keyCode.PAGE_UP ? caret(input, 0, e.shiftKey ? pos.begin : 0) : (opts.undoOnEscape && k == $.inputmask.keyCode.ESCAPE || 90 == k && e.ctrlKey) && e.altKey !== !0 ? (checkVal(input, !0, !1, undoValue.split("")), 
            $input.click()) : k != $.inputmask.keyCode.INSERT || e.shiftKey || e.ctrlKey ? 0 != opts.insertMode || e.shiftKey || (k == $.inputmask.keyCode.RIGHT ? setTimeout(function() {
                var caretPos = caret(input);
                caret(input, caretPos.begin);
            }, 0) : k == $.inputmask.keyCode.LEFT && setTimeout(function() {
                var caretPos = caret(input);
                caret(input, isRTL ? caretPos.begin + 1 : caretPos.begin - 1);
            }, 0)) : (opts.insertMode = !opts.insertMode, caret(input, opts.insertMode || pos.begin != getMaskLength() ? pos.begin : pos.begin - 1)), 
            opts.onKeyDown.call(this, e, getBuffer(), caret(input).begin, opts), ignorable = -1 != $.inArray(k, opts.ignorables);
        }
        function keypressEvent(e, checkval, writeOut, strict, ndx) {
            var input = this, $input = $(input), k = e.which || e.charCode || e.keyCode;
            if (!(checkval === !0 || e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || ignorable)) return !0;
            if (k) {
                46 == k && 0 == e.shiftKey && "," == opts.radixPoint && (k = 44);
                var forwardPosition, pos = checkval ? {
                    begin: ndx,
                    end: ndx
                } : caret(input), c = String.fromCharCode(k), isSlctn = isSelection(pos.begin, pos.end);
                isSlctn && (getMaskSet().undoPositions = $.extend(!0, {}, getMaskSet().validPositions), 
                handleRemove(input, $.inputmask.keyCode.DELETE, pos, !0), pos.begin = getMaskSet().p, 
                opts.insertMode || (opts.insertMode = !opts.insertMode, setValidPosition(pos.begin, strict), 
                opts.insertMode = !opts.insertMode), isSlctn = !opts.multi), getMaskSet().writeOutBuffer = !0;
                var p = isRTL && !isSlctn ? pos.end : pos.begin, valResult = isValid(p, c, strict);
                if (valResult !== !1) {
                    if (valResult !== !0 && (p = void 0 != valResult.pos ? valResult.pos : p, c = void 0 != valResult.c ? valResult.c : c), 
                    resetMaskSet(!0), void 0 != valResult.caret) forwardPosition = valResult.caret; else {
                        var vps = getMaskSet().validPositions;
                        forwardPosition = !opts.keepStatic && (void 0 != vps[p + 1] && getTests(p + 1, vps[p].locator.slice(), p).length > 1 || void 0 != vps[p].alternation) ? p + 1 : seekNext(p);
                    }
                    getMaskSet().p = forwardPosition;
                }
                if (writeOut !== !1) {
                    var self = this;
                    if (setTimeout(function() {
                        opts.onKeyValidation.call(self, valResult, opts);
                    }, 0), getMaskSet().writeOutBuffer && valResult !== !1) {
                        var buffer = getBuffer();
                        writeBuffer(input, buffer, checkval ? void 0 : opts.numericInput ? seekPrevious(forwardPosition) : forwardPosition, e, checkval !== !0), 
                        checkval !== !0 && setTimeout(function() {
                            isComplete(buffer) === !0 && $input.trigger("complete");
                        }, 0);
                    } else isSlctn && (getMaskSet().buffer = void 0, getMaskSet().validPositions = getMaskSet().undoPositions);
                } else isSlctn && (getMaskSet().buffer = void 0, getMaskSet().validPositions = getMaskSet().undoPositions);
                if (opts.showTooltip && $input.prop("title", getMaskSet().mask), checkval && $.isFunction(opts.onBeforeWrite)) {
                    var result = opts.onBeforeWrite.call(this, e, getBuffer(), forwardPosition, opts);
                    if (result && result.refreshFromBuffer) {
                        var refresh = result.refreshFromBuffer;
                        refreshFromBuffer(refresh === !0 ? refresh : refresh.start, refresh.end, result.buffer), 
                        resetMaskSet(!0), result.caret && (getMaskSet().p = result.caret);
                    }
                }
                e.preventDefault();
            }
        }
        function pasteEvent(e) {
            var input = this, $input = $(input), inputValue = input._valueGet(!0), caretPos = caret(input);
            if ("propertychange" == e.type && input._valueGet().length <= getMaskLength()) return !0;
            if ("paste" == e.type) {
                var valueBeforeCaret = inputValue.substr(0, caretPos.begin), valueAfterCaret = inputValue.substr(caretPos.end, inputValue.length);
                valueBeforeCaret == getBufferTemplate().slice(0, caretPos.begin).join("") && (valueBeforeCaret = ""), 
                valueAfterCaret == getBufferTemplate().slice(caretPos.end).join("") && (valueAfterCaret = ""), 
                window.clipboardData && window.clipboardData.getData ? inputValue = valueBeforeCaret + window.clipboardData.getData("Text") + valueAfterCaret : e.originalEvent && e.originalEvent.clipboardData && e.originalEvent.clipboardData.getData && (inputValue = valueBeforeCaret + e.originalEvent.clipboardData.getData("text/plain") + valueAfterCaret);
            }
            var pasteValue = inputValue;
            if ($.isFunction(opts.onBeforePaste)) {
                if (pasteValue = opts.onBeforePaste.call(input, inputValue, opts), pasteValue === !1) return e.preventDefault(), 
                !1;
                pasteValue || (pasteValue = inputValue);
            }
            return checkVal(input, !0, !1, isRTL ? pasteValue.split("").reverse() : pasteValue.split("")), 
            $input.click(), isComplete(getBuffer()) === !0 && $input.trigger("complete"), !1;
        }
        function inputFallBackEvent(e) {
            var input = this;
            checkVal(input, !0, !1), isComplete(getBuffer()) === !0 && $(input).trigger("complete"), 
            e.preventDefault();
        }
        function compositionStartEvent(e) {
            var input = this;
            undoValue = getBuffer().join(""), ("" == compositionData || 0 != e.originalEvent.data.indexOf(compositionData)) && (compositionCaretPos = caret(input));
        }
        function compositionUpdateEvent(e) {
            var input = this, caretPos = compositionCaretPos || caret(input);
            0 == e.originalEvent.data.indexOf(compositionData) && (resetMaskSet(), caretPos = {
                begin: 0,
                end: 0
            });
            var newData = e.originalEvent.data;
            caret(input, caretPos.begin, caretPos.end);
            for (var i = 0; i < newData.length; i++) {
                var keypress = $.Event("keypress");
                keypress.which = newData.charCodeAt(i), skipKeyPressEvent = !1, ignorable = !1, 
                keypressEvent.call(input, keypress);
            }
            setTimeout(function() {
                var forwardPosition = getMaskSet().p;
                writeBuffer(input, getBuffer(), opts.numericInput ? seekPrevious(forwardPosition) : forwardPosition);
            }, 0), compositionData = e.originalEvent.data;
        }
        function compositionEndEvent(e) {}
        function mask(el) {
            if ($el = $(el), $el.data("_inputmask", {
                maskset: maskset,
                opts: opts,
                isRTL: !1
            }), opts.showTooltip && $el.prop("title", getMaskSet().mask), ("rtl" == el.dir || opts.rightAlign) && $el.css("text-align", "right"), 
            "rtl" == el.dir || opts.numericInput) {
                el.dir = "ltr", $el.removeAttr("dir");
                var inputData = $el.data("_inputmask");
                inputData.isRTL = !0, $el.data("_inputmask", inputData), isRTL = !0;
            }
            $el.unbind(".inputmask"), ($el.is(":input") && isInputTypeSupported($el.attr("type")) || el.isContentEditable) && ($el.closest("form").bind("submit", function(e) {
                undoValue != getBuffer().join("") && $el.change(), $el[0]._valueGet && $el[0]._valueGet() == getBufferTemplate().join("") && $el[0]._valueSet(""), 
                opts.removeMaskOnSubmit && $el.inputmask("remove");
            }).bind("reset", function() {
                setTimeout(function() {
                    $el.triggerHandler("setvalue.inputmask");
                }, 0);
            }), $el.bind("mouseenter.inputmask", function() {
                var $input = $(this), input = this;
                !$input.is(":focus") && opts.showMaskOnHover && input._valueGet() != getBuffer().join("") && writeBuffer(input, getBuffer());
            }).bind("blur.inputmask", function(e) {
                var $input = $(this), input = this;
                if ($input.data("_inputmask")) {
                    var nptValue = input._valueGet(), buffer = getBuffer().slice();
                    firstClick = !0, undoValue != buffer.join("") && setTimeout(function() {
                        $input.change(), undoValue = buffer.join("");
                    }, 0), "" != nptValue && (opts.clearMaskOnLostFocus && (nptValue == getBufferTemplate().join("") ? buffer = [] : clearOptionalTail(buffer)), 
                    isComplete(buffer) === !1 && ($input.trigger("incomplete"), opts.clearIncomplete && (resetMaskSet(), 
                    buffer = opts.clearMaskOnLostFocus ? [] : getBufferTemplate().slice())), writeBuffer(input, buffer, void 0, e));
                }
            }).bind("focus.inputmask", function(e) {
                var input = ($(this), this), nptValue = input._valueGet();
                opts.showMaskOnFocus && (!opts.showMaskOnHover || opts.showMaskOnHover && "" == nptValue) && input._valueGet() != getBuffer().join("") && writeBuffer(input, getBuffer(), seekNext(getLastValidPosition())), 
                undoValue = getBuffer().join("");
            }).bind("mouseleave.inputmask", function() {
                var $input = $(this), input = this;
                if (opts.clearMaskOnLostFocus) {
                    var buffer = getBuffer().slice(), nptValue = input._valueGet();
                    $input.is(":focus") || nptValue == $input.attr("placeholder") || "" == nptValue || (nptValue == getBufferTemplate().join("") ? buffer = [] : clearOptionalTail(buffer), 
                    writeBuffer(input, buffer));
                }
            }).bind("click.inputmask", function() {
                var $input = $(this), input = this;
                if ($input.is(":focus")) {
                    var selectedCaret = caret(input);
                    if (selectedCaret.begin == selectedCaret.end) if (opts.radixFocus && "" != opts.radixPoint && -1 != $.inArray(opts.radixPoint, getBuffer()) && (firstClick || getBuffer().join("") == getBufferTemplate().join(""))) caret(input, $.inArray(opts.radixPoint, getBuffer())), 
                    firstClick = !1; else {
                        var clickPosition = TranslatePosition(selectedCaret.begin), lastPosition = seekNext(getLastValidPosition(clickPosition));
                        lastPosition > clickPosition ? caret(input, isMask(clickPosition) ? clickPosition : seekNext(clickPosition)) : caret(input, lastPosition);
                    }
                }
            }).bind("dblclick.inputmask", function() {
                var input = this;
                setTimeout(function() {
                    caret(input, 0, seekNext(getLastValidPosition()));
                }, 0);
            }).bind(PasteEventType + ".inputmask dragdrop.inputmask drop.inputmask", pasteEvent).bind("cut.inputmask", function(e) {
                skipInputEvent = !0;
                var input = this, $input = $(input), pos = caret(input);
                handleRemove(input, $.inputmask.keyCode.DELETE, pos), writeBuffer(input, getBuffer(), getMaskSet().p, e, undoValue != getBuffer().join("")), 
                input._valueGet() == getBufferTemplate().join("") && $input.trigger("cleared"), 
                opts.showTooltip && $input.prop("title", getMaskSet().mask);
            }).bind("complete.inputmask", opts.oncomplete).bind("incomplete.inputmask", opts.onincomplete).bind("cleared.inputmask", opts.oncleared), 
            $el.bind("keydown.inputmask", keydownEvent).bind("keypress.inputmask", keypressEvent), 
            androidfirefox || $el.bind("compositionstart.inputmask", compositionStartEvent).bind("compositionupdate.inputmask", compositionUpdateEvent).bind("compositionend.inputmask", compositionEndEvent), 
            "paste" === PasteEventType && $el.bind("input.inputmask", inputFallBackEvent)), 
            $el.bind("setvalue.inputmask", function() {
                var input = this, value = input._valueGet();
                input._valueSet($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(input, value, opts) || value : value), 
                checkVal(input, !0, !1), undoValue = getBuffer().join(""), (opts.clearMaskOnLostFocus || opts.clearIncomplete) && input._valueGet() == getBufferTemplate().join("") && input._valueSet("");
            }), patchValueProperty(el);
            var initialValue = $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(el, el._valueGet(), opts) || el._valueGet() : el._valueGet();
            checkVal(el, !0, !1, initialValue.split(""));
            var buffer = getBuffer().slice();
            undoValue = buffer.join("");
            var activeElement;
            try {
                activeElement = document.activeElement;
            } catch (e) {}
            isComplete(buffer) === !1 && opts.clearIncomplete && resetMaskSet(), opts.clearMaskOnLostFocus && (buffer.join("") == getBufferTemplate().join("") ? buffer = [] : clearOptionalTail(buffer)), 
            writeBuffer(el, buffer), activeElement === el && caret(el, seekNext(getLastValidPosition())), 
            installEventRuler(el);
        }
        var undoValue, compositionCaretPos, compositionData, $el, maxLength, isRTL = !1, skipKeyPressEvent = !1, skipInputEvent = !1, ignorable = !1, firstClick = !0;
        if (void 0 != actionObj) switch (actionObj.action) {
          case "isComplete":
            return $el = $(actionObj.el), maskset = $el.data("_inputmask").maskset, opts = $el.data("_inputmask").opts, 
            isComplete(actionObj.buffer);

          case "unmaskedvalue":
            return $el = actionObj.$input, maskset = $el.data("_inputmask").maskset, opts = $el.data("_inputmask").opts, 
            isRTL = actionObj.$input.data("_inputmask").isRTL, unmaskedvalue(actionObj.$input);

          case "mask":
            undoValue = getBuffer().join(""), mask(actionObj.el);
            break;

          case "format":
            $el = $({}), $el.data("_inputmask", {
                maskset: maskset,
                opts: opts,
                isRTL: opts.numericInput
            }), opts.numericInput && (isRTL = !0);
            var valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call($el, actionObj.value, opts) || actionObj.value : actionObj.value).split("");
            return checkVal($el, !1, !1, isRTL ? valueBuffer.reverse() : valueBuffer), $.isFunction(opts.onBeforeWrite) && opts.onBeforeWrite.call(this, void 0, getBuffer(), 0, opts), 
            actionObj.metadata ? {
                value: isRTL ? getBuffer().slice().reverse().join("") : getBuffer().join(""),
                metadata: $el.inputmask("getmetadata")
            } : isRTL ? getBuffer().slice().reverse().join("") : getBuffer().join("");

          case "isValid":
            $el = $({}), $el.data("_inputmask", {
                maskset: maskset,
                opts: opts,
                isRTL: opts.numericInput
            }), opts.numericInput && (isRTL = !0);
            var valueBuffer = actionObj.value.split("");
            checkVal($el, !1, !0, isRTL ? valueBuffer.reverse() : valueBuffer);
            for (var buffer = getBuffer(), rl = determineLastRequiredPosition(), lmib = buffer.length - 1; lmib > rl && !isMask(lmib); lmib--) ;
            return buffer.splice(rl, lmib + 1 - rl), isComplete(buffer) && actionObj.value == buffer.join("");

          case "getemptymask":
            return $el = $(actionObj.el), maskset = $el.data("_inputmask").maskset, opts = $el.data("_inputmask").opts, 
            getBufferTemplate();

          case "remove":
            var el = actionObj.el;
            $el = $(el), maskset = $el.data("_inputmask").maskset, opts = $el.data("_inputmask").opts, 
            el._valueSet(unmaskedvalue($el)), $el.unbind(".inputmask"), $el.removeData("_inputmask");
            var valueProperty;
            Object.getOwnPropertyDescriptor && (valueProperty = Object.getOwnPropertyDescriptor(el, "value")), 
            valueProperty && valueProperty.get ? el._valueGet && Object.defineProperty(el, "value", {
                get: el._valueGet,
                set: el._valueSet
            }) : document.__lookupGetter__ && el.__lookupGetter__("value") && el._valueGet && (el.__defineGetter__("value", el._valueGet), 
            el.__defineSetter__("value", el._valueSet));
            try {
                delete el._valueGet, delete el._valueSet;
            } catch (e) {
                el._valueGet = void 0, el._valueSet = void 0;
            }
            break;

          case "getmetadata":
            if ($el = $(actionObj.el), maskset = $el.data("_inputmask").maskset, opts = $el.data("_inputmask").opts, 
            $.isArray(maskset.metadata)) {
                for (var alternation, lvp = getLastValidPosition(), firstAlt = lvp; firstAlt >= 0; firstAlt--) if (getMaskSet().validPositions[firstAlt] && void 0 != getMaskSet().validPositions[firstAlt].alternation) {
                    alternation = getMaskSet().validPositions[firstAlt].alternation;
                    break;
                }
                return void 0 != alternation ? maskset.metadata[getMaskSet().validPositions[lvp].locator[alternation]] : maskset.metadata[0];
            }
            return maskset.metadata;
        }
    }
    if (void 0 === $.fn.inputmask) {
        var ua = navigator.userAgent, iphone = null !== ua.match(new RegExp("iphone", "i")), androidchrome = (null !== ua.match(new RegExp("android.*safari.*", "i")), 
        null !== ua.match(new RegExp("android.*chrome.*", "i"))), androidfirefox = null !== ua.match(new RegExp("android.*firefox.*", "i")), PasteEventType = (/Kindle/i.test(ua) || /Silk/i.test(ua) || /KFTT/i.test(ua) || /KFOT/i.test(ua) || /KFJWA/i.test(ua) || /KFJWI/i.test(ua) || /KFSOWI/i.test(ua) || /KFTHWA/i.test(ua) || /KFTHWI/i.test(ua) || /KFAPWA/i.test(ua) || /KFAPWI/i.test(ua), 
        isInputEventSupported("paste") ? "paste" : isInputEventSupported("input") ? "input" : "propertychange");
        $.inputmask = {
            defaults: {
                placeholder: "_",
                optionalmarker: {
                    start: "[",
                    end: "]"
                },
                quantifiermarker: {
                    start: "{",
                    end: "}"
                },
                groupmarker: {
                    start: "(",
                    end: ")"
                },
                alternatormarker: "|",
                escapeChar: "\\",
                mask: null,
                oncomplete: $.noop,
                onincomplete: $.noop,
                oncleared: $.noop,
                repeat: 0,
                greedy: !0,
                autoUnmask: !1,
                removeMaskOnSubmit: !1,
                clearMaskOnLostFocus: !0,
                insertMode: !0,
                clearIncomplete: !1,
                aliases: {},
                alias: null,
                onKeyDown: $.noop,
                onBeforeMask: void 0,
                onBeforePaste: void 0,
                onBeforeWrite: void 0,
                onUnMask: void 0,
                showMaskOnFocus: !0,
                showMaskOnHover: !0,
                onKeyValidation: $.noop,
                skipOptionalPartCharacter: " ",
                showTooltip: !1,
                numericInput: !1,
                rightAlign: !1,
                undoOnEscape: !0,
                radixPoint: "",
                radixFocus: !1,
                nojumps: !1,
                nojumpsThreshold: 0,
                keepStatic: void 0,
                definitions: {
                    "9": {
                        validator: "[0-9]",
                        cardinality: 1,
                        definitionSymbol: "*"
                    },
                    a: {
                        validator: "[A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",
                        cardinality: 1,
                        definitionSymbol: "*"
                    },
                    "*": {
                        validator: "[0-9A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",
                        cardinality: 1
                    }
                },
                ignorables: [ 8, 9, 13, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123 ],
                isComplete: void 0,
                canClearPosition: $.noop,
                postValidation: void 0
            },
            keyCode: {
                ALT: 18,
                BACKSPACE: 8,
                CAPS_LOCK: 20,
                COMMA: 188,
                COMMAND: 91,
                COMMAND_LEFT: 91,
                COMMAND_RIGHT: 93,
                CONTROL: 17,
                DELETE: 46,
                DOWN: 40,
                END: 35,
                ENTER: 13,
                ESCAPE: 27,
                HOME: 36,
                INSERT: 45,
                LEFT: 37,
                MENU: 93,
                NUMPAD_ADD: 107,
                NUMPAD_DECIMAL: 110,
                NUMPAD_DIVIDE: 111,
                NUMPAD_ENTER: 108,
                NUMPAD_MULTIPLY: 106,
                NUMPAD_SUBTRACT: 109,
                PAGE_DOWN: 34,
                PAGE_UP: 33,
                PERIOD: 190,
                RIGHT: 39,
                SHIFT: 16,
                SPACE: 32,
                TAB: 9,
                UP: 38,
                WINDOWS: 91
            },
            masksCache: {},
            escapeRegex: function(str) {
                var specials = [ "/", ".", "*", "+", "?", "|", "(", ")", "[", "]", "{", "}", "\\", "$", "^" ];
                return str.replace(new RegExp("(\\" + specials.join("|\\") + ")", "gim"), "\\$1");
            },
            format: function(value, options, metadata) {
                var opts = $.extend(!0, {}, $.inputmask.defaults, options);
                return resolveAlias(opts.alias, options, opts), maskScope({
                    action: "format",
                    value: value,
                    metadata: metadata
                }, generateMaskSet(opts, options && void 0 !== options.definitions), opts);
            },
            isValid: function(value, options) {
                var opts = $.extend(!0, {}, $.inputmask.defaults, options);
                return resolveAlias(opts.alias, options, opts), maskScope({
                    action: "isValid",
                    value: value
                }, generateMaskSet(opts, options && void 0 !== options.definitions), opts);
            }
        }, $.fn.inputmask = function(fn, options) {
            function importAttributeOptions(npt, opts, importedOptionsContainer) {
                var $npt = $(npt);
                $npt.data("inputmask-alias") && resolveAlias($npt.data("inputmask-alias"), $.extend(!0, {}, opts), opts);
                for (var option in opts) {
                    var optionData = $npt.data("inputmask-" + option.toLowerCase());
                    void 0 != optionData && (optionData = "boolean" == typeof optionData ? optionData : optionData.toString(), 
                    "mask" == option && 0 == optionData.indexOf("[") ? (opts[option] = optionData.replace(/[\s[\]]/g, "").split("','"), 
                    opts[option][0] = opts[option][0].replace("'", ""), opts[option][opts[option].length - 1] = opts[option][opts[option].length - 1].replace("'", "")) : opts[option] = optionData, 
                    importedOptionsContainer && (importedOptionsContainer[option] = opts[option]));
                }
                return opts;
            }
            var maskset, opts = $.extend(!0, {}, $.inputmask.defaults, options);
            if ("string" == typeof fn) switch (fn) {
              case "mask":
                return resolveAlias(opts.alias, options, opts), this.each(function() {
                    return importAttributeOptions(this, opts), maskset = generateMaskSet(opts, options && void 0 !== options.definitions), 
                    void 0 == maskset ? this : void maskScope({
                        action: "mask",
                        el: this
                    }, maskset, opts);
                });

              case "unmaskedvalue":
                var $input = $(this);
                return $input.data("_inputmask") ? maskScope({
                    action: "unmaskedvalue",
                    $input: $input
                }) : $input.val();

              case "remove":
                return this.each(function() {
                    var $input = $(this);
                    $input.data("_inputmask") && maskScope({
                        action: "remove",
                        el: this
                    });
                });

              case "getemptymask":
                return this.data("_inputmask") ? maskScope({
                    action: "getemptymask",
                    el: this
                }) : "";

              case "hasMaskedValue":
                return this.data("_inputmask") ? !this.data("_inputmask").opts.autoUnmask : !1;

              case "isComplete":
                return this.data("_inputmask") ? maskScope({
                    action: "isComplete",
                    buffer: this[0]._valueGet().split(""),
                    el: this
                }) : !0;

              case "getmetadata":
                return this.data("_inputmask") ? maskScope({
                    action: "getmetadata",
                    el: this
                }) : void 0;

              default:
                return resolveAlias(opts.alias, options, opts), resolveAlias(fn, options, opts) || (opts.mask = fn), 
                this.each(function() {
                    return importAttributeOptions(this, opts), maskset = generateMaskSet(opts, options && void 0 !== options.definitions), 
                    void 0 == maskset ? this : void maskScope({
                        action: "mask",
                        el: this
                    }, maskset, opts);
                });
            } else {
                if ("object" == typeof fn) return opts = $.extend(!0, {}, $.inputmask.defaults, fn), 
                resolveAlias(opts.alias, fn, opts), this.each(function() {
                    return importAttributeOptions(this, opts), maskset = generateMaskSet(opts, fn && void 0 !== fn.definitions), 
                    void 0 == maskset ? this : void maskScope({
                        action: "mask",
                        el: this
                    }, maskset, opts);
                });
                if (void 0 == fn) return this.each(function() {
                    var attrOptions = $(this).attr("data-inputmask");
                    if (attrOptions && "" != attrOptions) try {
                        attrOptions = attrOptions.replace(new RegExp("'", "g"), '"');
                        var dataoptions = $.parseJSON("{" + attrOptions + "}");
                        $.extend(!0, dataoptions, options), opts = $.extend(!0, {}, $.inputmask.defaults, dataoptions), 
                        opts = importAttributeOptions(this, opts), resolveAlias(opts.alias, dataoptions, opts), 
                        opts.alias = void 0, $(this).inputmask("mask", opts);
                    } catch (ex) {}
                    if ($(this).attr("data-inputmask-mask") || $(this).attr("data-inputmask-alias")) {
                        opts = $.extend(!0, {}, $.inputmask.defaults, {});
                        var dataOptions = {};
                        opts = importAttributeOptions(this, opts, dataOptions), resolveAlias(opts.alias, dataOptions, opts), 
                        opts.alias = void 0, $(this).inputmask("mask", opts);
                    }
                });
            }
        };
    }
    return $.fn.inputmask;
});
/*!
* jquery.inputmask.date.extensions.js
* http://github.com/RobinHerbots/jquery.inputmask
* Copyright (c) 2010 - 2015 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 3.1.63
*/
!function(factory) {
    "function" == typeof define && define.amd ? define([ "jquery", "./jquery.inputmask" ], factory) : "object" == typeof exports ? module.exports = factory(require("jquery"), require("./jquery.inputmask")) : factory(jQuery);
}(function($) {
    return $.extend($.inputmask.defaults.definitions, {
        h: {
            validator: "[01][0-9]|2[0-3]",
            cardinality: 2,
            prevalidator: [ {
                validator: "[0-2]",
                cardinality: 1
            } ]
        },
        s: {
            validator: "[0-5][0-9]",
            cardinality: 2,
            prevalidator: [ {
                validator: "[0-5]",
                cardinality: 1
            } ]
        },
        d: {
            validator: "0[1-9]|[12][0-9]|3[01]",
            cardinality: 2,
            prevalidator: [ {
                validator: "[0-3]",
                cardinality: 1
            } ]
        },
        m: {
            validator: "0[1-9]|1[012]",
            cardinality: 2,
            prevalidator: [ {
                validator: "[01]",
                cardinality: 1
            } ]
        },
        y: {
            validator: "(19|20)\\d{2}",
            cardinality: 4,
            prevalidator: [ {
                validator: "[12]",
                cardinality: 1
            }, {
                validator: "(19|20)",
                cardinality: 2
            }, {
                validator: "(19|20)\\d",
                cardinality: 3
            } ]
        }
    }), $.extend($.inputmask.defaults.aliases, {
        "dd/mm/yyyy": {
            mask: "1/2/y",
            placeholder: "dd/mm/yyyy",
            regex: {
                val1pre: new RegExp("[0-3]"),
                val1: new RegExp("0[1-9]|[12][0-9]|3[01]"),
                val2pre: function(separator) {
                    var escapedSeparator = $.inputmask.escapeRegex.call(this, separator);
                    return new RegExp("((0[1-9]|[12][0-9]|3[01])" + escapedSeparator + "[01])");
                },
                val2: function(separator) {
                    var escapedSeparator = $.inputmask.escapeRegex.call(this, separator);
                    return new RegExp("((0[1-9]|[12][0-9])" + escapedSeparator + "(0[1-9]|1[012]))|(30" + escapedSeparator + "(0[13-9]|1[012]))|(31" + escapedSeparator + "(0[13578]|1[02]))");
                }
            },
            leapday: "29/02/",
            separator: "/",
            yearrange: {
                minyear: 1900,
                maxyear: 2099
            },
            isInYearRange: function(chrs, minyear, maxyear) {
                if (isNaN(chrs)) return !1;
                var enteredyear = parseInt(chrs.concat(minyear.toString().slice(chrs.length))), enteredyear2 = parseInt(chrs.concat(maxyear.toString().slice(chrs.length)));
                return (isNaN(enteredyear) ? !1 : enteredyear >= minyear && maxyear >= enteredyear) || (isNaN(enteredyear2) ? !1 : enteredyear2 >= minyear && maxyear >= enteredyear2);
            },
            determinebaseyear: function(minyear, maxyear, hint) {
                var currentyear = new Date().getFullYear();
                if (minyear > currentyear) return minyear;
                if (currentyear > maxyear) {
                    for (var maxYearPrefix = maxyear.toString().slice(0, 2), maxYearPostfix = maxyear.toString().slice(2, 4); maxYearPrefix + hint > maxyear; ) maxYearPrefix--;
                    var maxxYear = maxYearPrefix + maxYearPostfix;
                    return minyear > maxxYear ? minyear : maxxYear;
                }
                return currentyear;
            },
            onKeyDown: function(e, buffer, caretPos, opts) {
                var $input = $(this);
                if (e.ctrlKey && e.keyCode == $.inputmask.keyCode.RIGHT) {
                    var today = new Date();
                    $input.val(today.getDate().toString() + (today.getMonth() + 1).toString() + today.getFullYear().toString()), 
                    $input.triggerHandler("setvalue.inputmask");
                }
            },
            getFrontValue: function(mask, buffer, opts) {
                for (var start = 0, length = 0, i = 0; i < mask.length && "2" != mask.charAt(i); i++) {
                    var definition = opts.definitions[mask.charAt(i)];
                    definition ? (start += length, length = definition.cardinality) : length++;
                }
                return buffer.join("").substr(start, length);
            },
            definitions: {
                "1": {
                    validator: function(chrs, maskset, pos, strict, opts) {
                        var isValid = opts.regex.val1.test(chrs);
                        return strict || isValid || chrs.charAt(1) != opts.separator && -1 == "-./".indexOf(chrs.charAt(1)) || !(isValid = opts.regex.val1.test("0" + chrs.charAt(0))) ? isValid : (maskset.buffer[pos - 1] = "0", 
                        {
                            refreshFromBuffer: {
                                start: pos - 1,
                                end: pos
                            },
                            pos: pos,
                            c: chrs.charAt(0)
                        });
                    },
                    cardinality: 2,
                    prevalidator: [ {
                        validator: function(chrs, maskset, pos, strict, opts) {
                            var pchrs = chrs;
                            isNaN(maskset.buffer[pos + 1]) || (pchrs += maskset.buffer[pos + 1]);
                            var isValid = 1 == pchrs.length ? opts.regex.val1pre.test(pchrs) : opts.regex.val1.test(pchrs);
                            if (!strict && !isValid) {
                                if (isValid = opts.regex.val1.test(chrs + "0")) return maskset.buffer[pos] = chrs, 
                                maskset.buffer[++pos] = "0", {
                                    pos: pos,
                                    c: "0"
                                };
                                if (isValid = opts.regex.val1.test("0" + chrs)) return maskset.buffer[pos] = "0", 
                                pos++, {
                                    pos: pos
                                };
                            }
                            return isValid;
                        },
                        cardinality: 1
                    } ]
                },
                "2": {
                    validator: function(chrs, maskset, pos, strict, opts) {
                        var frontValue = opts.getFrontValue(maskset.mask, maskset.buffer, opts);
                        -1 != frontValue.indexOf(opts.placeholder[0]) && (frontValue = "01" + opts.separator);
                        var isValid = opts.regex.val2(opts.separator).test(frontValue + chrs);
                        if (!strict && !isValid && (chrs.charAt(1) == opts.separator || -1 != "-./".indexOf(chrs.charAt(1))) && (isValid = opts.regex.val2(opts.separator).test(frontValue + "0" + chrs.charAt(0)))) return maskset.buffer[pos - 1] = "0", 
                        {
                            refreshFromBuffer: {
                                start: pos - 1,
                                end: pos
                            },
                            pos: pos,
                            c: chrs.charAt(0)
                        };
                        if (opts.mask.indexOf("2") == opts.mask.length - 1 && isValid) {
                            var dayMonthValue = maskset.buffer.join("").substr(4, 4) + chrs;
                            if (dayMonthValue != opts.leapday) return !0;
                            var year = parseInt(maskset.buffer.join("").substr(0, 4), 10);
                            return year % 4 === 0 ? year % 100 === 0 ? year % 400 === 0 ? !0 : !1 : !0 : !1;
                        }
                        return isValid;
                    },
                    cardinality: 2,
                    prevalidator: [ {
                        validator: function(chrs, maskset, pos, strict, opts) {
                            isNaN(maskset.buffer[pos + 1]) || (chrs += maskset.buffer[pos + 1]);
                            var frontValue = opts.getFrontValue(maskset.mask, maskset.buffer, opts);
                            -1 != frontValue.indexOf(opts.placeholder[0]) && (frontValue = "01" + opts.separator);
                            var isValid = 1 == chrs.length ? opts.regex.val2pre(opts.separator).test(frontValue + chrs) : opts.regex.val2(opts.separator).test(frontValue + chrs);
                            return strict || isValid || !(isValid = opts.regex.val2(opts.separator).test(frontValue + "0" + chrs)) ? isValid : (maskset.buffer[pos] = "0", 
                            pos++, {
                                pos: pos
                            });
                        },
                        cardinality: 1
                    } ]
                },
                y: {
                    validator: function(chrs, maskset, pos, strict, opts) {
                        if (opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) {
                            var dayMonthValue = maskset.buffer.join("").substr(0, 6);
                            if (dayMonthValue != opts.leapday) return !0;
                            var year = parseInt(chrs, 10);
                            return year % 4 === 0 ? year % 100 === 0 ? year % 400 === 0 ? !0 : !1 : !0 : !1;
                        }
                        return !1;
                    },
                    cardinality: 4,
                    prevalidator: [ {
                        validator: function(chrs, maskset, pos, strict, opts) {
                            var isValid = opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);
                            if (!strict && !isValid) {
                                var yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs + "0").toString().slice(0, 1);
                                if (isValid = opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos++] = yearPrefix.charAt(0), 
                                {
                                    pos: pos
                                };
                                if (yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs + "0").toString().slice(0, 2), 
                                isValid = opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos++] = yearPrefix.charAt(0), 
                                maskset.buffer[pos++] = yearPrefix.charAt(1), {
                                    pos: pos
                                };
                            }
                            return isValid;
                        },
                        cardinality: 1
                    }, {
                        validator: function(chrs, maskset, pos, strict, opts) {
                            var isValid = opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);
                            if (!strict && !isValid) {
                                var yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs).toString().slice(0, 2);
                                if (isValid = opts.isInYearRange(chrs[0] + yearPrefix[1] + chrs[1], opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos++] = yearPrefix.charAt(1), 
                                {
                                    pos: pos
                                };
                                if (yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs).toString().slice(0, 2), 
                                opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) {
                                    var dayMonthValue = maskset.buffer.join("").substr(0, 6);
                                    if (dayMonthValue != opts.leapday) isValid = !0; else {
                                        var year = parseInt(chrs, 10);
                                        isValid = year % 4 === 0 ? year % 100 === 0 ? year % 400 === 0 ? !0 : !1 : !0 : !1;
                                    }
                                } else isValid = !1;
                                if (isValid) return maskset.buffer[pos - 1] = yearPrefix.charAt(0), maskset.buffer[pos++] = yearPrefix.charAt(1), 
                                maskset.buffer[pos++] = chrs.charAt(0), {
                                    refreshFromBuffer: {
                                        start: pos - 3,
                                        end: pos
                                    },
                                    pos: pos
                                };
                            }
                            return isValid;
                        },
                        cardinality: 2
                    }, {
                        validator: function(chrs, maskset, pos, strict, opts) {
                            return opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);
                        },
                        cardinality: 3
                    } ]
                }
            },
            insertMode: !1,
            autoUnmask: !1
        },
        "mm/dd/yyyy": {
            placeholder: "mm/dd/yyyy",
            alias: "dd/mm/yyyy",
            regex: {
                val2pre: function(separator) {
                    var escapedSeparator = $.inputmask.escapeRegex.call(this, separator);
                    return new RegExp("((0[13-9]|1[012])" + escapedSeparator + "[0-3])|(02" + escapedSeparator + "[0-2])");
                },
                val2: function(separator) {
                    var escapedSeparator = $.inputmask.escapeRegex.call(this, separator);
                    return new RegExp("((0[1-9]|1[012])" + escapedSeparator + "(0[1-9]|[12][0-9]))|((0[13-9]|1[012])" + escapedSeparator + "30)|((0[13578]|1[02])" + escapedSeparator + "31)");
                },
                val1pre: new RegExp("[01]"),
                val1: new RegExp("0[1-9]|1[012]")
            },
            leapday: "02/29/",
            onKeyDown: function(e, buffer, caretPos, opts) {
                var $input = $(this);
                if (e.ctrlKey && e.keyCode == $.inputmask.keyCode.RIGHT) {
                    var today = new Date();
                    $input.val((today.getMonth() + 1).toString() + today.getDate().toString() + today.getFullYear().toString()), 
                    $input.triggerHandler("setvalue.inputmask");
                }
            }
        },
        "yyyy/mm/dd": {
            mask: "y/1/2",
            placeholder: "yyyy/mm/dd",
            alias: "mm/dd/yyyy",
            leapday: "/02/29",
            onKeyDown: function(e, buffer, caretPos, opts) {
                var $input = $(this);
                if (e.ctrlKey && e.keyCode == $.inputmask.keyCode.RIGHT) {
                    var today = new Date();
                    $input.val(today.getFullYear().toString() + (today.getMonth() + 1).toString() + today.getDate().toString()), 
                    $input.triggerHandler("setvalue.inputmask");
                }
            }
        },
        "dd.mm.yyyy": {
            mask: "1.2.y",
            placeholder: "dd.mm.yyyy",
            leapday: "29.02.",
            separator: ".",
            alias: "dd/mm/yyyy"
        },
        "dd-mm-yyyy": {
            mask: "1-2-y",
            placeholder: "dd-mm-yyyy",
            leapday: "29-02-",
            separator: "-",
            alias: "dd/mm/yyyy"
        },
        "mm.dd.yyyy": {
            mask: "1.2.y",
            placeholder: "mm.dd.yyyy",
            leapday: "02.29.",
            separator: ".",
            alias: "mm/dd/yyyy"
        },
        "mm-dd-yyyy": {
            mask: "1-2-y",
            placeholder: "mm-dd-yyyy",
            leapday: "02-29-",
            separator: "-",
            alias: "mm/dd/yyyy"
        },
        "yyyy.mm.dd": {
            mask: "y.1.2",
            placeholder: "yyyy.mm.dd",
            leapday: ".02.29",
            separator: ".",
            alias: "yyyy/mm/dd"
        },
        "yyyy-mm-dd": {
            mask: "y-1-2",
            placeholder: "yyyy-mm-dd",
            leapday: "-02-29",
            separator: "-",
            alias: "yyyy/mm/dd"
        },
        datetime: {
            mask: "1/2/y h:s",
            placeholder: "dd/mm/yyyy hh:mm",
            alias: "dd/mm/yyyy",
            regex: {
                hrspre: new RegExp("[012]"),
                hrs24: new RegExp("2[0-4]|1[3-9]"),
                hrs: new RegExp("[01][0-9]|2[0-4]"),
                ampm: new RegExp("^[a|p|A|P][m|M]"),
                mspre: new RegExp("[0-5]"),
                ms: new RegExp("[0-5][0-9]")
            },
            timeseparator: ":",
            hourFormat: "24",
            definitions: {
                h: {
                    validator: function(chrs, maskset, pos, strict, opts) {
                        if ("24" == opts.hourFormat && 24 == parseInt(chrs, 10)) return maskset.buffer[pos - 1] = "0", 
                        maskset.buffer[pos] = "0", {
                            refreshFromBuffer: {
                                start: pos - 1,
                                end: pos
                            },
                            c: "0"
                        };
                        var isValid = opts.regex.hrs.test(chrs);
                        if (!strict && !isValid && (chrs.charAt(1) == opts.timeseparator || -1 != "-.:".indexOf(chrs.charAt(1))) && (isValid = opts.regex.hrs.test("0" + chrs.charAt(0)))) return maskset.buffer[pos - 1] = "0", 
                        maskset.buffer[pos] = chrs.charAt(0), pos++, {
                            refreshFromBuffer: {
                                start: pos - 2,
                                end: pos
                            },
                            pos: pos,
                            c: opts.timeseparator
                        };
                        if (isValid && "24" !== opts.hourFormat && opts.regex.hrs24.test(chrs)) {
                            var tmp = parseInt(chrs, 10);
                            return 24 == tmp ? (maskset.buffer[pos + 5] = "a", maskset.buffer[pos + 6] = "m") : (maskset.buffer[pos + 5] = "p", 
                            maskset.buffer[pos + 6] = "m"), tmp -= 12, 10 > tmp ? (maskset.buffer[pos] = tmp.toString(), 
                            maskset.buffer[pos - 1] = "0") : (maskset.buffer[pos] = tmp.toString().charAt(1), 
                            maskset.buffer[pos - 1] = tmp.toString().charAt(0)), {
                                refreshFromBuffer: {
                                    start: pos - 1,
                                    end: pos + 6
                                },
                                c: maskset.buffer[pos]
                            };
                        }
                        return isValid;
                    },
                    cardinality: 2,
                    prevalidator: [ {
                        validator: function(chrs, maskset, pos, strict, opts) {
                            var isValid = opts.regex.hrspre.test(chrs);
                            return strict || isValid || !(isValid = opts.regex.hrs.test("0" + chrs)) ? isValid : (maskset.buffer[pos] = "0", 
                            pos++, {
                                pos: pos
                            });
                        },
                        cardinality: 1
                    } ]
                },
                s: {
                    validator: "[0-5][0-9]",
                    cardinality: 2,
                    prevalidator: [ {
                        validator: function(chrs, maskset, pos, strict, opts) {
                            var isValid = opts.regex.mspre.test(chrs);
                            return strict || isValid || !(isValid = opts.regex.ms.test("0" + chrs)) ? isValid : (maskset.buffer[pos] = "0", 
                            pos++, {
                                pos: pos
                            });
                        },
                        cardinality: 1
                    } ]
                },
                t: {
                    validator: function(chrs, maskset, pos, strict, opts) {
                        return opts.regex.ampm.test(chrs + "m");
                    },
                    casing: "lower",
                    cardinality: 1
                }
            },
            insertMode: !1,
            autoUnmask: !1
        },
        datetime12: {
            mask: "1/2/y h:s t\\m",
            placeholder: "dd/mm/yyyy hh:mm xm",
            alias: "datetime",
            hourFormat: "12"
        },
        "hh:mm t": {
            mask: "h:s t\\m",
            placeholder: "hh:mm xm",
            alias: "datetime",
            hourFormat: "12"
        },
        "h:s t": {
            mask: "h:s t\\m",
            placeholder: "hh:mm xm",
            alias: "datetime",
            hourFormat: "12"
        },
        "hh:mm:ss": {
            mask: "h:s:s",
            placeholder: "hh:mm:ss",
            alias: "datetime",
            autoUnmask: !1
        },
        "hh:mm": {
            mask: "h:s",
            placeholder: "hh:mm",
            alias: "datetime",
            autoUnmask: !1
        },
        date: {
            alias: "dd/mm/yyyy"
        },
        "mm/yyyy": {
            mask: "1/y",
            placeholder: "mm/yyyy",
            leapday: "donotuse",
            separator: "/",
            alias: "mm/dd/yyyy"
        }
    }), $.fn.inputmask;
});
/*!
 * Masonry PACKAGED v3.3.0
 * Cascading grid layout library
 * http://masonry.desandro.com
 * MIT License
 * by David DeSandro
 */

/**
 * Bridget makes jQuery widgets
 * v1.1.0
 * MIT license
 */

( function( window ) {



// -------------------------- utils -------------------------- //

var slice = Array.prototype.slice;

function noop() {}

// -------------------------- definition -------------------------- //

function defineBridget( $ ) {

// bail if no jQuery
if ( !$ ) {
  return;
}

// -------------------------- addOptionMethod -------------------------- //

/**
 * adds option method -> $().plugin('option', {...})
 * @param {Function} PluginClass - constructor class
 */
function addOptionMethod( PluginClass ) {
  // don't overwrite original option method
  if ( PluginClass.prototype.option ) {
    return;
  }

  // option setter
  PluginClass.prototype.option = function( opts ) {
    // bail out if not an object
    if ( !$.isPlainObject( opts ) ){
      return;
    }
    this.options = $.extend( true, this.options, opts );
  };
}

// -------------------------- plugin bridge -------------------------- //

// helper function for logging errors
// $.error breaks jQuery chaining
var logError = typeof console === 'undefined' ? noop :
  function( message ) {
    console.error( message );
  };

/**
 * jQuery plugin bridge, access methods like $elem.plugin('method')
 * @param {String} namespace - plugin name
 * @param {Function} PluginClass - constructor class
 */
function bridge( namespace, PluginClass ) {
  // add to jQuery fn namespace
  $.fn[ namespace ] = function( options ) {
    if ( typeof options === 'string' ) {
      // call plugin method when first argument is a string
      // get arguments for method
      var args = slice.call( arguments, 1 );

      for ( var i=0, len = this.length; i < len; i++ ) {
        var elem = this[i];
        var instance = $.data( elem, namespace );
        if ( !instance ) {
          logError( "cannot call methods on " + namespace + " prior to initialization; " +
            "attempted to call '" + options + "'" );
          continue;
        }
        if ( !$.isFunction( instance[options] ) || options.charAt(0) === '_' ) {
          logError( "no such method '" + options + "' for " + namespace + " instance" );
          continue;
        }

        // trigger method with arguments
        var returnValue = instance[ options ].apply( instance, args );

        // break look and return first value if provided
        if ( returnValue !== undefined ) {
          return returnValue;
        }
      }
      // return this if no return value
      return this;
    } else {
      return this.each( function() {
        var instance = $.data( this, namespace );
        if ( instance ) {
          // apply options & init
          instance.option( options );
          instance._init();
        } else {
          // initialize new instance
          instance = new PluginClass( this, options );
          $.data( this, namespace, instance );
        }
      });
    }
  };

}

// -------------------------- bridget -------------------------- //

/**
 * converts a Prototypical class into a proper jQuery plugin
 *   the class must have a ._init method
 * @param {String} namespace - plugin name, used in $().pluginName
 * @param {Function} PluginClass - constructor class
 */
$.bridget = function( namespace, PluginClass ) {
  addOptionMethod( PluginClass );
  bridge( namespace, PluginClass );
};

return $.bridget;

}

// transport
if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( 'jquery-bridget/jquery.bridget',[ 'jquery' ], defineBridget );
} else if ( typeof exports === 'object' ) {
  defineBridget( require('jquery') );
} else {
  // get jquery from browser global
  defineBridget( window.jQuery );
}

})( window );

/*!
 * eventie v1.0.6
 * event binding helper
 *   eventie.bind( elem, 'click', myFn )
 *   eventie.unbind( elem, 'click', myFn )
 * MIT license
 */

/*jshint browser: true, undef: true, unused: true */
/*global define: false, module: false */

( function( window ) {



var docElem = document.documentElement;

var bind = function() {};

function getIEEvent( obj ) {
  var event = window.event;
  // add event.target
  event.target = event.target || event.srcElement || obj;
  return event;
}

if ( docElem.addEventListener ) {
  bind = function( obj, type, fn ) {
    obj.addEventListener( type, fn, false );
  };
} else if ( docElem.attachEvent ) {
  bind = function( obj, type, fn ) {
    obj[ type + fn ] = fn.handleEvent ?
      function() {
        var event = getIEEvent( obj );
        fn.handleEvent.call( fn, event );
      } :
      function() {
        var event = getIEEvent( obj );
        fn.call( obj, event );
      };
    obj.attachEvent( "on" + type, obj[ type + fn ] );
  };
}

var unbind = function() {};

if ( docElem.removeEventListener ) {
  unbind = function( obj, type, fn ) {
    obj.removeEventListener( type, fn, false );
  };
} else if ( docElem.detachEvent ) {
  unbind = function( obj, type, fn ) {
    obj.detachEvent( "on" + type, obj[ type + fn ] );
    try {
      delete obj[ type + fn ];
    } catch ( err ) {
      // can't delete window object properties
      obj[ type + fn ] = undefined;
    }
  };
}

var eventie = {
  bind: bind,
  unbind: unbind
};

// ----- module definition ----- //

if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( 'eventie/eventie',eventie );
} else if ( typeof exports === 'object' ) {
  // CommonJS
  module.exports = eventie;
} else {
  // browser global
  window.eventie = eventie;
}

})( window );

/*!
 * EventEmitter v4.2.11 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */

;(function () {
    

    /**
     * Class for managing events.
     * Can be extended to provide event functionality in other classes.
     *
     * @class EventEmitter Manages event registering and emitting.
     */
    function EventEmitter() {}

    // Shortcuts to improve speed and size
    var proto = EventEmitter.prototype;
    var exports = this;
    var originalGlobalValue = exports.EventEmitter;

    /**
     * Finds the index of the listener for the event in its storage array.
     *
     * @param {Function[]} listeners Array of listeners to search through.
     * @param {Function} listener Method to look for.
     * @return {Number} Index of the specified listener, -1 if not found
     * @api private
     */
    function indexOfListener(listeners, listener) {
        var i = listeners.length;
        while (i--) {
            if (listeners[i].listener === listener) {
                return i;
            }
        }

        return -1;
    }

    /**
     * Alias a method while keeping the context correct, to allow for overwriting of target method.
     *
     * @param {String} name The name of the target method.
     * @return {Function} The aliased method
     * @api private
     */
    function alias(name) {
        return function aliasClosure() {
            return this[name].apply(this, arguments);
        };
    }

    /**
     * Returns the listener array for the specified event.
     * Will initialise the event object and listener arrays if required.
     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
     * Each property in the object response is an array of listener functions.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Function[]|Object} All listener functions for the event.
     */
    proto.getListeners = function getListeners(evt) {
        var events = this._getEvents();
        var response;
        var key;

        // Return a concatenated array of all matching events if
        // the selector is a regular expression.
        if (evt instanceof RegExp) {
            response = {};
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    response[key] = events[key];
                }
            }
        }
        else {
            response = events[evt] || (events[evt] = []);
        }

        return response;
    };

    /**
     * Takes a list of listener objects and flattens it into a list of listener functions.
     *
     * @param {Object[]} listeners Raw listener objects.
     * @return {Function[]} Just the listener functions.
     */
    proto.flattenListeners = function flattenListeners(listeners) {
        var flatListeners = [];
        var i;

        for (i = 0; i < listeners.length; i += 1) {
            flatListeners.push(listeners[i].listener);
        }

        return flatListeners;
    };

    /**
     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Object} All listener functions for an event in an object.
     */
    proto.getListenersAsObject = function getListenersAsObject(evt) {
        var listeners = this.getListeners(evt);
        var response;

        if (listeners instanceof Array) {
            response = {};
            response[evt] = listeners;
        }

        return response || listeners;
    };

    /**
     * Adds a listener function to the specified event.
     * The listener will not be added if it is a duplicate.
     * If the listener returns true then it will be removed after it is called.
     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListener = function addListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var listenerIsWrapped = typeof listener === 'object';
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
                listeners[key].push(listenerIsWrapped ? listener : {
                    listener: listener,
                    once: false
                });
            }
        }

        return this;
    };

    /**
     * Alias of addListener
     */
    proto.on = alias('addListener');

    /**
     * Semi-alias of addListener. It will add a listener that will be
     * automatically removed after its first execution.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addOnceListener = function addOnceListener(evt, listener) {
        return this.addListener(evt, {
            listener: listener,
            once: true
        });
    };

    /**
     * Alias of addOnceListener.
     */
    proto.once = alias('addOnceListener');

    /**
     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
     * You need to tell it what event names should be matched by a regex.
     *
     * @param {String} evt Name of the event to create.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvent = function defineEvent(evt) {
        this.getListeners(evt);
        return this;
    };

    /**
     * Uses defineEvent to define multiple events.
     *
     * @param {String[]} evts An array of event names to define.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvents = function defineEvents(evts) {
        for (var i = 0; i < evts.length; i += 1) {
            this.defineEvent(evts[i]);
        }
        return this;
    };

    /**
     * Removes a listener function from the specified event.
     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to remove the listener from.
     * @param {Function} listener Method to remove from the event.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListener = function removeListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var index;
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                index = indexOfListener(listeners[key], listener);

                if (index !== -1) {
                    listeners[key].splice(index, 1);
                }
            }
        }

        return this;
    };

    /**
     * Alias of removeListener
     */
    proto.off = alias('removeListener');

    /**
     * Adds listeners in bulk using the manipulateListeners method.
     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
     * You can also pass it a regular expression to add the array of listeners to all events that match it.
     * Yeah, this function does quite a bit. That's probably a bad thing.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListeners = function addListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(false, evt, listeners);
    };

    /**
     * Removes listeners in bulk using the manipulateListeners method.
     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be removed.
     * You can also pass it a regular expression to remove the listeners from all events that match it.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListeners = function removeListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(true, evt, listeners);
    };

    /**
     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
     * The first argument will determine if the listeners are removed (true) or added (false).
     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be added/removed.
     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
     *
     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
        var i;
        var value;
        var single = remove ? this.removeListener : this.addListener;
        var multiple = remove ? this.removeListeners : this.addListeners;

        // If evt is an object then pass each of its properties to this method
        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
            for (i in evt) {
                if (evt.hasOwnProperty(i) && (value = evt[i])) {
                    // Pass the single listener straight through to the singular method
                    if (typeof value === 'function') {
                        single.call(this, i, value);
                    }
                    else {
                        // Otherwise pass back to the multiple function
                        multiple.call(this, i, value);
                    }
                }
            }
        }
        else {
            // So evt must be a string
            // And listeners must be an array of listeners
            // Loop over it and pass each one to the multiple method
            i = listeners.length;
            while (i--) {
                single.call(this, evt, listeners[i]);
            }
        }

        return this;
    };

    /**
     * Removes all listeners from a specified event.
     * If you do not specify an event then all listeners will be removed.
     * That means every event will be emptied.
     * You can also pass a regex to remove all events that match it.
     *
     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeEvent = function removeEvent(evt) {
        var type = typeof evt;
        var events = this._getEvents();
        var key;

        // Remove different things depending on the state of evt
        if (type === 'string') {
            // Remove all listeners for the specified event
            delete events[evt];
        }
        else if (evt instanceof RegExp) {
            // Remove all events matching the regex.
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    delete events[key];
                }
            }
        }
        else {
            // Remove all listeners in all events
            delete this._events;
        }

        return this;
    };

    /**
     * Alias of removeEvent.
     *
     * Added to mirror the node API.
     */
    proto.removeAllListeners = alias('removeEvent');

    /**
     * Emits an event of your choice.
     * When emitted, every listener attached to that event will be executed.
     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
     * So they will not arrive within the array on the other side, they will be separate.
     * You can also pass a regular expression to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {Array} [args] Optional array of arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emitEvent = function emitEvent(evt, args) {
        var listeners = this.getListenersAsObject(evt);
        var listener;
        var i;
        var key;
        var response;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                i = listeners[key].length;

                while (i--) {
                    // If the listener returns true then it shall be removed from the event
                    // The function is executed either with a basic call or an apply if there is an args array
                    listener = listeners[key][i];

                    if (listener.once === true) {
                        this.removeListener(evt, listener.listener);
                    }

                    response = listener.listener.apply(this, args || []);

                    if (response === this._getOnceReturnValue()) {
                        this.removeListener(evt, listener.listener);
                    }
                }
            }
        }

        return this;
    };

    /**
     * Alias of emitEvent
     */
    proto.trigger = alias('emitEvent');

    /**
     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {...*} Optional additional arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emit = function emit(evt) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(evt, args);
    };

    /**
     * Sets the current value to check against when executing listeners. If a
     * listeners return value matches the one set here then it will be removed
     * after execution. This value defaults to true.
     *
     * @param {*} value The new value to check for when executing listeners.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.setOnceReturnValue = function setOnceReturnValue(value) {
        this._onceReturnValue = value;
        return this;
    };

    /**
     * Fetches the current value to check against when executing listeners. If
     * the listeners return value matches this one then it should be removed
     * automatically. It will return true by default.
     *
     * @return {*|Boolean} The current value to check for or the default, true.
     * @api private
     */
    proto._getOnceReturnValue = function _getOnceReturnValue() {
        if (this.hasOwnProperty('_onceReturnValue')) {
            return this._onceReturnValue;
        }
        else {
            return true;
        }
    };

    /**
     * Fetches the events object and creates one if required.
     *
     * @return {Object} The events storage object.
     * @api private
     */
    proto._getEvents = function _getEvents() {
        return this._events || (this._events = {});
    };

    /**
     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
     *
     * @return {Function} Non conflicting EventEmitter class.
     */
    EventEmitter.noConflict = function noConflict() {
        exports.EventEmitter = originalGlobalValue;
        return EventEmitter;
    };

    // Expose the class either via AMD, CommonJS or the global object
    if (typeof define === 'function' && define.amd) {
        define('eventEmitter/EventEmitter',[],function () {
            return EventEmitter;
        });
    }
    else if (typeof module === 'object' && module.exports){
        module.exports = EventEmitter;
    }
    else {
        exports.EventEmitter = EventEmitter;
    }
}.call(this));

/*!
 * getStyleProperty v1.0.4
 * original by kangax
 * http://perfectionkills.com/feature-testing-css-properties/
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true */
/*global define: false, exports: false, module: false */

( function( window ) {



var prefixes = 'Webkit Moz ms Ms O'.split(' ');
var docElemStyle = document.documentElement.style;

function getStyleProperty( propName ) {
  if ( !propName ) {
    return;
  }

  // test standard property first
  if ( typeof docElemStyle[ propName ] === 'string' ) {
    return propName;
  }

  // capitalize
  propName = propName.charAt(0).toUpperCase() + propName.slice(1);

  // test vendor specific properties
  var prefixed;
  for ( var i=0, len = prefixes.length; i < len; i++ ) {
    prefixed = prefixes[i] + propName;
    if ( typeof docElemStyle[ prefixed ] === 'string' ) {
      return prefixed;
    }
  }
}

// transport
if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( 'get-style-property/get-style-property',[],function() {
    return getStyleProperty;
  });
} else if ( typeof exports === 'object' ) {
  // CommonJS for Component
  module.exports = getStyleProperty;
} else {
  // browser global
  window.getStyleProperty = getStyleProperty;
}

})( window );

/*!
 * getSize v1.2.2
 * measure size of elements
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true */
/*global define: false, exports: false, require: false, module: false, console: false */

( function( window, undefined ) {



// -------------------------- helpers -------------------------- //

// get a number from a string, not a percentage
function getStyleSize( value ) {
  var num = parseFloat( value );
  // not a percent like '100%', and a number
  var isValid = value.indexOf('%') === -1 && !isNaN( num );
  return isValid && num;
}

function noop() {}

var logError = typeof console === 'undefined' ? noop :
  function( message ) {
    console.error( message );
  };

// -------------------------- measurements -------------------------- //

var measurements = [
  'paddingLeft',
  'paddingRight',
  'paddingTop',
  'paddingBottom',
  'marginLeft',
  'marginRight',
  'marginTop',
  'marginBottom',
  'borderLeftWidth',
  'borderRightWidth',
  'borderTopWidth',
  'borderBottomWidth'
];

function getZeroSize() {
  var size = {
    width: 0,
    height: 0,
    innerWidth: 0,
    innerHeight: 0,
    outerWidth: 0,
    outerHeight: 0
  };
  for ( var i=0, len = measurements.length; i < len; i++ ) {
    var measurement = measurements[i];
    size[ measurement ] = 0;
  }
  return size;
}



function defineGetSize( getStyleProperty ) {

// -------------------------- setup -------------------------- //

var isSetup = false;

var getStyle, boxSizingProp, isBoxSizeOuter;

/**
 * setup vars and functions
 * do it on initial getSize(), rather than on script load
 * For Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=548397
 */
function setup() {
  // setup once
  if ( isSetup ) {
    return;
  }
  isSetup = true;

  var getComputedStyle = window.getComputedStyle;
  getStyle = ( function() {
    var getStyleFn = getComputedStyle ?
      function( elem ) {
        return getComputedStyle( elem, null );
      } :
      function( elem ) {
        return elem.currentStyle;
      };

      return function getStyle( elem ) {
        var style = getStyleFn( elem );
        if ( !style ) {
          logError( 'Style returned ' + style +
            '. Are you running this code in a hidden iframe on Firefox? ' +
            'See http://bit.ly/getsizebug1' );
        }
        return style;
      };
  })();

  // -------------------------- box sizing -------------------------- //

  boxSizingProp = getStyleProperty('boxSizing');

  /**
   * WebKit measures the outer-width on style.width on border-box elems
   * IE & Firefox measures the inner-width
   */
  if ( boxSizingProp ) {
    var div = document.createElement('div');
    div.style.width = '200px';
    div.style.padding = '1px 2px 3px 4px';
    div.style.borderStyle = 'solid';
    div.style.borderWidth = '1px 2px 3px 4px';
    div.style[ boxSizingProp ] = 'border-box';

    var body = document.body || document.documentElement;
    body.appendChild( div );
    var style = getStyle( div );

    isBoxSizeOuter = getStyleSize( style.width ) === 200;
    body.removeChild( div );
  }

}

// -------------------------- getSize -------------------------- //

function getSize( elem ) {
  setup();

  // use querySeletor if elem is string
  if ( typeof elem === 'string' ) {
    elem = document.querySelector( elem );
  }

  // do not proceed on non-objects
  if ( !elem || typeof elem !== 'object' || !elem.nodeType ) {
    return;
  }

  var style = getStyle( elem );

  // if hidden, everything is 0
  if ( style.display === 'none' ) {
    return getZeroSize();
  }

  var size = {};
  size.width = elem.offsetWidth;
  size.height = elem.offsetHeight;

  var isBorderBox = size.isBorderBox = !!( boxSizingProp &&
    style[ boxSizingProp ] && style[ boxSizingProp ] === 'border-box' );

  // get all measurements
  for ( var i=0, len = measurements.length; i < len; i++ ) {
    var measurement = measurements[i];
    var value = style[ measurement ];
    value = mungeNonPixel( elem, value );
    var num = parseFloat( value );
    // any 'auto', 'medium' value will be 0
    size[ measurement ] = !isNaN( num ) ? num : 0;
  }

  var paddingWidth = size.paddingLeft + size.paddingRight;
  var paddingHeight = size.paddingTop + size.paddingBottom;
  var marginWidth = size.marginLeft + size.marginRight;
  var marginHeight = size.marginTop + size.marginBottom;
  var borderWidth = size.borderLeftWidth + size.borderRightWidth;
  var borderHeight = size.borderTopWidth + size.borderBottomWidth;

  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;

  // overwrite width and height if we can get it from style
  var styleWidth = getStyleSize( style.width );
  if ( styleWidth !== false ) {
    size.width = styleWidth +
      // add padding and border unless it's already including it
      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );
  }

  var styleHeight = getStyleSize( style.height );
  if ( styleHeight !== false ) {
    size.height = styleHeight +
      // add padding and border unless it's already including it
      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );
  }

  size.innerWidth = size.width - ( paddingWidth + borderWidth );
  size.innerHeight = size.height - ( paddingHeight + borderHeight );

  size.outerWidth = size.width + marginWidth;
  size.outerHeight = size.height + marginHeight;

  return size;
}

// IE8 returns percent values, not pixels
// taken from jQuery's curCSS
function mungeNonPixel( elem, value ) {
  // IE8 and has percent value
  if ( window.getComputedStyle || value.indexOf('%') === -1 ) {
    return value;
  }
  var style = elem.style;
  // Remember the original values
  var left = style.left;
  var rs = elem.runtimeStyle;
  var rsLeft = rs && rs.left;

  // Put in the new values to get a computed value out
  if ( rsLeft ) {
    rs.left = elem.currentStyle.left;
  }
  style.left = value;
  value = style.pixelLeft;

  // Revert the changed values
  style.left = left;
  if ( rsLeft ) {
    rs.left = rsLeft;
  }

  return value;
}

return getSize;

}

// transport
if ( typeof define === 'function' && define.amd ) {
  // AMD for RequireJS
  define( 'get-size/get-size',[ 'get-style-property/get-style-property' ], defineGetSize );
} else if ( typeof exports === 'object' ) {
  // CommonJS for Component
  module.exports = defineGetSize( require('desandro-get-style-property') );
} else {
  // browser global
  window.getSize = defineGetSize( window.getStyleProperty );
}

})( window );

/*!
 * docReady v1.0.4
 * Cross browser DOMContentLoaded event emitter
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true*/
/*global define: false, require: false, module: false */

( function( window ) {



var document = window.document;
// collection of functions to be triggered on ready
var queue = [];

function docReady( fn ) {
  // throw out non-functions
  if ( typeof fn !== 'function' ) {
    return;
  }

  if ( docReady.isReady ) {
    // ready now, hit it
    fn();
  } else {
    // queue function when ready
    queue.push( fn );
  }
}

docReady.isReady = false;

// triggered on various doc ready events
function onReady( event ) {
  // bail if already triggered or IE8 document is not ready just yet
  var isIE8NotReady = event.type === 'readystatechange' && document.readyState !== 'complete';
  if ( docReady.isReady || isIE8NotReady ) {
    return;
  }

  trigger();
}

function trigger() {
  docReady.isReady = true;
  // process queue
  for ( var i=0, len = queue.length; i < len; i++ ) {
    var fn = queue[i];
    fn();
  }
}

function defineDocReady( eventie ) {
  // trigger ready if page is ready
  if ( document.readyState === 'complete' ) {
    trigger();
  } else {
    // listen for events
    eventie.bind( document, 'DOMContentLoaded', onReady );
    eventie.bind( document, 'readystatechange', onReady );
    eventie.bind( window, 'load', onReady );
  }

  return docReady;
}

// transport
if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( 'doc-ready/doc-ready',[ 'eventie/eventie' ], defineDocReady );
} else if ( typeof exports === 'object' ) {
  module.exports = defineDocReady( require('eventie') );
} else {
  // browser global
  window.docReady = defineDocReady( window.eventie );
}

})( window );

/**
 * matchesSelector v1.0.3
 * matchesSelector( element, '.selector' )
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true */
/*global define: false, module: false */

( function( ElemProto ) {

  

  var matchesMethod = ( function() {
    // check for the standard method name first
    if ( ElemProto.matches ) {
      return 'matches';
    }
    // check un-prefixed
    if ( ElemProto.matchesSelector ) {
      return 'matchesSelector';
    }
    // check vendor prefixes
    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];

    for ( var i=0, len = prefixes.length; i < len; i++ ) {
      var prefix = prefixes[i];
      var method = prefix + 'MatchesSelector';
      if ( ElemProto[ method ] ) {
        return method;
      }
    }
  })();

  // ----- match ----- //

  function match( elem, selector ) {
    return elem[ matchesMethod ]( selector );
  }

  // ----- appendToFragment ----- //

  function checkParent( elem ) {
    // not needed if already has parent
    if ( elem.parentNode ) {
      return;
    }
    var fragment = document.createDocumentFragment();
    fragment.appendChild( elem );
  }

  // ----- query ----- //

  // fall back to using QSA
  // thx @jonathantneal https://gist.github.com/3062955
  function query( elem, selector ) {
    // append to fragment if no parent
    checkParent( elem );

    // match elem with all selected elems of parent
    var elems = elem.parentNode.querySelectorAll( selector );
    for ( var i=0, len = elems.length; i < len; i++ ) {
      // return true if match
      if ( elems[i] === elem ) {
        return true;
      }
    }
    // otherwise return false
    return false;
  }

  // ----- matchChild ----- //

  function matchChild( elem, selector ) {
    checkParent( elem );
    return match( elem, selector );
  }

  // ----- matchesSelector ----- //

  var matchesSelector;

  if ( matchesMethod ) {
    // IE9 supports matchesSelector, but doesn't work on orphaned elems
    // check for that
    var div = document.createElement('div');
    var supportsOrphans = match( div, 'div' );
    matchesSelector = supportsOrphans ? match : matchChild;
  } else {
    matchesSelector = query;
  }

  // transport
  if ( typeof define === 'function' && define.amd ) {
    // AMD
    define( 'matches-selector/matches-selector',[],function() {
      return matchesSelector;
    });
  } else if ( typeof exports === 'object' ) {
    module.exports = matchesSelector;
  }
  else {
    // browser global
    window.matchesSelector = matchesSelector;
  }

})( Element.prototype );

/**
 * Fizzy UI utils v1.0.1
 * MIT license
 */

/*jshint browser: true, undef: true, unused: true, strict: true */

( function( window, factory ) {
  /*global define: false, module: false, require: false */
  
  // universal module definition

  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( 'fizzy-ui-utils/utils',[
      'doc-ready/doc-ready',
      'matches-selector/matches-selector'
    ], function( docReady, matchesSelector ) {
      return factory( window, docReady, matchesSelector );
    });
  } else if ( typeof exports == 'object' ) {
    // CommonJS
    module.exports = factory(
      window,
      require('doc-ready'),
      require('desandro-matches-selector')
    );
  } else {
    // browser global
    window.fizzyUIUtils = factory(
      window,
      window.docReady,
      window.matchesSelector
    );
  }

}( window, function factory( window, docReady, matchesSelector ) {



var utils = {};

// ----- extend ----- //

// extends objects
utils.extend = function( a, b ) {
  for ( var prop in b ) {
    a[ prop ] = b[ prop ];
  }
  return a;
};

// ----- modulo ----- //

utils.modulo = function( num, div ) {
  return ( ( num % div ) + div ) % div;
};

// ----- isArray ----- //
  
var objToString = Object.prototype.toString;
utils.isArray = function( obj ) {
  return objToString.call( obj ) == '[object Array]';
};

// ----- makeArray ----- //

// turn element or nodeList into an array
utils.makeArray = function( obj ) {
  var ary = [];
  if ( utils.isArray( obj ) ) {
    // use object if already an array
    ary = obj;
  } else if ( obj && typeof obj.length == 'number' ) {
    // convert nodeList to array
    for ( var i=0, len = obj.length; i < len; i++ ) {
      ary.push( obj[i] );
    }
  } else {
    // array of single index
    ary.push( obj );
  }
  return ary;
};

// ----- indexOf ----- //

// index of helper cause IE8
utils.indexOf = Array.prototype.indexOf ? function( ary, obj ) {
    return ary.indexOf( obj );
  } : function( ary, obj ) {
    for ( var i=0, len = ary.length; i < len; i++ ) {
      if ( ary[i] === obj ) {
        return i;
      }
    }
    return -1;
  };

// ----- removeFrom ----- //

utils.removeFrom = function( ary, obj ) {
  var index = utils.indexOf( ary, obj );
  if ( index != -1 ) {
    ary.splice( index, 1 );
  }
};

// ----- isElement ----- //

// http://stackoverflow.com/a/384380/182183
utils.isElement = ( typeof HTMLElement == 'function' || typeof HTMLElement == 'object' ) ?
  function isElementDOM2( obj ) {
    return obj instanceof HTMLElement;
  } :
  function isElementQuirky( obj ) {
    return obj && typeof obj == 'object' &&
      obj.nodeType == 1 && typeof obj.nodeName == 'string';
  };

// ----- setText ----- //

utils.setText = ( function() {
  var setTextProperty;
  function setText( elem, text ) {
    // only check setTextProperty once
    setTextProperty = setTextProperty || ( document.documentElement.textContent !== undefined ? 'textContent' : 'innerText' );
    elem[ setTextProperty ] = text;
  }
  return setText;
})();

// ----- getParent ----- //

utils.getParent = function( elem, selector ) {
  while ( elem != document.body ) {
    elem = elem.parentNode;
    if ( matchesSelector( elem, selector ) ) {
      return elem;
    }
  }
};

// ----- getQueryElement ----- //

// use element as selector string
utils.getQueryElement = function( elem ) {
  if ( typeof elem == 'string' ) {
    return document.querySelector( elem );
  }
  return elem;
};

// ----- handleEvent ----- //

// enable .ontype to trigger from .addEventListener( elem, 'type' )
utils.handleEvent = function( event ) {
  var method = 'on' + event.type;
  if ( this[ method ] ) {
    this[ method ]( event );
  }
};

// ----- filterFindElements ----- //

utils.filterFindElements = function( elems, selector ) {
  // make array of elems
  elems = utils.makeArray( elems );
  var ffElems = [];

  for ( var i=0, len = elems.length; i < len; i++ ) {
    var elem = elems[i];
    // check that elem is an actual element
    if ( !utils.isElement( elem ) ) {
      continue;
    }
    // filter & find items if we have a selector
    if ( selector ) {
      // filter siblings
      if ( matchesSelector( elem, selector ) ) {
        ffElems.push( elem );
      }
      // find children
      var childElems = elem.querySelectorAll( selector );
      // concat childElems to filterFound array
      for ( var j=0, jLen = childElems.length; j < jLen; j++ ) {
        ffElems.push( childElems[j] );
      }
    } else {
      ffElems.push( elem );
    }
  }

  return ffElems;
};

// ----- debounceMethod ----- //

utils.debounceMethod = function( _class, methodName, threshold ) {
  // original method
  var method = _class.prototype[ methodName ];
  var timeoutName = methodName + 'Timeout';

  _class.prototype[ methodName ] = function() {
    var timeout = this[ timeoutName ];
    if ( timeout ) {
      clearTimeout( timeout );
    }
    var args = arguments;

    var _this = this;
    this[ timeoutName ] = setTimeout( function() {
      method.apply( _this, args );
      delete _this[ timeoutName ];
    }, threshold || 100 );
  };
};

// ----- htmlInit ----- //

// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
utils.toDashed = function( str ) {
  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {
    return $1 + '-' + $2;
  }).toLowerCase();
};

var console = window.console;
/**
 * allow user to initialize classes via .js-namespace class
 * htmlInit( Widget, 'widgetName' )
 * options are parsed from data-namespace-option attribute
 */
utils.htmlInit = function( WidgetClass, namespace ) {
  docReady( function() {
    var dashedNamespace = utils.toDashed( namespace );
    var elems = document.querySelectorAll( '.js-' + dashedNamespace );
    var dataAttr = 'data-' + dashedNamespace + '-options';

    for ( var i=0, len = elems.length; i < len; i++ ) {
      var elem = elems[i];
      var attr = elem.getAttribute( dataAttr );
      var options;
      try {
        options = attr && JSON.parse( attr );
      } catch ( error ) {
        // log error, do not initialize
        if ( console ) {
          console.error( 'Error parsing ' + dataAttr + ' on ' +
            elem.nodeName.toLowerCase() + ( elem.id ? '#' + elem.id : '' ) + ': ' +
            error );
        }
        continue;
      }
      // initialize
      var instance = new WidgetClass( elem, options );
      // make available via $().data('layoutname')
      var jQuery = window.jQuery;
      if ( jQuery ) {
        jQuery.data( elem, namespace, instance );
      }
    }
  });
};

// -----  ----- //

return utils;

}));

/**
 * Outlayer Item
 */

( function( window, factory ) {
  
  // universal module definition
  if ( typeof define === 'function' && define.amd ) {
    // AMD
    define( 'outlayer/item',[
        'eventEmitter/EventEmitter',
        'get-size/get-size',
        'get-style-property/get-style-property',
        'fizzy-ui-utils/utils'
      ],
      function( EventEmitter, getSize, getStyleProperty, utils ) {
        return factory( window, EventEmitter, getSize, getStyleProperty, utils );
      }
    );
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = factory(
      window,
      require('wolfy87-eventemitter'),
      require('get-size'),
      require('desandro-get-style-property'),
      require('fizzy-ui-utils')
    );
  } else {
    // browser global
    window.Outlayer = {};
    window.Outlayer.Item = factory(
      window,
      window.EventEmitter,
      window.getSize,
      window.getStyleProperty,
      window.fizzyUIUtils
    );
  }

}( window, function factory( window, EventEmitter, getSize, getStyleProperty, utils ) {


// ----- helpers ----- //

var getComputedStyle = window.getComputedStyle;
var getStyle = getComputedStyle ?
  function( elem ) {
    return getComputedStyle( elem, null );
  } :
  function( elem ) {
    return elem.currentStyle;
  };


function isEmptyObj( obj ) {
  for ( var prop in obj ) {
    return false;
  }
  prop = null;
  return true;
}

// -------------------------- CSS3 support -------------------------- //

var transitionProperty = getStyleProperty('transition');
var transformProperty = getStyleProperty('transform');
var supportsCSS3 = transitionProperty && transformProperty;
var is3d = !!getStyleProperty('perspective');

var transitionEndEvent = {
  WebkitTransition: 'webkitTransitionEnd',
  MozTransition: 'transitionend',
  OTransition: 'otransitionend',
  transition: 'transitionend'
}[ transitionProperty ];

// properties that could have vendor prefix
var prefixableProperties = [
  'transform',
  'transition',
  'transitionDuration',
  'transitionProperty'
];

// cache all vendor properties
var vendorProperties = ( function() {
  var cache = {};
  for ( var i=0, len = prefixableProperties.length; i < len; i++ ) {
    var prop = prefixableProperties[i];
    var supportedProp = getStyleProperty( prop );
    if ( supportedProp && supportedProp !== prop ) {
      cache[ prop ] = supportedProp;
    }
  }
  return cache;
})();

// -------------------------- Item -------------------------- //

function Item( element, layout ) {
  if ( !element ) {
    return;
  }

  this.element = element;
  // parent layout class, i.e. Masonry, Isotope, or Packery
  this.layout = layout;
  this.position = {
    x: 0,
    y: 0
  };

  this._create();
}

// inherit EventEmitter
utils.extend( Item.prototype, EventEmitter.prototype );

Item.prototype._create = function() {
  // transition objects
  this._transn = {
    ingProperties: {},
    clean: {},
    onEnd: {}
  };

  this.css({
    position: 'absolute'
  });
};

// trigger specified handler for event type
Item.prototype.handleEvent = function( event ) {
  var method = 'on' + event.type;
  if ( this[ method ] ) {
    this[ method ]( event );
  }
};

Item.prototype.getSize = function() {
  this.size = getSize( this.element );
};

/**
 * apply CSS styles to element
 * @param {Object} style
 */
Item.prototype.css = function( style ) {
  var elemStyle = this.element.style;

  for ( var prop in style ) {
    // use vendor property if available
    var supportedProp = vendorProperties[ prop ] || prop;
    elemStyle[ supportedProp ] = style[ prop ];
  }
};

 // measure position, and sets it
Item.prototype.getPosition = function() {
  var style = getStyle( this.element );
  var layoutOptions = this.layout.options;
  var isOriginLeft = layoutOptions.isOriginLeft;
  var isOriginTop = layoutOptions.isOriginTop;
  var x = parseInt( style[ isOriginLeft ? 'left' : 'right' ], 10 );
  var y = parseInt( style[ isOriginTop ? 'top' : 'bottom' ], 10 );

  // clean up 'auto' or other non-integer values
  x = isNaN( x ) ? 0 : x;
  y = isNaN( y ) ? 0 : y;
  // remove padding from measurement
  var layoutSize = this.layout.size;
  x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;
  y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;

  this.position.x = x;
  this.position.y = y;
};

// set settled position, apply padding
Item.prototype.layoutPosition = function() {
  var layoutSize = this.layout.size;
  var layoutOptions = this.layout.options;
  var style = {};

  // x
  var xPadding = layoutOptions.isOriginLeft ? 'paddingLeft' : 'paddingRight';
  var xProperty = layoutOptions.isOriginLeft ? 'left' : 'right';
  var xResetProperty = layoutOptions.isOriginLeft ? 'right' : 'left';

  var x = this.position.x + layoutSize[ xPadding ];
  // set in percentage
  x = layoutOptions.percentPosition && !layoutOptions.isHorizontal ?
    ( ( x / layoutSize.width ) * 100 ) + '%' : x + 'px';
  style[ xProperty ] = x;
  // reset other property
  style[ xResetProperty ] = '';

  // y
  var yPadding = layoutOptions.isOriginTop ? 'paddingTop' : 'paddingBottom';
  var yProperty = layoutOptions.isOriginTop ? 'top' : 'bottom';
  var yResetProperty = layoutOptions.isOriginTop ? 'bottom' : 'top';

  var y = this.position.y + layoutSize[ yPadding ];
  // set in percentage
  y = layoutOptions.percentPosition && layoutOptions.isHorizontal ?
    ( ( y / layoutSize.height ) * 100 ) + '%' : y + 'px';
  style[ yProperty ] = y;
  // reset other property
  style[ yResetProperty ] = '';

  this.css( style );
  this.emitEvent( 'layout', [ this ] );
};


// transform translate function
var translate = is3d ?
  function( x, y ) {
    return 'translate3d(' + x + 'px, ' + y + 'px, 0)';
  } :
  function( x, y ) {
    return 'translate(' + x + 'px, ' + y + 'px)';
  };


Item.prototype._transitionTo = function( x, y ) {
  this.getPosition();
  // get current x & y from top/left
  var curX = this.position.x;
  var curY = this.position.y;

  var compareX = parseInt( x, 10 );
  var compareY = parseInt( y, 10 );
  var didNotMove = compareX === this.position.x && compareY === this.position.y;

  // save end position
  this.setPosition( x, y );

  // if did not move and not transitioning, just go to layout
  if ( didNotMove && !this.isTransitioning ) {
    this.layoutPosition();
    return;
  }

  var transX = x - curX;
  var transY = y - curY;
  var transitionStyle = {};
  // flip cooridinates if origin on right or bottom
  var layoutOptions = this.layout.options;
  transX = layoutOptions.isOriginLeft ? transX : -transX;
  transY = layoutOptions.isOriginTop ? transY : -transY;
  transitionStyle.transform = translate( transX, transY );

  this.transition({
    to: transitionStyle,
    onTransitionEnd: {
      transform: this.layoutPosition
    },
    isCleaning: true
  });
};

// non transition + transform support
Item.prototype.goTo = function( x, y ) {
  this.setPosition( x, y );
  this.layoutPosition();
};

// use transition and transforms if supported
Item.prototype.moveTo = supportsCSS3 ?
  Item.prototype._transitionTo : Item.prototype.goTo;

Item.prototype.setPosition = function( x, y ) {
  this.position.x = parseInt( x, 10 );
  this.position.y = parseInt( y, 10 );
};

// ----- transition ----- //

/**
 * @param {Object} style - CSS
 * @param {Function} onTransitionEnd
 */

// non transition, just trigger callback
Item.prototype._nonTransition = function( args ) {
  this.css( args.to );
  if ( args.isCleaning ) {
    this._removeStyles( args.to );
  }
  for ( var prop in args.onTransitionEnd ) {
    args.onTransitionEnd[ prop ].call( this );
  }
};

/**
 * proper transition
 * @param {Object} args - arguments
 *   @param {Object} to - style to transition to
 *   @param {Object} from - style to start transition from
 *   @param {Boolean} isCleaning - removes transition styles after transition
 *   @param {Function} onTransitionEnd - callback
 */
Item.prototype._transition = function( args ) {
  // redirect to nonTransition if no transition duration
  if ( !parseFloat( this.layout.options.transitionDuration ) ) {
    this._nonTransition( args );
    return;
  }

  var _transition = this._transn;
  // keep track of onTransitionEnd callback by css property
  for ( var prop in args.onTransitionEnd ) {
    _transition.onEnd[ prop ] = args.onTransitionEnd[ prop ];
  }
  // keep track of properties that are transitioning
  for ( prop in args.to ) {
    _transition.ingProperties[ prop ] = true;
    // keep track of properties to clean up when transition is done
    if ( args.isCleaning ) {
      _transition.clean[ prop ] = true;
    }
  }

  // set from styles
  if ( args.from ) {
    this.css( args.from );
    // force redraw. http://blog.alexmaccaw.com/css-transitions
    var h = this.element.offsetHeight;
    // hack for JSHint to hush about unused var
    h = null;
  }
  // enable transition
  this.enableTransition( args.to );
  // set styles that are transitioning
  this.css( args.to );

  this.isTransitioning = true;

};

var itemTransitionProperties = transformProperty && ( utils.toDashed( transformProperty ) +
  ',opacity' );

Item.prototype.enableTransition = function(/* style */) {
  // only enable if not already transitioning
  // bug in IE10 were re-setting transition style will prevent
  // transitionend event from triggering
  if ( this.isTransitioning ) {
    return;
  }

  // make transition: foo, bar, baz from style object
  // TODO uncomment this bit when IE10 bug is resolved
  // var transitionValue = [];
  // for ( var prop in style ) {
  //   // dash-ify camelCased properties like WebkitTransition
  //   transitionValue.push( toDash( prop ) );
  // }
  // enable transition styles
  // HACK always enable transform,opacity for IE10
  this.css({
    transitionProperty: itemTransitionProperties,
    transitionDuration: this.layout.options.transitionDuration
  });
  // listen for transition end event
  this.element.addEventListener( transitionEndEvent, this, false );
};

Item.prototype.transition = Item.prototype[ transitionProperty ? '_transition' : '_nonTransition' ];

// ----- events ----- //

Item.prototype.onwebkitTransitionEnd = function( event ) {
  this.ontransitionend( event );
};

Item.prototype.onotransitionend = function( event ) {
  this.ontransitionend( event );
};

// properties that I munge to make my life easier
var dashedVendorProperties = {
  '-webkit-transform': 'transform',
  '-moz-transform': 'transform',
  '-o-transform': 'transform'
};

Item.prototype.ontransitionend = function( event ) {
  // disregard bubbled events from children
  if ( event.target !== this.element ) {
    return;
  }
  var _transition = this._transn;
  // get property name of transitioned property, convert to prefix-free
  var propertyName = dashedVendorProperties[ event.propertyName ] || event.propertyName;

  // remove property that has completed transitioning
  delete _transition.ingProperties[ propertyName ];
  // check if any properties are still transitioning
  if ( isEmptyObj( _transition.ingProperties ) ) {
    // all properties have completed transitioning
    this.disableTransition();
  }
  // clean style
  if ( propertyName in _transition.clean ) {
    // clean up style
    this.element.style[ event.propertyName ] = '';
    delete _transition.clean[ propertyName ];
  }
  // trigger onTransitionEnd callback
  if ( propertyName in _transition.onEnd ) {
    var onTransitionEnd = _transition.onEnd[ propertyName ];
    onTransitionEnd.call( this );
    delete _transition.onEnd[ propertyName ];
  }

  this.emitEvent( 'transitionEnd', [ this ] );
};

Item.prototype.disableTransition = function() {
  this.removeTransitionStyles();
  this.element.removeEventListener( transitionEndEvent, this, false );
  this.isTransitioning = false;
};

/**
 * removes style property from element
 * @param {Object} style
**/
Item.prototype._removeStyles = function( style ) {
  // clean up transition styles
  var cleanStyle = {};
  for ( var prop in style ) {
    cleanStyle[ prop ] = '';
  }
  this.css( cleanStyle );
};

var cleanTransitionStyle = {
  transitionProperty: '',
  transitionDuration: ''
};

Item.prototype.removeTransitionStyles = function() {
  // remove transition
  this.css( cleanTransitionStyle );
};

// ----- show/hide/remove ----- //

// remove element from DOM
Item.prototype.removeElem = function() {
  this.element.parentNode.removeChild( this.element );
  // remove display: none
  this.css({ display: '' });
  this.emitEvent( 'remove', [ this ] );
};

Item.prototype.remove = function() {
  // just remove element if no transition support or no transition
  if ( !transitionProperty || !parseFloat( this.layout.options.transitionDuration ) ) {
    this.removeElem();
    return;
  }

  // start transition
  var _this = this;
  this.once( 'transitionEnd', function() {
    _this.removeElem();
  });
  this.hide();
};

Item.prototype.reveal = function() {
  delete this.isHidden;
  // remove display: none
  this.css({ display: '' });

  var options = this.layout.options;

  var onTransitionEnd = {};
  var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');
  onTransitionEnd[ transitionEndProperty ] = this.onRevealTransitionEnd;

  this.transition({
    from: options.hiddenStyle,
    to: options.visibleStyle,
    isCleaning: true,
    onTransitionEnd: onTransitionEnd
  });
};

Item.prototype.onRevealTransitionEnd = function() {
  // check if still visible
  // during transition, item may have been hidden
  if ( !this.isHidden ) {
    this.emitEvent('reveal');
  }
};

/**
 * get style property use for hide/reveal transition end
 * @param {String} styleProperty - hiddenStyle/visibleStyle
 * @returns {String}
 */
Item.prototype.getHideRevealTransitionEndProperty = function( styleProperty ) {
  var optionStyle = this.layout.options[ styleProperty ];
  // use opacity
  if ( optionStyle.opacity ) {
    return 'opacity';
  }
  // get first property
  for ( var prop in optionStyle ) {
    return prop;
  }
};

Item.prototype.hide = function() {
  // set flag
  this.isHidden = true;
  // remove display: none
  this.css({ display: '' });

  var options = this.layout.options;

  var onTransitionEnd = {};
  var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');
  onTransitionEnd[ transitionEndProperty ] = this.onHideTransitionEnd;

  this.transition({
    from: options.visibleStyle,
    to: options.hiddenStyle,
    // keep hidden stuff hidden
    isCleaning: true,
    onTransitionEnd: onTransitionEnd
  });
};

Item.prototype.onHideTransitionEnd = function() {
  // check if still hidden
  // during transition, item may have been un-hidden
  if ( this.isHidden ) {
    this.css({ display: 'none' });
    this.emitEvent('hide');
  }
};

Item.prototype.destroy = function() {
  this.css({
    position: '',
    left: '',
    right: '',
    top: '',
    bottom: '',
    transition: '',
    transform: ''
  });
};

return Item;

}));

/*!
 * Outlayer v1.4.0
 * the brains and guts of a layout library
 * MIT license
 */

( function( window, factory ) {
  
  // universal module definition

  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( 'outlayer/outlayer',[
        'eventie/eventie',
        'eventEmitter/EventEmitter',
        'get-size/get-size',
        'fizzy-ui-utils/utils',
        './item'
      ],
      function( eventie, EventEmitter, getSize, utils, Item ) {
        return factory( window, eventie, EventEmitter, getSize, utils, Item);
      }
    );
  } else if ( typeof exports == 'object' ) {
    // CommonJS
    module.exports = factory(
      window,
      require('eventie'),
      require('wolfy87-eventemitter'),
      require('get-size'),
      require('fizzy-ui-utils'),
      require('./item')
    );
  } else {
    // browser global
    window.Outlayer = factory(
      window,
      window.eventie,
      window.EventEmitter,
      window.getSize,
      window.fizzyUIUtils,
      window.Outlayer.Item
    );
  }

}( window, function factory( window, eventie, EventEmitter, getSize, utils, Item ) {


// ----- vars ----- //

var console = window.console;
var jQuery = window.jQuery;
var noop = function() {};

// -------------------------- Outlayer -------------------------- //

// globally unique identifiers
var GUID = 0;
// internal store of all Outlayer intances
var instances = {};


/**
 * @param {Element, String} element
 * @param {Object} options
 * @constructor
 */
function Outlayer( element, options ) {
  var queryElement = utils.getQueryElement( element );
  if ( !queryElement ) {
    if ( console ) {
      console.error( 'Bad element for ' + this.constructor.namespace +
        ': ' + ( queryElement || element ) );
    }
    return;
  }
  this.element = queryElement;
  // add jQuery
  if ( jQuery ) {
    this.$element = jQuery( this.element );
  }

  // options
  this.options = utils.extend( {}, this.constructor.defaults );
  this.option( options );

  // add id for Outlayer.getFromElement
  var id = ++GUID;
  this.element.outlayerGUID = id; // expando
  instances[ id ] = this; // associate via id

  // kick it off
  this._create();

  if ( this.options.isInitLayout ) {
    this.layout();
  }
}

// settings are for internal use only
Outlayer.namespace = 'outlayer';
Outlayer.Item = Item;

// default options
Outlayer.defaults = {
  containerStyle: {
    position: 'relative'
  },
  isInitLayout: true,
  isOriginLeft: true,
  isOriginTop: true,
  isResizeBound: true,
  isResizingContainer: true,
  // item options
  transitionDuration: '0.4s',
  hiddenStyle: {
    opacity: 0,
    transform: 'scale(0.001)'
  },
  visibleStyle: {
    opacity: 1,
    transform: 'scale(1)'
  }
};

// inherit EventEmitter
utils.extend( Outlayer.prototype, EventEmitter.prototype );

/**
 * set options
 * @param {Object} opts
 */
Outlayer.prototype.option = function( opts ) {
  utils.extend( this.options, opts );
};

Outlayer.prototype._create = function() {
  // get items from children
  this.reloadItems();
  // elements that affect layout, but are not laid out
  this.stamps = [];
  this.stamp( this.options.stamp );
  // set container style
  utils.extend( this.element.style, this.options.containerStyle );

  // bind resize method
  if ( this.options.isResizeBound ) {
    this.bindResize();
  }
};

// goes through all children again and gets bricks in proper order
Outlayer.prototype.reloadItems = function() {
  // collection of item elements
  this.items = this._itemize( this.element.children );
};


/**
 * turn elements into Outlayer.Items to be used in layout
 * @param {Array or NodeList or HTMLElement} elems
 * @returns {Array} items - collection of new Outlayer Items
 */
Outlayer.prototype._itemize = function( elems ) {

  var itemElems = this._filterFindItemElements( elems );
  var Item = this.constructor.Item;

  // create new Outlayer Items for collection
  var items = [];
  for ( var i=0, len = itemElems.length; i < len; i++ ) {
    var elem = itemElems[i];
    var item = new Item( elem, this );
    items.push( item );
  }

  return items;
};

/**
 * get item elements to be used in layout
 * @param {Array or NodeList or HTMLElement} elems
 * @returns {Array} items - item elements
 */
Outlayer.prototype._filterFindItemElements = function( elems ) {
  return utils.filterFindElements( elems, this.options.itemSelector );
};

/**
 * getter method for getting item elements
 * @returns {Array} elems - collection of item elements
 */
Outlayer.prototype.getItemElements = function() {
  var elems = [];
  for ( var i=0, len = this.items.length; i < len; i++ ) {
    elems.push( this.items[i].element );
  }
  return elems;
};

// ----- init & layout ----- //

/**
 * lays out all items
 */
Outlayer.prototype.layout = function() {
  this._resetLayout();
  this._manageStamps();

  // don't animate first layout
  var isInstant = this.options.isLayoutInstant !== undefined ?
    this.options.isLayoutInstant : !this._isLayoutInited;
  this.layoutItems( this.items, isInstant );

  // flag for initalized
  this._isLayoutInited = true;
};

// _init is alias for layout
Outlayer.prototype._init = Outlayer.prototype.layout;

/**
 * logic before any new layout
 */
Outlayer.prototype._resetLayout = function() {
  this.getSize();
};


Outlayer.prototype.getSize = function() {
  this.size = getSize( this.element );
};

/**
 * get measurement from option, for columnWidth, rowHeight, gutter
 * if option is String -> get element from selector string, & get size of element
 * if option is Element -> get size of element
 * else use option as a number
 *
 * @param {String} measurement
 * @param {String} size - width or height
 * @private
 */
Outlayer.prototype._getMeasurement = function( measurement, size ) {
  var option = this.options[ measurement ];
  var elem;
  if ( !option ) {
    // default to 0
    this[ measurement ] = 0;
  } else {
    // use option as an element
    if ( typeof option === 'string' ) {
      elem = this.element.querySelector( option );
    } else if ( utils.isElement( option ) ) {
      elem = option;
    }
    // use size of element, if element
    this[ measurement ] = elem ? getSize( elem )[ size ] : option;
  }
};

/**
 * layout a collection of item elements
 * @api public
 */
Outlayer.prototype.layoutItems = function( items, isInstant ) {
  items = this._getItemsForLayout( items );

  this._layoutItems( items, isInstant );

  this._postLayout();
};

/**
 * get the items to be laid out
 * you may want to skip over some items
 * @param {Array} items
 * @returns {Array} items
 */
Outlayer.prototype._getItemsForLayout = function( items ) {
  var layoutItems = [];
  for ( var i=0, len = items.length; i < len; i++ ) {
    var item = items[i];
    if ( !item.isIgnored ) {
      layoutItems.push( item );
    }
  }
  return layoutItems;
};

/**
 * layout items
 * @param {Array} items
 * @param {Boolean} isInstant
 */
Outlayer.prototype._layoutItems = function( items, isInstant ) {
  this._emitCompleteOnItems( 'layout', items );

  if ( !items || !items.length ) {
    // no items, emit event with empty array
    return;
  }

  var queue = [];

  for ( var i=0, len = items.length; i < len; i++ ) {
    var item = items[i];
    // get x/y object from method
    var position = this._getItemLayoutPosition( item );
    // enqueue
    position.item = item;
    position.isInstant = isInstant || item.isLayoutInstant;
    queue.push( position );
  }

  this._processLayoutQueue( queue );
};

/**
 * get item layout position
 * @param {Outlayer.Item} item
 * @returns {Object} x and y position
 */
Outlayer.prototype._getItemLayoutPosition = function( /* item */ ) {
  return {
    x: 0,
    y: 0
  };
};

/**
 * iterate over array and position each item
 * Reason being - separating this logic prevents 'layout invalidation'
 * thx @paul_irish
 * @param {Array} queue
 */
Outlayer.prototype._processLayoutQueue = function( queue ) {
  for ( var i=0, len = queue.length; i < len; i++ ) {
    var obj = queue[i];
    this._positionItem( obj.item, obj.x, obj.y, obj.isInstant );
  }
};

/**
 * Sets position of item in DOM
 * @param {Outlayer.Item} item
 * @param {Number} x - horizontal position
 * @param {Number} y - vertical position
 * @param {Boolean} isInstant - disables transitions
 */
Outlayer.prototype._positionItem = function( item, x, y, isInstant ) {
  if ( isInstant ) {
    // if not transition, just set CSS
    item.goTo( x, y );
  } else {
    item.moveTo( x, y );
  }
};

/**
 * Any logic you want to do after each layout,
 * i.e. size the container
 */
Outlayer.prototype._postLayout = function() {
  this.resizeContainer();
};

Outlayer.prototype.resizeContainer = function() {
  if ( !this.options.isResizingContainer ) {
    return;
  }
  var size = this._getContainerSize();
  if ( size ) {
    this._setContainerMeasure( size.width, true );
    this._setContainerMeasure( size.height, false );
  }
};

/**
 * Sets width or height of container if returned
 * @returns {Object} size
 *   @param {Number} width
 *   @param {Number} height
 */
Outlayer.prototype._getContainerSize = noop;

/**
 * @param {Number} measure - size of width or height
 * @param {Boolean} isWidth
 */
Outlayer.prototype._setContainerMeasure = function( measure, isWidth ) {
  if ( measure === undefined ) {
    return;
  }

  var elemSize = this.size;
  // add padding and border width if border box
  if ( elemSize.isBorderBox ) {
    measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +
      elemSize.borderLeftWidth + elemSize.borderRightWidth :
      elemSize.paddingBottom + elemSize.paddingTop +
      elemSize.borderTopWidth + elemSize.borderBottomWidth;
  }

  measure = Math.max( measure, 0 );
  this.element.style[ isWidth ? 'width' : 'height' ] = measure + 'px';
};

/**
 * emit eventComplete on a collection of items events
 * @param {String} eventName
 * @param {Array} items - Outlayer.Items
 */
Outlayer.prototype._emitCompleteOnItems = function( eventName, items ) {
  var _this = this;
  function onComplete() {
    _this.emitEvent( eventName + 'Complete', [ items ] );
  }

  var count = items.length;
  if ( !items || !count ) {
    onComplete();
    return;
  }

  var doneCount = 0;
  function tick() {
    doneCount++;
    if ( doneCount === count ) {
      onComplete();
    }
  }

  // bind callback
  for ( var i=0, len = items.length; i < len; i++ ) {
    var item = items[i];
    item.once( eventName, tick );
  }
};

// -------------------------- ignore & stamps -------------------------- //


/**
 * keep item in collection, but do not lay it out
 * ignored items do not get skipped in layout
 * @param {Element} elem
 */
Outlayer.prototype.ignore = function( elem ) {
  var item = this.getItem( elem );
  if ( item ) {
    item.isIgnored = true;
  }
};

/**
 * return item to layout collection
 * @param {Element} elem
 */
Outlayer.prototype.unignore = function( elem ) {
  var item = this.getItem( elem );
  if ( item ) {
    delete item.isIgnored;
  }
};

/**
 * adds elements to stamps
 * @param {NodeList, Array, Element, or String} elems
 */
Outlayer.prototype.stamp = function( elems ) {
  elems = this._find( elems );
  if ( !elems ) {
    return;
  }

  this.stamps = this.stamps.concat( elems );
  // ignore
  for ( var i=0, len = elems.length; i < len; i++ ) {
    var elem = elems[i];
    this.ignore( elem );
  }
};

/**
 * removes elements to stamps
 * @param {NodeList, Array, or Element} elems
 */
Outlayer.prototype.unstamp = function( elems ) {
  elems = this._find( elems );
  if ( !elems ){
    return;
  }

  for ( var i=0, len = elems.length; i < len; i++ ) {
    var elem = elems[i];
    // filter out removed stamp elements
    utils.removeFrom( this.stamps, elem );
    this.unignore( elem );
  }

};

/**
 * finds child elements
 * @param {NodeList, Array, Element, or String} elems
 * @returns {Array} elems
 */
Outlayer.prototype._find = function( elems ) {
  if ( !elems ) {
    return;
  }
  // if string, use argument as selector string
  if ( typeof elems === 'string' ) {
    elems = this.element.querySelectorAll( elems );
  }
  elems = utils.makeArray( elems );
  return elems;
};

Outlayer.prototype._manageStamps = function() {
  if ( !this.stamps || !this.stamps.length ) {
    return;
  }

  this._getBoundingRect();

  for ( var i=0, len = this.stamps.length; i < len; i++ ) {
    var stamp = this.stamps[i];
    this._manageStamp( stamp );
  }
};

// update boundingLeft / Top
Outlayer.prototype._getBoundingRect = function() {
  // get bounding rect for container element
  var boundingRect = this.element.getBoundingClientRect();
  var size = this.size;
  this._boundingRect = {
    left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,
    top: boundingRect.top + size.paddingTop + size.borderTopWidth,
    right: boundingRect.right - ( size.paddingRight + size.borderRightWidth ),
    bottom: boundingRect.bottom - ( size.paddingBottom + size.borderBottomWidth )
  };
};

/**
 * @param {Element} stamp
**/
Outlayer.prototype._manageStamp = noop;

/**
 * get x/y position of element relative to container element
 * @param {Element} elem
 * @returns {Object} offset - has left, top, right, bottom
 */
Outlayer.prototype._getElementOffset = function( elem ) {
  var boundingRect = elem.getBoundingClientRect();
  var thisRect = this._boundingRect;
  var size = getSize( elem );
  var offset = {
    left: boundingRect.left - thisRect.left - size.marginLeft,
    top: boundingRect.top - thisRect.top - size.marginTop,
    right: thisRect.right - boundingRect.right - size.marginRight,
    bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom
  };
  return offset;
};

// -------------------------- resize -------------------------- //

// enable event handlers for listeners
// i.e. resize -> onresize
Outlayer.prototype.handleEvent = function( event ) {
  var method = 'on' + event.type;
  if ( this[ method ] ) {
    this[ method ]( event );
  }
};

/**
 * Bind layout to window resizing
 */
Outlayer.prototype.bindResize = function() {
  // bind just one listener
  if ( this.isResizeBound ) {
    return;
  }
  eventie.bind( window, 'resize', this );
  this.isResizeBound = true;
};

/**
 * Unbind layout to window resizing
 */
Outlayer.prototype.unbindResize = function() {
  if ( this.isResizeBound ) {
    eventie.unbind( window, 'resize', this );
  }
  this.isResizeBound = false;
};

// original debounce by John Hann
// http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/

// this fires every resize
Outlayer.prototype.onresize = function() {
  if ( this.resizeTimeout ) {
    clearTimeout( this.resizeTimeout );
  }

  var _this = this;
  function delayed() {
    _this.resize();
    delete _this.resizeTimeout;
  }

  this.resizeTimeout = setTimeout( delayed, 100 );
};

// debounced, layout on resize
Outlayer.prototype.resize = function() {
  // don't trigger if size did not change
  // or if resize was unbound. See #9
  if ( !this.isResizeBound || !this.needsResizeLayout() ) {
    return;
  }

  this.layout();
};

/**
 * check if layout is needed post layout
 * @returns Boolean
 */
Outlayer.prototype.needsResizeLayout = function() {
  var size = getSize( this.element );
  // check that this.size and size are there
  // IE8 triggers resize on body size change, so they might not be
  var hasSizes = this.size && size;
  return hasSizes && size.innerWidth !== this.size.innerWidth;
};

// -------------------------- methods -------------------------- //

/**
 * add items to Outlayer instance
 * @param {Array or NodeList or Element} elems
 * @returns {Array} items - Outlayer.Items
**/
Outlayer.prototype.addItems = function( elems ) {
  var items = this._itemize( elems );
  // add items to collection
  if ( items.length ) {
    this.items = this.items.concat( items );
  }
  return items;
};

/**
 * Layout newly-appended item elements
 * @param {Array or NodeList or Element} elems
 */
Outlayer.prototype.appended = function( elems ) {
  var items = this.addItems( elems );
  if ( !items.length ) {
    return;
  }
  // layout and reveal just the new items
  this.layoutItems( items, true );
  this.reveal( items );
};

/**
 * Layout prepended elements
 * @param {Array or NodeList or Element} elems
 */
Outlayer.prototype.prepended = function( elems ) {
  var items = this._itemize( elems );
  if ( !items.length ) {
    return;
  }
  // add items to beginning of collection
  var previousItems = this.items.slice(0);
  this.items = items.concat( previousItems );
  // start new layout
  this._resetLayout();
  this._manageStamps();
  // layout new stuff without transition
  this.layoutItems( items, true );
  this.reveal( items );
  // layout previous items
  this.layoutItems( previousItems );
};

/**
 * reveal a collection of items
 * @param {Array of Outlayer.Items} items
 */
Outlayer.prototype.reveal = function( items ) {
  this._emitCompleteOnItems( 'reveal', items );

  var len = items && items.length;
  for ( var i=0; len && i < len; i++ ) {
    var item = items[i];
    item.reveal();
  }
};

/**
 * hide a collection of items
 * @param {Array of Outlayer.Items} items
 */
Outlayer.prototype.hide = function( items ) {
  this._emitCompleteOnItems( 'hide', items );

  var len = items && items.length;
  for ( var i=0; len && i < len; i++ ) {
    var item = items[i];
    item.hide();
  }
};

/**
 * reveal item elements
 * @param {Array}, {Element}, {NodeList} items
 */
Outlayer.prototype.revealItemElements = function( elems ) {
  var items = this.getItems( elems );
  this.reveal( items );
};

/**
 * hide item elements
 * @param {Array}, {Element}, {NodeList} items
 */
Outlayer.prototype.hideItemElements = function( elems ) {
  var items = this.getItems( elems );
  this.hide( items );
};

/**
 * get Outlayer.Item, given an Element
 * @param {Element} elem
 * @param {Function} callback
 * @returns {Outlayer.Item} item
 */
Outlayer.prototype.getItem = function( elem ) {
  // loop through items to get the one that matches
  for ( var i=0, len = this.items.length; i < len; i++ ) {
    var item = this.items[i];
    if ( item.element === elem ) {
      // return item
      return item;
    }
  }
};

/**
 * get collection of Outlayer.Items, given Elements
 * @param {Array} elems
 * @returns {Array} items - Outlayer.Items
 */
Outlayer.prototype.getItems = function( elems ) {
  elems = utils.makeArray( elems );
  var items = [];
  for ( var i=0, len = elems.length; i < len; i++ ) {
    var elem = elems[i];
    var item = this.getItem( elem );
    if ( item ) {
      items.push( item );
    }
  }

  return items;
};

/**
 * remove element(s) from instance and DOM
 * @param {Array or NodeList or Element} elems
 */
Outlayer.prototype.remove = function( elems ) {
  var removeItems = this.getItems( elems );

  this._emitCompleteOnItems( 'remove', removeItems );

  // bail if no items to remove
  if ( !removeItems || !removeItems.length ) {
    return;
  }

  for ( var i=0, len = removeItems.length; i < len; i++ ) {
    var item = removeItems[i];
    item.remove();
    // remove item from collection
    utils.removeFrom( this.items, item );
  }
};

// ----- destroy ----- //

// remove and disable Outlayer instance
Outlayer.prototype.destroy = function() {
  // clean up dynamic styles
  var style = this.element.style;
  style.height = '';
  style.position = '';
  style.width = '';
  // destroy items
  for ( var i=0, len = this.items.length; i < len; i++ ) {
    var item = this.items[i];
    item.destroy();
  }

  this.unbindResize();

  var id = this.element.outlayerGUID;
  delete instances[ id ]; // remove reference to instance by id
  delete this.element.outlayerGUID;
  // remove data for jQuery
  if ( jQuery ) {
    jQuery.removeData( this.element, this.constructor.namespace );
  }

};

// -------------------------- data -------------------------- //

/**
 * get Outlayer instance from element
 * @param {Element} elem
 * @returns {Outlayer}
 */
Outlayer.data = function( elem ) {
  elem = utils.getQueryElement( elem );
  var id = elem && elem.outlayerGUID;
  return id && instances[ id ];
};


// -------------------------- create Outlayer class -------------------------- //

/**
 * create a layout class
 * @param {String} namespace
 */
Outlayer.create = function( namespace, options ) {
  // sub-class Outlayer
  function Layout() {
    Outlayer.apply( this, arguments );
  }
  // inherit Outlayer prototype, use Object.create if there
  if ( Object.create ) {
    Layout.prototype = Object.create( Outlayer.prototype );
  } else {
    utils.extend( Layout.prototype, Outlayer.prototype );
  }
  // set contructor, used for namespace and Item
  Layout.prototype.constructor = Layout;

  Layout.defaults = utils.extend( {}, Outlayer.defaults );
  // apply new options
  utils.extend( Layout.defaults, options );
  // keep prototype.settings for backwards compatibility (Packery v1.2.0)
  Layout.prototype.settings = {};

  Layout.namespace = namespace;

  Layout.data = Outlayer.data;

  // sub-class Item
  Layout.Item = function LayoutItem() {
    Item.apply( this, arguments );
  };

  Layout.Item.prototype = new Item();

  // -------------------------- declarative -------------------------- //

  utils.htmlInit( Layout, namespace );

  // -------------------------- jQuery bridge -------------------------- //

  // make into jQuery plugin
  if ( jQuery && jQuery.bridget ) {
    jQuery.bridget( namespace, Layout );
  }

  return Layout;
};

// ----- fin ----- //

// back in global
Outlayer.Item = Item;

return Outlayer;

}));


/*!
 * Masonry v3.3.0
 * Cascading grid layout library
 * http://masonry.desandro.com
 * MIT License
 * by David DeSandro
 */

( function( window, factory ) {
  
  // universal module definition
  if ( typeof define === 'function' && define.amd ) {
    // AMD
    define( [
        'outlayer/outlayer',
        'get-size/get-size',
        'fizzy-ui-utils/utils'
      ],
      factory );
  } else if ( typeof exports === 'object' ) {
    // CommonJS
    module.exports = factory(
      require('outlayer'),
      require('get-size'),
      require('fizzy-ui-utils')
    );
  } else {
    // browser global
    window.Masonry = factory(
      window.Outlayer,
      window.getSize,
      window.fizzyUIUtils
    );
  }

}( window, function factory( Outlayer, getSize, utils ) {



// -------------------------- masonryDefinition -------------------------- //

  // create an Outlayer layout class
  var Masonry = Outlayer.create('masonry');

  Masonry.prototype._resetLayout = function() {
    this.getSize();
    this._getMeasurement( 'columnWidth', 'outerWidth' );
    this._getMeasurement( 'gutter', 'outerWidth' );
    this.measureColumns();

    // reset column Y
    var i = this.cols;
    this.colYs = [];
    while (i--) {
      this.colYs.push( 0 );
    }

    this.maxY = 0;
  };

  Masonry.prototype.measureColumns = function() {
    this.getContainerWidth();
    // if columnWidth is 0, default to outerWidth of first item
    if ( !this.columnWidth ) {
      var firstItem = this.items[0];
      var firstItemElem = firstItem && firstItem.element;
      // columnWidth fall back to item of first element
      this.columnWidth = firstItemElem && getSize( firstItemElem ).outerWidth ||
        // if first elem has no width, default to size of container
        this.containerWidth;
    }

    var columnWidth = this.columnWidth += this.gutter;

    // calculate columns
    var containerWidth = this.containerWidth + this.gutter;
    var cols = containerWidth / columnWidth;
    // fix rounding errors, typically with gutters
    var excess = columnWidth - containerWidth % columnWidth;
    // if overshoot is less than a pixel, round up, otherwise floor it
    var mathMethod = excess && excess < 1 ? 'round' : 'floor';
    cols = Math[ mathMethod ]( cols );
    this.cols = Math.max( cols, 1 );
  };

  Masonry.prototype.getContainerWidth = function() {
    // container is parent if fit width
    var container = this.options.isFitWidth ? this.element.parentNode : this.element;
    // check that this.size and size are there
    // IE8 triggers resize on body size change, so they might not be
    var size = getSize( container );
    this.containerWidth = size && size.innerWidth;
  };

  Masonry.prototype._getItemLayoutPosition = function( item ) {
    item.getSize();
    // how many columns does this brick span
    var remainder = item.size.outerWidth % this.columnWidth;
    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';
    // round if off by 1 pixel, otherwise use ceil
    var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );
    colSpan = Math.min( colSpan, this.cols );

    var colGroup = this._getColGroup( colSpan );
    // get the minimum Y value from the columns
    var minimumY = Math.min.apply( Math, colGroup );
    var shortColIndex = utils.indexOf( colGroup, minimumY );

    // position the brick
    var position = {
      x: this.columnWidth * shortColIndex,
      y: minimumY
    };

    // apply setHeight to necessary columns
    var setHeight = minimumY + item.size.outerHeight;
    var setSpan = this.cols + 1 - colGroup.length;
    for ( var i = 0; i < setSpan; i++ ) {
      this.colYs[ shortColIndex + i ] = setHeight;
    }

    return position;
  };

  /**
   * @param {Number} colSpan - number of columns the element spans
   * @returns {Array} colGroup
   */
  Masonry.prototype._getColGroup = function( colSpan ) {
    if ( colSpan < 2 ) {
      // if brick spans only one column, use all the column Ys
      return this.colYs;
    }

    var colGroup = [];
    // how many different places could this brick fit horizontally
    var groupCount = this.cols + 1 - colSpan;
    // for each group potential horizontal position
    for ( var i = 0; i < groupCount; i++ ) {
      // make an array of colY values for that one group
      var groupColYs = this.colYs.slice( i, i + colSpan );
      // and get the max value of the array
      colGroup[i] = Math.max.apply( Math, groupColYs );
    }
    return colGroup;
  };

  Masonry.prototype._manageStamp = function( stamp ) {
    var stampSize = getSize( stamp );
    var offset = this._getElementOffset( stamp );
    // get the columns that this stamp affects
    var firstX = this.options.isOriginLeft ? offset.left : offset.right;
    var lastX = firstX + stampSize.outerWidth;
    var firstCol = Math.floor( firstX / this.columnWidth );
    firstCol = Math.max( 0, firstCol );
    var lastCol = Math.floor( lastX / this.columnWidth );
    // lastCol should not go over if multiple of columnWidth #425
    lastCol -= lastX % this.columnWidth ? 0 : 1;
    lastCol = Math.min( this.cols - 1, lastCol );
    // set colYs to bottom of the stamp
    var stampMaxY = ( this.options.isOriginTop ? offset.top : offset.bottom ) +
      stampSize.outerHeight;
    for ( var i = firstCol; i <= lastCol; i++ ) {
      this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );
    }
  };

  Masonry.prototype._getContainerSize = function() {
    this.maxY = Math.max.apply( Math, this.colYs );
    var size = {
      height: this.maxY
    };

    if ( this.options.isFitWidth ) {
      size.width = this._getContainerFitWidth();
    }

    return size;
  };

  Masonry.prototype._getContainerFitWidth = function() {
    var unusedCols = 0;
    // count unused columns
    var i = this.cols;
    while ( --i ) {
      if ( this.colYs[i] !== 0 ) {
        break;
      }
      unusedCols++;
    }
    // fit container to columns that have been used
    return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;
  };

  Masonry.prototype.needsResizeLayout = function() {
    var previousWidth = this.containerWidth;
    this.getContainerWidth();
    return previousWidth !== this.containerWidth;
  };

  return Masonry;

}));


;(function($) {

    // Server side
    if (typeof window == 'undefined') {
        return;
    }

    var prefixes = {
            'transform': 'transform',
            'WebkitTransform': '-webkit-transform',
            'MozTransform': '-moz-transform',
            'msTransform': '-ms-transform',
            'OTransform': '-o-transform'
        },
        data = [],
        evt = getSupportedEvents(),
        handlers = [],
        params;

    var methods = {
        init: function(options) {
            var blockPrefix = 'photor__';

            params = $.extend({

                // Elements
                control:     blockPrefix + 'viewportControl',
                next:        blockPrefix + 'viewportControlNext',
                prev:        blockPrefix + 'viewportControlPrev',
                thumbs:      blockPrefix + 'thumbs',
                thumbsLayer: blockPrefix + 'thumbsWrap',
                thumb:       blockPrefix + 'thumbsWrapItem',
                thumbImg:    blockPrefix + 'thumbsWrapItemImg',
                thumbFrame:  blockPrefix + 'thumbsWrapFrame',
                viewport:    blockPrefix + 'viewport',
                layer:       blockPrefix + 'viewportLayer',
                slide:       blockPrefix + 'viewportLayerSlide',
                slideImg:    blockPrefix + 'viewportLayerSlideImg',

                // State modifiers
                _loading: '_loading',       // Фотография загружается
                _error: '_error',           // Не удалось загрузить фотографию
                _current: '_current',       // Текущий слайд или миниатюра
                _dragging: '_dragging',     // Перетаскивание
                _disabled: '_disabled',     // Элемент управления запрещен
                _alt: '_alt',               // Есть подпись к фотографиям
                _single: '_single',         // Модификатор для галереи с одной фотографией
                _animated: '_animated',     // На время анимации
                _hidden: '_hidden',         // Спрятанный слайд
                _html: '_html',             // Слайд с html-содержимым
                _freeze: '_freeze',         // Галерея "заморожена"

                // Algorithm
                _auto: '_auto',             // Фотография больше вьюпорта
                _center: '_center',         // Фотография меньше вьюпорта

                // Orientation
                _portrait: '_portrait',     // Соотношение ширины к высоте фотографии меньше чем у вьюпорта
                _landscape: '_landscape',   // Соотношение ширины к высоте фотографии больше чем у вьюпорта

                // Thumbs
                _draggable: '_draggable',   // Разрешено перетаскивание на миниатюрах

                // Settings
                single: false,              // Инициализировать обработчики для одиночного изображения
                current: 0,                 // Текуший слайд
                count: 0,                   // Количество фотографий
                last: -1,                   // Индекс последней фотографии
                duration: 300,                 // Время анимации для слайдов
                loop: false,                // Зациклить галерею
                showThumbs: 'thumbs',       // thumbs / dots / null
                keyboard: true,             // Управление с клавиатуры
                modifierPrefix: '_',        // Префикс для класса с номером слайда
                ieClassPrefix: '_ie',       // Префикс для класса с версией IE
                slidesOnScreen: 1,          // Количество видимых слайдов во вьюпорте

                // Supported features
                transform: getSupportedTransform(),
                transition: getPrefixed('transition'),

                ie: ie()

            }, options);

            return this.each(function() {
                var root = $(this),
                    galleryId = this.id || data.length,
                    p = {}, // Current instance of gallery
                    content = {},
                    thumbs = [],
                    imageTemplate = {
                        url: '',
                        thumb: '',
                        caption: '',
                        width: 0,
                        height: 0,
                        loaded: false,
                        classes: ''
                    },
                    hasHTML = false;

                // Disable double init
                if (root.attr('data-photor-id')) {
                    // galleryId = this.dataset.photorId;
                    return;
                }

                p.params = $.extend({}, params);

                // Get elements
                p.root        = root;
                p.control     = root.find('.' + p.params.control);
                p.next        = root.find('.' + p.params.next);
                p.prev        = root.find('.' + p.params.prev);
                p.thumbs      = root.find('.' + p.params.thumbs);
                p.thumbsLayer = root.find('.' + p.params.thumbsLayer);
                p.viewport    = root.find('.' + p.params.viewport);
                p.layer       = root.find('.' + p.params.layer);

                // Data collection
                p.slides = [];

                // Initialization by object
                if (p.params.data && p.params.data.length) {

                    for (var i = 0, len = p.params.data.length; i < len; i++) {
                        p.slides.push($.extend({}, imageTemplate, p.params.data[i]));
                    }

                // Initialization by slides
                } else {

                    var slides = root.find('.' + p.params.layer + ' > *');

                    if (slides.length) {
                        slides.each(function() {
                            var isPhoto = this.nodeName == 'IMG';

                            if (isPhoto) {
                                p.slides.push($.extend({}, imageTemplate, {
                                    url: this.src,
                                    caption: this.alt,
                                    thumb: $(this).data('thumb'),
                                    classes: this.className
                                }));
                            } else {
                                hasHTML = true;

                                p.slides.push($.extend({}, imageTemplate, {
                                    html: this.outerHTML,
                                    loaded: true
                                }));
                            }
                        });
                    }

                }

                if (hasHTML && p.params.showThumbs == 'thumbs') {
                    p.params.showThumbs = 'dots';
                }

                if (p.params.slidesOnScreen != 1) {
                    p.params.showThumbs = null;
                }

                // Build DOM
                content = methods.getHTML(p.params, p.slides);

                p._layerDOM = p.layer[0].innerHTML;
                p._thumbsLayerDOM = p.thumbsLayer[0].innerHTML;

                p.layer.html(content.slides);
                p.thumbsLayer.html(content.thumbs);

                // Get builded elements
                p.thumb       = root.find('.' + p.params.thumb);
                p.thumbImg    = root.find('.' + p.params.thumbImg);
                p.thumbFrame  = root.find('.' + p.params.thumbFrame);
                p.slide       = root.find('.' + p.params.slide);
                p.slideImg    = root.find('.' + p.params.slideImg);

                p.slide.each(function(i) {
                    $(this).css('left', i * 100 + '%');
                });

                // Settings
                p.current = p.params.current;
                p.count = p.slides.length;
                p.last = p.count - 1;
                p.thumbsDragging = false;
                p.thumbsIndent = 0;
                p.events = [];

                if (window.getComputedStyle) {
                    p.viewportWidth = parseFloat(window.getComputedStyle(p.viewport[0]).width);
                } else {
                    p.viewportWidth = p.viewport.outerWidth();
                }
                p.viewportHeight = p.viewport.outerHeight();
                p.thumbsWidth = p.thumbs.outerWidth();
                p.thumbsHeight = p.thumbs.outerHeight();

                data[galleryId] = p;
                root.attr('data-photor-id', galleryId);

                if (p.params.showThumbs) {
                    root.addClass(p.params.modifierPrefix + p.params.showThumbs);
                }

                if (p.params.ie) {
                    root.addClass(p.params.ieClassPrefix + p.params.ie);
                }

                if (p.slides.length == 1) {
                    root.addClass(p.params._single);
                }

                if (p.params.showThumbs == 'thumbs') {
                    methods.loadThumbs(galleryId);
                }

                if (p.slides.length > 1 || p.params.single) {
                    methods.handlers(galleryId);
                }

                methods.go(galleryId, p.current, 0);
                callback(galleryId);
            });
        },

        update: function() {
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    updateInstance(key);
                }
            }

            function updateInstance(galleryId) {
                var p = data[galleryId];

                if (window.getComputedStyle) {
                    p.viewportWidth = parseFloat(window.getComputedStyle(p.viewport[0]).width);
                } else {
                    p.viewportWidth = p.viewport.outerWidth();
                }
                p.viewportHeight = p.viewport.outerHeight();
                p.thumbsWidth = p.thumbs.outerWidth();
                p.thumbsHeight = p.thumbs.outerHeight();
                p.thumbsLayerWidth = p.thumbsLayer.outerWidth();

                p.slide.each(function(i) {
                    methods.position(galleryId, i);
                });

                if (p.params.showThumbs == 'thumbs') {
                    methods.getThumbsSize(galleryId);
                }

                p.layer
                    .css('transition-duration', '0s')
                    .css(methods.setIndent(galleryId, -100 * p.current));
            }
        },

        destroy: function(galleryId) {

            if (typeof galleryId != 'undefined') {
                destroyInstance(galleryId);
            } else {
                for (var key in data) {
                    if (data.hasOwnProperty(key)) {
                        destroyInstance(key);
                    }
                }
            }


            /*
             * Удалить обработчики для указанного инстанса галереи и вернуть DOM к изначальному состоянию
             *
             * @param {string|number} galleryId Id галереи (ключ для массива с объектами инстансов галереи)
             */
            function destroyInstance(id) {
                var p = data[id];

                for (var i = 0, len = p.events.length; i < len; i++) {
                    eventManager(p.events[i].element, p.events[i].event, p.events[i].handler, p.events[i].capture, 1);
                }

                // Clear DOM
                p.layer[0].innerHTML = p._layerDOM;
                p.thumbsLayer[0].innerHTML = p._thumbsLayerDOM;

                // Clear DOM attributes
                p.layer.attr('style', '');
                p.root.removeAttr('data-photor-id');
            }
        },

        handlers: function(galleryId) {
            var p = data[galleryId];

            bindControl(galleryId);
            bindResize(galleryId);
            bindTransitionEnd(galleryId);

            if (p.params.keyboard) {
                bindKeyboard(galleryId);
            }

            for (var i = 0, len = p.events.length; i < len; i++) {
                eventManager(p.events[i].element, p.events[i].event, p.events[i].handler, p.events[i].capture);
            }
        },

        go: function(galleryId, target, duration) {
            var p = data[galleryId];

            if (p.freeze) {
                return;
            }

            toggleSlides(galleryId, target);

            duration = duration == null ? p.params.duration : duration;

            p.root.addClass(p.params._animated);

            p.layer
                .css('transition-duration', duration + 'ms')
                // .css(methods.setIndent(galleryId, -target * p.viewportWidth));
                .css(methods.setIndent(galleryId, -target * (p.viewportWidth / p.params.slidesOnScreen), 'px'));

            p.current = target;

            // Load slide's range
            methods.loadSlides(galleryId, target);
            methods.checkButtons(galleryId);

            // Mark slide and thumb as current
            methods.setCurrentThumb(galleryId, target);

            p.slide.removeClass(p.params._current);
            p.slide
                .filter('.' + p.params.modifierPrefix + target)
                .addClass(p.params._current);

            if (!p.params.transition) {
                callback(galleryId);
            }

        },

        next: function(galleryId) {
            var p = data[galleryId];

            if (p.current + p.params.slidesOnScreen - 1 < p.last) {
                methods.go(galleryId, p.current + 1);
            } else {
                methods.go(galleryId, p.params.loop ? 0 : p.current);
            }
        },

        prev: function(galleryId) {
            var p = data[galleryId];

            if (p.current > 0) {
                methods.go(galleryId, p.current - 1);
            } else {
                methods.go(galleryId, p.params.loop ? p.last : 0);
            }
        },

        loadSlides: function(galleryId, target) {
            var p = data[galleryId],
                onScreen = p.params.slidesOnScreen,
                from = target - onScreen < 0 ? 0 : target - onScreen,
                to = target + (onScreen * 2) - 1 > p.last ? p.last : target + (onScreen * 2) - 1;

            for (var i = from; i <= to; i++) {
                if (p.slides[i] && !p.slides[i].loaded) {
                    methods.loadSlide(galleryId, i);
                }
            }
        },

        loadSlide: function(galleryId, target) {
            var p = data[galleryId],
                slide = p.root.find('.' + p.params.slide + '.' + p.params.modifierPrefix + target),
                slideImg = slide.find('.' + p.params.slideImg),
                alt = p.slides[target].caption;

            loadImage(p.slides[target].url, function(success, url) {
                if (success) {
                    p.slides[target].loaded = true;
                    p.slides[target].width = this.width;
                    p.slides[target].height = this.height;

                    methods.position(galleryId, target);

                    slide.removeClass(p.params._loading);

                    if (p.params.ie && p.params.ie < 9) {
                        slideImg.attr('src', url);
                    } else {
                        slideImg.css('background-image', 'url(' + url + ')');
                    }
                } else {
                    slide.removeClass(p.params._loading);
                    slide.addClass(p.params._error);

                    $.error('Image wasn\'t loaded: ' + url);
                }
            });

            if (alt) {
                slideImg
                    .addClass(p.params._alt)
                    .attr('data-alt', alt);
            }
        },

        loadThumbs: function(galleryId) {
            var p = data[galleryId],
                count = p.count,
                images = p.slides,
                loaded = 0;

            p.galleryThumbs = [];
            p.galleryThumbsLoaded = false;

            for (var i = 0; i < count; i++) {
                loadImage(images[i].thumb, function(success, url) {
                    if (success) {
                        loaded++;

                        if (loaded == count) {
                            p.galleryThumbsLoaded = true;
                            methods.getThumbsSize(galleryId);
                        }
                    } else {
                        $.error('Image wasn\'t loaded: ' + url);
                    }
                });
            }
        },

        getThumbsSize: function(galleryId) {
            var p = data[galleryId],
                thumb = p.thumb;

            thumb.each(function(i) {
                var self = $(this);

                p.galleryThumbs[i] = {};
                p.galleryThumbs[i].width = self.outerWidth();
                p.galleryThumbs[i].height = self.outerHeight();
                p.galleryThumbs[i].top = self.position().top + parseInt(self.css('margin-top'));
                p.galleryThumbs[i].left = self.position().left + parseInt(self.css('margin-left'));
            });

            p.thumbsLayerWidth = p.thumbsLayer.outerWidth();

            methods.setCurrentThumb(galleryId, p.current, 1);
        },

        setCurrentThumb: function(galleryId, target, noEffects) {
            var p = data[galleryId];

            if (p.params.showThumbs == 'thumbs') {
                var frame = p.thumbFrame,
                    styles = {},
                    current = p.galleryThumbs && p.galleryThumbs[target],
                    thumbsW = p.thumbs.outerWidth(),
                    layerW = p.thumbsLayer.outerWidth(),
                    duration = noEffects ? '0s' : (p.params.duration * 0.8 / 1000) + 's',
                    indent,
                    validatedIndent;

                p.thumbsDragging = thumbsW < layerW;

                if (p.galleryThumbsLoaded) {
                    styles.width = current.width + 'px';
                    styles.height = current.height + 'px';

                    if (p.params.transform) {
                        var property = prefixes[p.params.transform.property];

                        if (p.params.transform.has3d) {
                            styles[property] = 'translate3d(' + current.left + 'px, ' + current.top + 'px, 0)';
                        } else {
                            styles[property] = 'translateX(' + current.left + 'px) translateY(' + current.top + 'px)';
                        }
                    } else {
                        styles.top = current.top + 'px';
                        styles.left = current.left + 'px';
                    }

                    indent = (thumbsW - current.width) * 0.5 - current.left;
                    validatedIndent = validateIndent(indent);
                    p.thumbsIndent = validatedIndent;

                    frame
                        .css('transition-duration', duration)
                        .css(styles);

                    p.thumbsLayer
                        .css('transition-duration', duration)
                        .css(methods.setIndent(galleryId, validatedIndent, 'px'));
                }
            }

            p.thumb.removeClass(p.params._current);
            p.thumb
                .filter('.' + p.params.modifierPrefix + target)
                .addClass(p.params._current);

            /*
             * Validates recommended indent (inscribes layer into the container correctly)
             *
             * @param {number} indent of layer in the container
             * @returns {number} Correct indent
             */
            function validateIndent(indent) {
                if (indent > 0 || !p.thumbsDragging) {
                    return 0;
                }

                var limit = thumbsW - layerW;

                return indent < limit ? limit : indent;
            }

        },

        position: function(galleryId, target) {
            var p = data[galleryId],
                slide = p.root.find('.' + p.params.slide + '.' + p.params.modifierPrefix + target),
                img = p.slides[target],
                viewportRatio = p.viewportWidth / p.viewportHeight,
                imgRatio = img.width / img.height;

            // Algorithm
            if (p.viewportWidth > img.width && p.viewportHeight > img.height) {
                p.slides[target].algorithm = 'center';
                slide
                    .removeClass(p.params._auto)
                    .addClass(p.params._center);
            } else {
                p.slides[target].algorithm = 'auto';
                slide
                    .removeClass(p.params._center)
                    .addClass(p.params._auto);
            }

            // Orientation
            if (imgRatio >= viewportRatio) {
                p.slides[target].orientation = 'landscape';
                slide
                    .removeClass(p.params._portrait)
                    .addClass(p.params._landscape);
            } else {
                p.slides[target].orientation = 'portrait';
                slide
                    .removeClass(p.params._landscape)
                    .addClass(p.params._portrait);
            }
        },

        checkButtons: function(galleryId) {
            var p = data[galleryId];

            if (p.current == 0) {
                p.prev.addClass(p.params._disabled);
            } else {
                p.prev.removeClass(p.params._disabled);
            }
            if (p.current + p.params.slidesOnScreen - 1 == p.last) {
                p.next.addClass(p.params._disabled);
            } else {
                p.next.removeClass(p.params._disabled);
            }
        },

        setIndent: function(galleryId, value, unit) {
            var p = data[galleryId],
                result = {};

            unit = unit || '%';

            if (p.params.transform) {
                var property = prefixes[p.params.transform.property];

                if (p.params.transform.has3d) {
                    result[property] = 'translate3d(' + value + unit + ', 0, 0)';
                } else {
                    result[property] = 'translateX(' + value + unit + ')';
                }
            } else {
                result.left = value + unit;
            }

            return result;
        },

        freeze: function(galleryId) {
            var p = data[galleryId];

            p.freeze = true;
            p.root.addClass(p.params._freeze);
        },

        unfreeze: function(galleryId) {
            var p = data[galleryId];

            p.freeze = false;
            p.root.removeClass(p.params._freeze);
        },

        getHTML: function(params, data) {
            var thumbsHTML = '',
                slidesHTML = '';

            for (var i = 0, len = data.length; i < len; i++) {

                // Thumbnails template

                thumbsHTML += '<span data-rel="' + i + '" class="' + params.thumb +
                    ' ' + params.modifierPrefix + i +
                    ' ' + data[i].classes + '">';

                if (params.showThumbs == 'thumbs' && data[i].url) {
                    thumbsHTML += '<img src="' + data[i].thumb +
                        '" class="' + params.thumbImg + '" data-rel="' + i + '">';
                }

                thumbsHTML += '</span>';

                // Slides template

                slidesHTML += '<div class="' + params.slide +
                    ' ' + params.modifierPrefix + i +
                    ' ' + (data[i].html ? params._html : params._loading) +
                    '" data-id="' + i + '">';

                if (data[i].html) {
                    slidesHTML += data[i].html;
                } else {
                    if (params.ie && params.ie < 9) {
                        slidesHTML += '<img src="" class="' + params.slideImg + ' ' + data[i].classes + '" />';
                    } else {
                        slidesHTML += '<div class="' + params.slideImg + ' ' + data[i].classes + '"></div>';
                    }
                }

                slidesHTML += '</div>';
            }

            if (params.showThumbs == 'thumbs') {
                thumbsHTML += '<div class="' + params.thumbFrame + '"></div>';
            }

            return { thumbs: thumbsHTML, slides: slidesHTML };
        }
    };

    $.fn.photor = function(method) {

        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method == 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('Unknown method: ' +  method);
        }

    };

    $.fn.photor.data = data;

    /**
     * Detect IE version
     *
     * @returns {int} Major version
     */
    function ie() {
        var ua = navigator.userAgent.toLowerCase();

        return ua.indexOf('msie') > -1 ? parseInt(ua.split('msie')[1]) : false;
    }

    /**
     * Returns supported property for css-transform
     *
     * @returns {string} String key
     */
    function getSupportedTransform() {
        var out = false,
            el = document.createElement('p');

        for (var key in prefixes) {
            if (prefixes.hasOwnProperty(key) && el.style[key] !== undefined) {
                out = { property: key };

                break;
            }
        }

        document.body.appendChild(el);

        if (out.property) {
            el.style[out.property] = "translate3d(1px,1px,1px)";
            out.has3d = window.getComputedStyle(el).getPropertyValue(prefixes[out.property]) != 'none';
        }

        document.body.removeChild(el);

        return out;
    }

    /**
     * Get prefixed css-property
     *
     * @returns {string} String key
     */
    function getPrefixed(property) {
        var style = document.createElement('p').style,
            prefixes = ['ms', 'O', 'Moz', 'Webkit'];

        if (style[property] == '') {
            return property;
        }

        property = property.charAt(0).toUpperCase() + property.slice(1);

        for (var i = 0, len = prefixes.length; i < len; i++) {
            if (style[prefixes[i] + property] == '') {
                return prefixes[i] + property;
            }
        }
    }

    /**
     * Кроссбраузерно добавляет обработчики событий
     *
     * @param {HTMLElement} element HTMLElement
     * @param {Event} e Событие
     * @param {Function} handler Обработчик события
     * @param {bool} capture Capturing
     */
    function eventManager(element, e, handler, capture, off) {
        capture = !!capture;

        if (!element) {
            return;
        }

        if (off) {

            if (element.removeEventListener) {
                element.removeEventListener(e, handler, capture);
            } else {
                $(element).off(e);
            }

        } else {

            if (element.addEventListener) {
                element.addEventListener(e, handler, capture);
            } else {
                $(element).on(e, handler);
            }

        }
    }

    /**
     * Проверяет наличие класса у HTML-элемента
     *
     * @param {HTMLElement} element HTMLElement
     * @param {string} className Имя класса
     * @returns {bool}
     */
    function hasClass(element, className) {
        var classNames = ' ' + element.className + ' ';

        className = ' ' + className + ' ';

        if (classNames.replace(/[\r\n\t\f]+/g, ' ').indexOf(className) > -1) {
            return true;
        }

        return false;
    }

    /**
     * Возвращает массив поддерживаемых событий
     * Если браузер поддерживает pointer events или подключена handjs, вернет события указателя.
     * Если нет, используем события мыши
     *
     * @returns {Array} Массив с названиями событий
     */
    function getSupportedEvents() {
        var touchEnabled = 'ontouchstart' in window;

        if (touchEnabled) {
            return ['touchstart', 'touchmove', 'touchend', 'touchcancel'];
        }

        return ['mousedown', 'mousemove', 'mouseup', 'mouseleave'];
    }

    /**
     * Устанавливает обработчики управления указателем (touch, mouse, pen)
     *
     * @param {string|number} galleryId Id галереи (ключ для массива с объектами инстансов галереи)
     */
    function bindControl(galleryId) {
        var p = data[galleryId],
            thumbs = p.thumbs,
            touch = {},
            inlineLinks = p.viewport[0].getElementsByTagName('a'),
            inlineImages = p.viewport[0].getElementsByTagName('img');

        /**
         * Обработчик touchstart
         *
         * @param {Event} e Событие pointerdown
         */
        handlers.onStart = function(e) {
            if (p.freeze) {
                return;
            }

            // Запоминаем координаты и время
            touch.x1 = e.clientX || e.touches && e.touches[0].clientX;
            touch.y1 = e.clientY || e.touches && e.touches[0].clientY;
            touch.t1 = new Date();
            touch.isPressed = true;

            // Запоминаем элемент, на котором вызвано событие
            touch.isThumbs = hasClass(this, p.params.thumbs);
            touch.thumbsStartX = p.thumbsIndent;

            p.layer.css('transition-duration', '0s');
            p.thumbsLayer.css('transition-duration', '0s');
        };

        /**
         * Обработчик touch move
         *
         * @param {Event} e Событие pointermove
         */
        handlers.onMove = function(e) {
            if (touch.isPressed && !p.freeze) {
                // смещения
                touch.shiftX = (e.clientX || e.touches && e.touches[0].clientX) - touch.x1;
                touch.shiftY = (e.clientY || e.touches && e.touches[0].clientY) - touch.y1;

                // абсолютные значения смещений
                touch.shiftXAbs = Math.abs(touch.shiftX);
                touch.shiftYAbs = Math.abs(touch.shiftY);

                // Detect multitouch
                touch.isMultitouch = touch.isMultitouch || !!e.touches && e.touches.length > 1;

                if (touch.isMultitouch) {
                    end();

                    return;
                }

                // если мы ещё не определились
                if (!touch.isSlide && !touch.isScroll) {
                    // если вертикальное смещение - скроллим пока не отпустили палец
                    if (touch.shiftYAbs >= 5 && touch.shiftYAbs > touch.shiftXAbs) {
                        touch.isScroll = true;
                    }

                    // если горизонтальное - слайдим
                    if (touch.shiftXAbs >= 5 && touch.shiftXAbs > touch.shiftYAbs) {
                        p.root.addClass(p.params._dragging);
                        touch.isSlide = true;
                        touch.startShift = getIndent(galleryId);
                    }
                }

                // если слайдим
                if (touch.isSlide) {

                    if (touch.isThumbs) {
                        if (p.thumbsDragging) {
                            thumbsMove();
                        }
                    } else {
                        // слайды таскаем, только если поддерживаются transition
                        if (p.params.transition) {
                            slidesMove();
                        }
                    }

                    // запрещаем скролл
                    if (e.preventDefault) {
                        e.preventDefault();
                    }
                }
            }
        };

        /**
         * Обработчик touch end
         *
         * @param {Event} e Событие pointerup
         */
        handlers.onEnd = function(e) {
            // Ловим клик
            if (!touch.isSlide && !touch.isScroll && touch.isPressed) {

                // Назад
                if (hasClass(e.target, p.params.prev)) {
                    methods.prev(galleryId);
                }

                // Вперед
                if (hasClass(e.target, p.params.next)) {
                    methods.next(galleryId);
                }

                // Клик по миниатюре
                if (hasClass(e.target, p.params.thumbImg) || hasClass(e.target, p.params.thumb)) {
                    var target = parseInt(e.target.getAttribute('data-rel'));

                    if (target + p.params.slidesOnScreen - 1 > p.last) {
                        target = p.last - p.params.slidesOnScreen + 1;
                    }
                    methods.go(galleryId, target);
                }

                if (e.stopPropagation && e.preventDefault) {
                    e.stopPropagation();
                    e.preventDefault(); // Нужно для отмены зума по doubletap
                }
            }

            end();
        };

        /**
         * Возвращает текущее значение отступа layer
         *
         * @param {string|number} galleryId Id галереи (ключ для массива с объектами инстансов галереи)
         */
        function getIndent(galleryId) {
            var p = data[galleryId],
                value;

            if (p.params.transform) {
                var matrix = p.layer.css(prefixes[p.params.transform.property]).match(/(-?[0-9\.]+)/g);

                value = matrix.length > 6 ? matrix[13] : matrix[4];
            } else {
                value = p.layer.css('left');
            }

            return parseInt(value);
        }

        /**
         * Завершение перемещения
         */
        function end() {
            if (touch.isSlide) {
                if (touch.isThumbs) {
                    thumbsEnd();
                } else {
                    if (p.params.transition) {
                        slidesEnd();
                    }
                }
            }

            touch = {};
            p.root.removeClass(p.params._dragging);
        }

        /**
         * Движение слайдов во время перетаскивания
         */
        function slidesMove() {
            var resultIndent,
                onScreen = p.params.slidesOnScreen;

            if ((p.current == 0 && touch.shiftX > 0) || (p.current + onScreen - 1 == p.last && touch.shiftX < 0)) {
                touch.shiftX = touch.shiftX / 3;
            }

            resultIndent = touch.shiftX + touch.startShift;

            p.layer.css(methods.setIndent(galleryId, Math.round(resultIndent), 'px'));
        }

        /**
         * Завершение движения слайдов
         */
        function slidesEnd() {
            // Transition executes if delta more then 5% of container width
            if (Math.abs(touch.shiftX) > p.viewportWidth * 0.05) {
                var shiftSlides = touch.shiftX / p.viewportWidth * p.params.slidesOnScreen,
                    target;

                if (touch.shiftX < 0) {
                    target = p.current - Math.floor(shiftSlides);
                } else {
                    target = p.current - Math.ceil(shiftSlides);
                }

                // Проверяем, существует ли целевой слайд
                if (target < 0) {
                    target = 0;
                }
                if (target + p.params.slidesOnScreen - 1 > p.last) {
                    target = p.last - p.params.slidesOnScreen + 1;
                }

                methods.go(galleryId, target);

            } else {
                methods.go(galleryId, p.current);
            }
        }

        /**
         * Движение миниатюр при перетаскивании
         */
        function thumbsMove() {
            var indent = touch.shiftX + touch.thumbsStartX,
                limit = -1 * (p.thumbsLayerWidth - p.thumbsWidth);

            // Если выходим за край
            if (indent > 0) {
                indent = indent / 3;
            }
            if (indent < limit) {
                indent = limit + ((indent - limit) / 3);
            }

            p.thumbsIndent = indent;
            p.thumbsLayer.css(methods.setIndent(galleryId, p.thumbsIndent, 'px'));
        }

        /**
         * Завершение движения миниатюр
         */
        function thumbsEnd() {
            if (p.thumbsDragging && touch.isSlide) {
                var direction = touch.shiftX < 0 ? -1 : 1;

                touch.t2 = new Date();
                p.thumbsIndent = calcTailAnimation(p.thumbsIndent, direction);

                p.thumbsLayer
                    .css('transition-duration', '.24s')
                    .css(methods.setIndent(galleryId, p.thumbsIndent, 'px'));
            }
        }

        /**
         * Вычисление конечной координаты слоя с миниатюрами с учетом движения по инерции
         *
         * @param {number} currentIndent Текущее положение слоя с миниатюрами в пикселях
         * @param {number} direction Направление движения (-1|1)
         * @returns {number} Значение координаты слоя с миниатюрами в пикселях
         */
        function calcTailAnimation(currentIndent, direction) {
            var speed = Math.abs(10 * touch.shiftX / (touch.t2 - touch.t1)),
                tail, limit;

            tail = direction * parseInt(Math.pow(speed, 2)) + currentIndent;
            limit = p.thumbs.outerWidth() - p.thumbsLayer.outerWidth();

            if (tail > 0) {
                return 0;
            }

            if (tail < limit) {
                return limit;
            }

            return tail;
        }

        // Touch-события
        p.events.push({
            element: p.viewport[0],
            event: evt[0],
            handler: handlers.onStart
        }, {
            element: p.viewport[0],
            event: evt[1],
            handler: handlers.onMove,
            capture: true
        }, {
            element: p.viewport[0],
            event: evt[2],
            handler: handlers.onEnd
        }, {
            element: p.viewport[0],
            event: evt[3],
            handler: handlers.onEnd
        }, {
            element: thumbs[0],
            event: evt[0],
            handler: handlers.onStart
        }, {
            element: thumbs[0],
            event: evt[1],
            handler: handlers.onMove,
            capture: true
        }, {
            element: thumbs[0],
            event: evt[2],
            handler: handlers.onEnd
        }, {
            element: thumbs[0],
            event: evt[3],
            handler: handlers.onEnd
        });

        // Отмена перехода по ссылке миниатюры
        preventNativeEvents(p.thumb, 'click');

        // Отмена встроенного перетаскивания для картинок
        preventNativeEvents(p.thumbImg, 'dragstart');

        // Отмена встроенного перетаскивания для вложенных ссылок
        preventNativeEvents(inlineLinks, 'dragstart');

        // Отмена встроенного перетаскивания для вложенных изображений
        preventNativeEvents(inlineImages, 'dragstart');


        /**
         * Prevent native event
         *
         * @param {array|jQuery object} elements DOM-elements
         * @param {string} evt Event
         */
        function preventNativeEvents(elements, evt) {
            for (var i = 0, len = elements.length; i < len; i++) {
                p.events.push({
                    element: elements[i],
                    event: evt,
                    handler: function(e) {
                        if (e.preventDefault) {
                            e.preventDefault();
                        }

                        return false;
                    }
                });
            }
        }

    }

    /**
     * Устанавливает обработчик изменения размера окна
     *
     * @param {string|number} galleryId Id галереи (ключ для массива с объектами инстансов галереи)
     */
    function bindResize(galleryId) {
        if (!handlers.resize) {
            var p = data[galleryId];

            p.events.push({
                element: window,
                event: 'resize',
                handler: methods.update
            });
        }
    }

    /**
     * Устанавливает обработчики управления с клавиатуры
     *
     * @param {string|number} galleryId Id галереи (ключ для массива с объектами инстансов галереи)
     */
    function bindKeyboard(galleryId) {
        var p = data[galleryId];

        handlers.keydown = function(e) {
            var key = e.which || e.keyCode,
                node = e.target.nodeName.toLowerCase(),
                contenteditable = !!e.target.attributes.contenteditable;

            if (node != 'input' && node != 'textarea' && node != 'select' && !contenteditable) {
                switch(key) {
                    // Space
                    case 32:
                        methods.next(galleryId);
                        break;

                    // Left
                    case 37:
                        methods.prev(galleryId);
                        break;

                    // Right
                    case 39:
                        methods.next(galleryId);
                        break;
                }
            }
        };

        p.events.push({
            element: window,
            event: 'keydown',
            handler: handlers.keydown
        });
    }

    /**
     * Устанавливает обработчики на окончание анимации
     *
     * @param {string|number} galleryId Id галереи (ключ для массива с объектами инстансов галереи)
     */
    function bindTransitionEnd(galleryId) {
        var p = data[galleryId],
            transitionEnd = ['webkitTransitionEnd', 'MSTransitionEnd', 'oTransitionEnd', 'transitionend'];

        handlers.transitionEnd = function(e) {
            var prop = e.propertyName;

            if (prop.lastIndexOf('transform') != prop.length - 'transform'.length && prop != 'left') {
                return;
            }

            callback(galleryId);
        };

        for (var i = 0, len = transitionEnd.length; i < len; i++) {
            p.events.push({
                element: p.layer[0],
                event: transitionEnd[i],
                handler: handlers.transitionEnd
            });
        }
    }

    function callback(galleryId) {
        var p = data[galleryId];

        p.root.removeClass(p.params._animated);

        p.layer[0].style.transitionDuration = 0;

        toggleSlides(galleryId, p.current);

        if (p.params.onShow) {
            p.params.onShow.call(p);
        }
    }

    function toggleSlides(galleryId, target) {
        var p = data[galleryId];

        for (var i = 0, len = p.count; i < len; i++) {
            var elem = p.root.find('.' + p.params.slide + '.' + p.params.modifierPrefix + i),
                onScreen = p.params.slidesOnScreen;

            if (i >= p.current - onScreen && i <= p.current + (onScreen * 2) - 1 || i >= target - onScreen && i <= target + (onScreen * 2) - 1) {
                elem.removeClass(p.params._hidden);
            } else {
                elem.addClass(p.params._hidden);
            }
        }
    }

    /**
     * @param {string} url
     * @param {Function} callback
     */
    function loadImage(url, callback) {
        var img = new Image();

        img.onload = function() {
            img.onload = null;
            callback.call(this, true, url);
        };

        img.onerror = function() {
            img.onerror = null;
            callback.call(this, false, url);
        };

        img.src = url;
    }

})(jQuery);

/*!
 * Fotorama 4.6.4 | http://fotorama.io/license/
 */
fotoramaVersion="4.6.4",function(a,b,c,d,e){"use strict";function f(a){var b="bez_"+d.makeArray(arguments).join("_").replace(".","p");if("function"!=typeof d.easing[b]){var c=function(a,b){var c=[null,null],d=[null,null],e=[null,null],f=function(f,g){return e[g]=3*a[g],d[g]=3*(b[g]-a[g])-e[g],c[g]=1-e[g]-d[g],f*(e[g]+f*(d[g]+f*c[g]))},g=function(a){return e[0]+a*(2*d[0]+3*c[0]*a)},h=function(a){for(var b,c=a,d=0;++d<14&&(b=f(c,0)-a,!(Math.abs(b)<.001));)c-=b/g(c);return c};return function(a){return f(h(a),1)}};d.easing[b]=function(b,d,e,f,g){return f*c([a[0],a[1]],[a[2],a[3]])(d/g)+e}}return b}function g(){}function h(a,b,c){return Math.max(isNaN(b)?-1/0:b,Math.min(isNaN(c)?1/0:c,a))}function i(a){return a.match(/ma/)&&a.match(/-?\d+(?!d)/g)[a.match(/3d/)?12:4]}function j(a){return Ic?+i(a.css("transform")):+a.css("left").replace("px","")}function k(a){var b={};return Ic?b.transform="translate3d("+a+"px,0,0)":b.left=a,b}function l(a){return{"transition-duration":a+"ms"}}function m(a,b){return isNaN(a)?b:a}function n(a,b){return m(+String(a).replace(b||"px",""))}function o(a){return/%$/.test(a)?n(a,"%"):e}function p(a,b){return m(o(a)/100*b,n(a))}function q(a){return(!isNaN(n(a))||!isNaN(n(a,"%")))&&a}function r(a,b,c,d){return(a-(d||0))*(b+(c||0))}function s(a,b,c,d){return-Math.round(a/(b+(c||0))-(d||0))}function t(a){var b=a.data();if(!b.tEnd){var c=a[0],d={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",msTransition:"MSTransitionEnd",transition:"transitionend"};T(c,d[uc.prefixed("transition")],function(a){b.tProp&&a.propertyName.match(b.tProp)&&b.onEndFn()}),b.tEnd=!0}}function u(a,b,c,d){var e,f=a.data();f&&(f.onEndFn=function(){e||(e=!0,clearTimeout(f.tT),c())},f.tProp=b,clearTimeout(f.tT),f.tT=setTimeout(function(){f.onEndFn()},1.5*d),t(a))}function v(a,b){if(a.length){var c=a.data();Ic?(a.css(l(0)),c.onEndFn=g,clearTimeout(c.tT)):a.stop();var d=w(b,function(){return j(a)});return a.css(k(d)),d}}function w(){for(var a,b=0,c=arguments.length;c>b&&(a=b?arguments[b]():arguments[b],"number"!=typeof a);b++);return a}function x(a,b){return Math.round(a+(b-a)/1.5)}function y(){return y.p=y.p||("https:"===c.protocol?"https://":"http://"),y.p}function z(a){var c=b.createElement("a");return c.href=a,c}function A(a,b){if("string"!=typeof a)return a;a=z(a);var c,d;if(a.host.match(/youtube\.com/)&&a.search){if(c=a.search.split("v=")[1]){var e=c.indexOf("&");-1!==e&&(c=c.substring(0,e)),d="youtube"}}else a.host.match(/youtube\.com|youtu\.be/)?(c=a.pathname.replace(/^\/(embed\/|v\/)?/,"").replace(/\/.*/,""),d="youtube"):a.host.match(/vimeo\.com/)&&(d="vimeo",c=a.pathname.replace(/^\/(video\/)?/,"").replace(/\/.*/,""));return c&&d||!b||(c=a.href,d="custom"),c?{id:c,type:d,s:a.search.replace(/^\?/,""),p:y()}:!1}function B(a,b,c){var e,f,g=a.video;return"youtube"===g.type?(f=y()+"img.youtube.com/vi/"+g.id+"/default.jpg",e=f.replace(/\/default.jpg$/,"/hqdefault.jpg"),a.thumbsReady=!0):"vimeo"===g.type?d.ajax({url:y()+"vimeo.com/api/v2/video/"+g.id+".json",dataType:"jsonp",success:function(d){a.thumbsReady=!0,C(b,{img:d[0].thumbnail_large,thumb:d[0].thumbnail_small},a.i,c)}}):a.thumbsReady=!0,{img:e,thumb:f}}function C(a,b,c,e){for(var f=0,g=a.length;g>f;f++){var h=a[f];if(h.i===c&&h.thumbsReady){var i={videoReady:!0};i[Xc]=i[Zc]=i[Yc]=!1,e.splice(f,1,d.extend({},h,i,b));break}}}function D(a){function b(a,b,e){var f=a.children("img").eq(0),g=a.attr("href"),h=a.attr("src"),i=f.attr("src"),j=b.video,k=e?A(g,j===!0):!1;k?g=!1:k=j,c(a,f,d.extend(b,{video:k,img:b.img||g||h||i,thumb:b.thumb||i||h||g}))}function c(a,b,c){var e=c.thumb&&c.img!==c.thumb,f=n(c.width||a.attr("width")),g=n(c.height||a.attr("height"));d.extend(c,{width:f,height:g,thumbratio:S(c.thumbratio||n(c.thumbwidth||b&&b.attr("width")||e||f)/n(c.thumbheight||b&&b.attr("height")||e||g))})}var e=[];return a.children().each(function(){var a=d(this),f=R(d.extend(a.data(),{id:a.attr("id")}));if(a.is("a, img"))b(a,f,!0);else{if(a.is(":empty"))return;c(a,null,d.extend(f,{html:this,_html:a.html()}))}e.push(f)}),e}function E(a){return 0===a.offsetWidth&&0===a.offsetHeight}function F(a){return!d.contains(b.documentElement,a)}function G(a,b,c,d){return G.i||(G.i=1,G.ii=[!0]),d=d||G.i,"undefined"==typeof G.ii[d]&&(G.ii[d]=!0),a()?b():G.ii[d]&&setTimeout(function(){G.ii[d]&&G(a,b,c,d)},c||100),G.i++}function H(a){c.replace(c.protocol+"//"+c.host+c.pathname.replace(/^\/?/,"/")+c.search+"#"+a)}function I(a,b,c,d){var e=a.data(),f=e.measures;if(f&&(!e.l||e.l.W!==f.width||e.l.H!==f.height||e.l.r!==f.ratio||e.l.w!==b.w||e.l.h!==b.h||e.l.m!==c||e.l.p!==d)){var g=f.width,i=f.height,j=b.w/b.h,k=f.ratio>=j,l="scaledown"===c,m="contain"===c,n="cover"===c,o=$(d);k&&(l||m)||!k&&n?(g=h(b.w,0,l?g:1/0),i=g/f.ratio):(k&&n||!k&&(l||m))&&(i=h(b.h,0,l?i:1/0),g=i*f.ratio),a.css({width:g,height:i,left:p(o.x,b.w-g),top:p(o.y,b.h-i)}),e.l={W:f.width,H:f.height,r:f.ratio,w:b.w,h:b.h,m:c,p:d}}return!0}function J(a,b){var c=a[0];c.styleSheet?c.styleSheet.cssText=b:a.html(b)}function K(a,b,c){return b===c?!1:b>=a?"left":a>=c?"right":"left right"}function L(a,b,c,d){if(!c)return!1;if(!isNaN(a))return a-(d?0:1);for(var e,f=0,g=b.length;g>f;f++){var h=b[f];if(h.id===a){e=f;break}}return e}function M(a,b,c){c=c||{},a.each(function(){var a,e=d(this),f=e.data();f.clickOn||(f.clickOn=!0,d.extend(cb(e,{onStart:function(b){a=b,(c.onStart||g).call(this,b)},onMove:c.onMove||g,onTouchEnd:c.onTouchEnd||g,onEnd:function(c){c.moved||b.call(this,a)}}),{noMove:!0}))})}function N(a,b){return'<div class="'+a+'">'+(b||"")+"</div>"}function O(a){for(var b=a.length;b;){var c=Math.floor(Math.random()*b--),d=a[b];a[b]=a[c],a[c]=d}return a}function P(a){return"[object Array]"==Object.prototype.toString.call(a)&&d.map(a,function(a){return d.extend({},a)})}function Q(a,b,c){a.scrollLeft(b||0).scrollTop(c||0)}function R(a){if(a){var b={};return d.each(a,function(a,c){b[a.toLowerCase()]=c}),b}}function S(a){if(a){var b=+a;return isNaN(b)?(b=a.split("/"),+b[0]/+b[1]||e):b}}function T(a,b,c,d){b&&(a.addEventListener?a.addEventListener(b,c,!!d):a.attachEvent("on"+b,c))}function U(a){return!!a.getAttribute("disabled")}function V(a){return{tabindex:-1*a+"",disabled:a}}function W(a,b){T(a,"keyup",function(c){U(a)||13==c.keyCode&&b.call(a,c)})}function X(a,b){T(a,"focus",a.onfocusin=function(c){b.call(a,c)},!0)}function Y(a,b){a.preventDefault?a.preventDefault():a.returnValue=!1,b&&a.stopPropagation&&a.stopPropagation()}function Z(a){return a?">":"<"}function $(a){return a=(a+"").split(/\s+/),{x:q(a[0])||bd,y:q(a[1])||bd}}function _(a,b){var c=a.data(),e=Math.round(b.pos),f=function(){c.sliding=!1,(b.onEnd||g)()};"undefined"!=typeof b.overPos&&b.overPos!==b.pos&&(e=b.overPos,f=function(){_(a,d.extend({},b,{overPos:b.pos,time:Math.max(Qc,b.time/2)}))});var h=d.extend(k(e),b.width&&{width:b.width});c.sliding=!0,Ic?(a.css(d.extend(l(b.time),h)),b.time>10?u(a,"transform",f,b.time):f()):a.stop().animate(h,b.time,_c,f)}function ab(a,b,c,e,f,h){var i="undefined"!=typeof h;if(i||(f.push(arguments),Array.prototype.push.call(arguments,f.length),!(f.length>1))){a=a||d(a),b=b||d(b);var j=a[0],k=b[0],l="crossfade"===e.method,m=function(){if(!m.done){m.done=!0;var a=(i||f.shift())&&f.shift();a&&ab.apply(this,a),(e.onEnd||g)(!!a)}},n=e.time/(h||1);c.removeClass(Rb+" "+Qb),a.stop().addClass(Rb),b.stop().addClass(Qb),l&&k&&a.fadeTo(0,0),a.fadeTo(l?n:0,1,l&&m),b.fadeTo(n,0,m),j&&l||k||m()}}function bb(a){var b=(a.touches||[])[0]||a;a._x=b.pageX,a._y=b.clientY,a._now=d.now()}function cb(a,c){function e(a){return m=d(a.target),u.checked=p=q=s=!1,k||u.flow||a.touches&&a.touches.length>1||a.which>1||ed&&ed.type!==a.type&&gd||(p=c.select&&m.is(c.select,t))?p:(o="touchstart"===a.type,q=m.is("a, a *",t),n=u.control,r=u.noMove||u.noSwipe||n?16:u.snap?0:4,bb(a),l=ed=a,fd=a.type.replace(/down|start/,"move").replace(/Down/,"Move"),(c.onStart||g).call(t,a,{control:n,$target:m}),k=u.flow=!0,void((!o||u.go)&&Y(a)))}function f(a){if(a.touches&&a.touches.length>1||Nc&&!a.isPrimary||fd!==a.type||!k)return k&&h(),void(c.onTouchEnd||g)();bb(a);var b=Math.abs(a._x-l._x),d=Math.abs(a._y-l._y),e=b-d,f=(u.go||u.x||e>=0)&&!u.noSwipe,i=0>e;o&&!u.checked?(k=f)&&Y(a):(Y(a),(c.onMove||g).call(t,a,{touch:o})),!s&&Math.sqrt(Math.pow(b,2)+Math.pow(d,2))>r&&(s=!0),u.checked=u.checked||f||i}function h(a){(c.onTouchEnd||g)();var b=k;u.control=k=!1,b&&(u.flow=!1),!b||q&&!u.checked||(a&&Y(a),gd=!0,clearTimeout(hd),hd=setTimeout(function(){gd=!1},1e3),(c.onEnd||g).call(t,{moved:s,$target:m,control:n,touch:o,startEvent:l,aborted:!a||"MSPointerCancel"===a.type}))}function i(){u.flow||setTimeout(function(){u.flow=!0},10)}function j(){u.flow&&setTimeout(function(){u.flow=!1},Pc)}var k,l,m,n,o,p,q,r,s,t=a[0],u={};return Nc?(T(t,"MSPointerDown",e),T(b,"MSPointerMove",f),T(b,"MSPointerCancel",h),T(b,"MSPointerUp",h)):(T(t,"touchstart",e),T(t,"touchmove",f),T(t,"touchend",h),T(b,"touchstart",i),T(b,"touchend",j),T(b,"touchcancel",j),Ec.on("scroll",j),a.on("mousedown",e),Fc.on("mousemove",f).on("mouseup",h)),a.on("click","a",function(a){u.checked&&Y(a)}),u}function db(a,b){function c(c,d){A=!0,j=l=c._x,q=c._now,p=[[q,j]],m=n=D.noMove||d?0:v(a,(b.getPos||g)()),(b.onStart||g).call(B,c)}function e(a,b){s=D.min,t=D.max,u=D.snap,w=a.altKey,A=z=!1,y=b.control,y||C.sliding||c(a)}function f(d,e){D.noSwipe||(A||c(d),l=d._x,p.push([d._now,l]),n=m-(j-l),o=K(n,s,t),s>=n?n=x(n,s):n>=t&&(n=x(n,t)),D.noMove||(a.css(k(n)),z||(z=!0,e.touch||Nc||a.addClass(ec)),(b.onMove||g).call(B,d,{pos:n,edge:o})))}function i(e){if(!D.noSwipe||!e.moved){A||c(e.startEvent,!0),e.touch||Nc||a.removeClass(ec),r=d.now();for(var f,i,j,k,o,q,v,x,y,z=r-Pc,C=null,E=Qc,F=b.friction,G=p.length-1;G>=0;G--){if(f=p[G][0],i=Math.abs(f-z),null===C||j>i)C=f,k=p[G][1];else if(C===z||i>j)break;j=i}v=h(n,s,t);var H=k-l,I=H>=0,J=r-C,K=J>Pc,L=!K&&n!==m&&v===n;u&&(v=h(Math[L?I?"floor":"ceil":"round"](n/u)*u,s,t),s=t=v),L&&(u||v===n)&&(y=-(H/J),E*=h(Math.abs(y),b.timeLow,b.timeHigh),o=Math.round(n+y*E/F),u||(v=o),(!I&&o>t||I&&s>o)&&(q=I?s:t,x=o-q,u||(v=q),x=h(v+.03*x,q-50,q+50),E=Math.abs((n-x)/(y/F)))),E*=w?10:1,(b.onEnd||g).call(B,d.extend(e,{moved:e.moved||K&&u,pos:n,newPos:v,overPos:x,time:E}))}}var j,l,m,n,o,p,q,r,s,t,u,w,y,z,A,B=a[0],C=a.data(),D={};return D=d.extend(cb(b.$wrap,d.extend({},b,{onStart:e,onMove:f,onEnd:i})),D)}function eb(a,b){var c,e,f,h=a[0],i={prevent:{}};return T(h,Oc,function(a){var h=a.wheelDeltaY||-1*a.deltaY||0,j=a.wheelDeltaX||-1*a.deltaX||0,k=Math.abs(j)&&!Math.abs(h),l=Z(0>j),m=e===l,n=d.now(),o=Pc>n-f;e=l,f=n,k&&i.ok&&(!i.prevent[l]||c)&&(Y(a,!0),c&&m&&o||(b.shift&&(c=!0,clearTimeout(i.t),i.t=setTimeout(function(){c=!1},Rc)),(b.onEnd||g)(a,b.shift?l:j)))}),i}function fb(){d.each(d.Fotorama.instances,function(a,b){b.index=a})}function gb(a){d.Fotorama.instances.push(a),fb()}function hb(a){d.Fotorama.instances.splice(a.index,1),fb()}var ib="fotorama",jb="fullscreen",kb=ib+"__wrap",lb=kb+"--css2",mb=kb+"--css3",nb=kb+"--video",ob=kb+"--fade",pb=kb+"--slide",qb=kb+"--no-controls",rb=kb+"--no-shadows",sb=kb+"--pan-y",tb=kb+"--rtl",ub=kb+"--only-active",vb=kb+"--no-captions",wb=kb+"--toggle-arrows",xb=ib+"__stage",yb=xb+"__frame",zb=yb+"--video",Ab=xb+"__shaft",Bb=ib+"__grab",Cb=ib+"__pointer",Db=ib+"__arr",Eb=Db+"--disabled",Fb=Db+"--prev",Gb=Db+"--next",Hb=ib+"__nav",Ib=Hb+"-wrap",Jb=Hb+"__shaft",Kb=Hb+"--dots",Lb=Hb+"--thumbs",Mb=Hb+"__frame",Nb=Mb+"--dot",Ob=Mb+"--thumb",Pb=ib+"__fade",Qb=Pb+"-front",Rb=Pb+"-rear",Sb=ib+"__shadow",Tb=Sb+"s",Ub=Tb+"--left",Vb=Tb+"--right",Wb=ib+"__active",Xb=ib+"__select",Yb=ib+"--hidden",Zb=ib+"--fullscreen",$b=ib+"__fullscreen-icon",_b=ib+"__error",ac=ib+"__loading",bc=ib+"__loaded",cc=bc+"--full",dc=bc+"--img",ec=ib+"__grabbing",fc=ib+"__img",gc=fc+"--full",hc=ib+"__dot",ic=ib+"__thumb",jc=ic+"-border",kc=ib+"__html",lc=ib+"__video",mc=lc+"-play",nc=lc+"-close",oc=ib+"__caption",pc=ib+"__caption__wrap",qc=ib+"__spinner",rc='" tabindex="0" role="button',sc=d&&d.fn.jquery.split(".");if(!sc||sc[0]<1||1==sc[0]&&sc[1]<8)throw"Fotorama requires jQuery 1.8 or later and will not run without it.";var tc={},uc=function(a,b,c){function d(a){r.cssText=a}function e(a,b){return typeof a===b}function f(a,b){return!!~(""+a).indexOf(b)}function g(a,b){for(var d in a){var e=a[d];if(!f(e,"-")&&r[e]!==c)return"pfx"==b?e:!0}return!1}function h(a,b,d){for(var f in a){var g=b[a[f]];if(g!==c)return d===!1?a[f]:e(g,"function")?g.bind(d||b):g}return!1}function i(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),f=(a+" "+u.join(d+" ")+d).split(" ");return e(b,"string")||e(b,"undefined")?g(f,b):(f=(a+" "+v.join(d+" ")+d).split(" "),h(f,b,c))}var j,k,l,m="2.6.2",n={},o=b.documentElement,p="modernizr",q=b.createElement(p),r=q.style,s=({}.toString," -webkit- -moz- -o- -ms- ".split(" ")),t="Webkit Moz O ms",u=t.split(" "),v=t.toLowerCase().split(" "),w={},x=[],y=x.slice,z=function(a,c,d,e){var f,g,h,i,j=b.createElement("div"),k=b.body,l=k||b.createElement("body");if(parseInt(d,10))for(;d--;)h=b.createElement("div"),h.id=e?e[d]:p+(d+1),j.appendChild(h);return f=["&#173;",'<style id="s',p,'">',a,"</style>"].join(""),j.id=p,(k?j:l).innerHTML+=f,l.appendChild(j),k||(l.style.background="",l.style.overflow="hidden",i=o.style.overflow,o.style.overflow="hidden",o.appendChild(l)),g=c(j,a),k?j.parentNode.removeChild(j):(l.parentNode.removeChild(l),o.style.overflow=i),!!g},A={}.hasOwnProperty;l=e(A,"undefined")||e(A.call,"undefined")?function(a,b){return b in a&&e(a.constructor.prototype[b],"undefined")}:function(a,b){return A.call(a,b)},Function.prototype.bind||(Function.prototype.bind=function(a){var b=this;if("function"!=typeof b)throw new TypeError;var c=y.call(arguments,1),d=function(){if(this instanceof d){var e=function(){};e.prototype=b.prototype;var f=new e,g=b.apply(f,c.concat(y.call(arguments)));return Object(g)===g?g:f}return b.apply(a,c.concat(y.call(arguments)))};return d}),w.csstransforms3d=function(){var a=!!i("perspective");return a};for(var B in w)l(w,B)&&(k=B.toLowerCase(),n[k]=w[B](),x.push((n[k]?"":"no-")+k));return n.addTest=function(a,b){if("object"==typeof a)for(var d in a)l(a,d)&&n.addTest(d,a[d]);else{if(a=a.toLowerCase(),n[a]!==c)return n;b="function"==typeof b?b():b,"undefined"!=typeof enableClasses&&enableClasses&&(o.className+=" "+(b?"":"no-")+a),n[a]=b}return n},d(""),q=j=null,n._version=m,n._prefixes=s,n._domPrefixes=v,n._cssomPrefixes=u,n.testProp=function(a){return g([a])},n.testAllProps=i,n.testStyles=z,n.prefixed=function(a,b,c){return b?i(a,b,c):i(a,"pfx")},n}(a,b),vc={ok:!1,is:function(){return!1},request:function(){},cancel:function(){},event:"",prefix:""},wc="webkit moz o ms khtml".split(" ");if("undefined"!=typeof b.cancelFullScreen)vc.ok=!0;else for(var xc=0,yc=wc.length;yc>xc;xc++)if(vc.prefix=wc[xc],"undefined"!=typeof b[vc.prefix+"CancelFullScreen"]){vc.ok=!0;break}vc.ok&&(vc.event=vc.prefix+"fullscreenchange",vc.is=function(){switch(this.prefix){case"":return b.fullScreen;case"webkit":return b.webkitIsFullScreen;default:return b[this.prefix+"FullScreen"]}},vc.request=function(a){return""===this.prefix?a.requestFullScreen():a[this.prefix+"RequestFullScreen"]()},vc.cancel=function(){return""===this.prefix?b.cancelFullScreen():b[this.prefix+"CancelFullScreen"]()});var zc,Ac={lines:12,length:5,width:2,radius:7,corners:1,rotate:15,color:"rgba(128, 128, 128, .75)",hwaccel:!0},Bc={top:"auto",left:"auto",className:""};!function(a,b){zc=b()}(this,function(){function a(a,c){var d,e=b.createElement(a||"div");for(d in c)e[d]=c[d];return e}function c(a){for(var b=1,c=arguments.length;c>b;b++)a.appendChild(arguments[b]);return a}function d(a,b,c,d){var e=["opacity",b,~~(100*a),c,d].join("-"),f=.01+c/d*100,g=Math.max(1-(1-a)/b*(100-f),a),h=m.substring(0,m.indexOf("Animation")).toLowerCase(),i=h&&"-"+h+"-"||"";return o[e]||(p.insertRule("@"+i+"keyframes "+e+"{0%{opacity:"+g+"}"+f+"%{opacity:"+a+"}"+(f+.01)+"%{opacity:1}"+(f+b)%100+"%{opacity:"+a+"}100%{opacity:"+g+"}}",p.cssRules.length),o[e]=1),e}function f(a,b){var c,d,f=a.style;for(b=b.charAt(0).toUpperCase()+b.slice(1),d=0;d<n.length;d++)if(c=n[d]+b,f[c]!==e)return c;return f[b]!==e?b:void 0}function g(a,b){for(var c in b)a.style[f(a,c)||c]=b[c];return a}function h(a){for(var b=1;b<arguments.length;b++){var c=arguments[b];for(var d in c)a[d]===e&&(a[d]=c[d])}return a}function i(a){for(var b={x:a.offsetLeft,y:a.offsetTop};a=a.offsetParent;)b.x+=a.offsetLeft,b.y+=a.offsetTop;return b}function j(a,b){return"string"==typeof a?a:a[b%a.length]}function k(a){return"undefined"==typeof this?new k(a):void(this.opts=h(a||{},k.defaults,q))}function l(){function b(b,c){return a("<"+b+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',c)}p.addRule(".spin-vml","behavior:url(#default#VML)"),k.prototype.lines=function(a,d){function e(){return g(b("group",{coordsize:k+" "+k,coordorigin:-i+" "+-i}),{width:k,height:k})}function f(a,f,h){c(m,c(g(e(),{rotation:360/d.lines*a+"deg",left:~~f}),c(g(b("roundrect",{arcsize:d.corners}),{width:i,height:d.width,left:d.radius,top:-d.width>>1,filter:h}),b("fill",{color:j(d.color,a),opacity:d.opacity}),b("stroke",{opacity:0}))))}var h,i=d.length+d.width,k=2*i,l=2*-(d.width+d.length)+"px",m=g(e(),{position:"absolute",top:l,left:l});if(d.shadow)for(h=1;h<=d.lines;h++)f(h,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(h=1;h<=d.lines;h++)f(h);return c(a,m)},k.prototype.opacity=function(a,b,c,d){var e=a.firstChild;d=d.shadow&&d.lines||0,e&&b+d<e.childNodes.length&&(e=e.childNodes[b+d],e=e&&e.firstChild,e=e&&e.firstChild,e&&(e.opacity=c))}}var m,n=["webkit","Moz","ms","O"],o={},p=function(){var d=a("style",{type:"text/css"});return c(b.getElementsByTagName("head")[0],d),d.sheet||d.styleSheet}(),q={lines:12,length:7,width:5,radius:10,rotate:0,corners:1,color:"#000",direction:1,speed:1,trail:100,opacity:.25,fps:20,zIndex:2e9,className:"spinner",top:"auto",left:"auto",position:"relative"};k.defaults={},h(k.prototype,{spin:function(b){this.stop();var c,d,e=this,f=e.opts,h=e.el=g(a(0,{className:f.className}),{position:f.position,width:0,zIndex:f.zIndex}),j=f.radius+f.length+f.width;if(b&&(b.insertBefore(h,b.firstChild||null),d=i(b),c=i(h),g(h,{left:("auto"==f.left?d.x-c.x+(b.offsetWidth>>1):parseInt(f.left,10)+j)+"px",top:("auto"==f.top?d.y-c.y+(b.offsetHeight>>1):parseInt(f.top,10)+j)+"px"})),h.setAttribute("role","progressbar"),e.lines(h,e.opts),!m){var k,l=0,n=(f.lines-1)*(1-f.direction)/2,o=f.fps,p=o/f.speed,q=(1-f.opacity)/(p*f.trail/100),r=p/f.lines;!function s(){l++;for(var a=0;a<f.lines;a++)k=Math.max(1-(l+(f.lines-a)*r)%p*q,f.opacity),e.opacity(h,a*f.direction+n,k,f);e.timeout=e.el&&setTimeout(s,~~(1e3/o))}()}return e},stop:function(){var a=this.el;return a&&(clearTimeout(this.timeout),a.parentNode&&a.parentNode.removeChild(a),this.el=e),this},lines:function(b,e){function f(b,c){return g(a(),{position:"absolute",width:e.length+e.width+"px",height:e.width+"px",background:b,boxShadow:c,transformOrigin:"left",transform:"rotate("+~~(360/e.lines*i+e.rotate)+"deg) translate("+e.radius+"px,0)",borderRadius:(e.corners*e.width>>1)+"px"})}for(var h,i=0,k=(e.lines-1)*(1-e.direction)/2;i<e.lines;i++)h=g(a(),{position:"absolute",top:1+~(e.width/2)+"px",transform:e.hwaccel?"translate3d(0,0,0)":"",opacity:e.opacity,animation:m&&d(e.opacity,e.trail,k+i*e.direction,e.lines)+" "+1/e.speed+"s linear infinite"}),e.shadow&&c(h,g(f("#000","0 0 4px #000"),{top:"2px"})),c(b,c(h,f(j(e.color,i),"0 0 1px rgba(0,0,0,.1)")));return b},opacity:function(a,b,c){b<a.childNodes.length&&(a.childNodes[b].style.opacity=c)}});var r=g(a("group"),{behavior:"url(#default#VML)"});return!f(r,"transform")&&r.adj?l():m=f(r,"animation"),k});var Cc,Dc,Ec=d(a),Fc=d(b),Gc="quirks"===c.hash.replace("#",""),Hc=uc.csstransforms3d,Ic=Hc&&!Gc,Jc=Hc||"CSS1Compat"===b.compatMode,Kc=vc.ok,Lc=navigator.userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i),Mc=!Ic||Lc,Nc=navigator.msPointerEnabled,Oc="onwheel"in b.createElement("div")?"wheel":b.onmousewheel!==e?"mousewheel":"DOMMouseScroll",Pc=250,Qc=300,Rc=1400,Sc=5e3,Tc=2,Uc=64,Vc=500,Wc=333,Xc="$stageFrame",Yc="$navDotFrame",Zc="$navThumbFrame",$c="auto",_c=f([.1,0,.25,1]),ad=99999,bd="50%",cd={width:null,minwidth:null,maxwidth:"100%",height:null,minheight:null,maxheight:null,ratio:null,margin:Tc,glimpse:0,fit:"contain",position:bd,thumbposition:bd,nav:"dots",navposition:"bottom",navwidth:null,thumbwidth:Uc,thumbheight:Uc,thumbmargin:Tc,thumbborderwidth:Tc,thumbfit:"cover",allowfullscreen:!1,transition:"slide",clicktransition:null,transitionduration:Qc,captions:!0,hash:!1,startindex:0,loop:!1,autoplay:!1,stopautoplayontouch:!0,keyboard:!1,arrows:!0,click:!0,swipe:!0,trackpad:!1,enableifsingleframe:!1,controlsonstart:!0,shuffle:!1,direction:"ltr",shadows:!0,spinner:null},dd={left:!0,right:!0,down:!1,up:!1,space:!1,home:!1,end:!1};G.stop=function(a){G.ii[a]=!1};var ed,fd,gd,hd;jQuery.Fotorama=function(a,e){function f(){d.each(yd,function(a,b){if(!b.i){b.i=me++;var c=A(b.video,!0);if(c){var d={};b.video=c,b.img||b.thumb?b.thumbsReady=!0:d=B(b,yd,ie),C(yd,{img:d.img,thumb:d.thumb},b.i,ie)}}})}function g(a){return Zd[a]||ie.fullScreen}function i(a){var b="keydown."+ib,c=ib+je,d="keydown."+c,f="resize."+c+" orientationchange."+c;a?(Fc.on(d,function(a){var b,c;Cd&&27===a.keyCode?(b=!0,md(Cd,!0,!0)):(ie.fullScreen||e.keyboard&&!ie.index)&&(27===a.keyCode?(b=!0,ie.cancelFullScreen()):a.shiftKey&&32===a.keyCode&&g("space")||37===a.keyCode&&g("left")||38===a.keyCode&&g("up")?c="<":32===a.keyCode&&g("space")||39===a.keyCode&&g("right")||40===a.keyCode&&g("down")?c=">":36===a.keyCode&&g("home")?c="<<":35===a.keyCode&&g("end")&&(c=">>")),(b||c)&&Y(a),c&&ie.show({index:c,slow:a.altKey,user:!0})}),ie.index||Fc.off(b).on(b,"textarea, input, select",function(a){!Dc.hasClass(jb)&&a.stopPropagation()}),Ec.on(f,ie.resize)):(Fc.off(d),Ec.off(f))}function j(b){b!==j.f&&(b?(a.html("").addClass(ib+" "+ke).append(qe).before(oe).before(pe),gb(ie)):(qe.detach(),oe.detach(),pe.detach(),a.html(ne.urtext).removeClass(ke),hb(ie)),i(b),j.f=b)}function m(){yd=ie.data=yd||P(e.data)||D(a),zd=ie.size=yd.length,!xd.ok&&e.shuffle&&O(yd),f(),Je=y(Je),zd&&j(!0)}function o(){var a=2>zd&&!e.enableifsingleframe||Cd;Me.noMove=a||Sd,Me.noSwipe=a||!e.swipe,!Wd&&se.toggleClass(Bb,!e.click&&!Me.noMove&&!Me.noSwipe),Nc&&qe.toggleClass(sb,!Me.noSwipe)}function t(a){a===!0&&(a=""),e.autoplay=Math.max(+a||Sc,1.5*Vd)}function u(){function a(a,c){b[a?"add":"remove"].push(c)}ie.options=e=R(e),Sd="crossfade"===e.transition||"dissolve"===e.transition,Md=e.loop&&(zd>2||Sd&&(!Wd||"slide"!==Wd)),Vd=+e.transitionduration||Qc,Yd="rtl"===e.direction,Zd=d.extend({},e.keyboard&&dd,e.keyboard);var b={add:[],remove:[]};zd>1||e.enableifsingleframe?(Nd=e.nav,Pd="top"===e.navposition,b.remove.push(Xb),we.toggle(!!e.arrows)):(Nd=!1,we.hide()),Rb(),Bd=new zc(d.extend(Ac,e.spinner,Bc,{direction:Yd?-1:1})),Gc(),Hc(),e.autoplay&&t(e.autoplay),Td=n(e.thumbwidth)||Uc,Ud=n(e.thumbheight)||Uc,Ne.ok=Pe.ok=e.trackpad&&!Mc,o(),ed(e,[Le]),Od="thumbs"===Nd,Od?(lc(zd,"navThumb"),Ad=Be,he=Zc,J(oe,d.Fotorama.jst.style({w:Td,h:Ud,b:e.thumbborderwidth,m:e.thumbmargin,s:je,q:!Jc})),ye.addClass(Lb).removeClass(Kb)):"dots"===Nd?(lc(zd,"navDot"),Ad=Ae,he=Yc,ye.addClass(Kb).removeClass(Lb)):(Nd=!1,ye.removeClass(Lb+" "+Kb)),Nd&&(Pd?xe.insertBefore(re):xe.insertAfter(re),wc.nav=!1,wc(Ad,ze,"nav")),Qd=e.allowfullscreen,Qd?(De.prependTo(re),Rd=Kc&&"native"===Qd):(De.detach(),Rd=!1),a(Sd,ob),a(!Sd,pb),a(!e.captions,vb),a(Yd,tb),a("always"!==e.arrows,wb),Xd=e.shadows&&!Mc,a(!Xd,rb),qe.addClass(b.add.join(" ")).removeClass(b.remove.join(" ")),Ke=d.extend({},e)}function x(a){return 0>a?(zd+a%zd)%zd:a>=zd?a%zd:a}function y(a){return h(a,0,zd-1)}function z(a){return Md?x(a):y(a)}function E(a){return a>0||Md?a-1:!1}function U(a){return zd-1>a||Md?a+1:!1}function $(){Me.min=Md?-1/0:-r(zd-1,Le.w,e.margin,Fd),Me.max=Md?1/0:-r(0,Le.w,e.margin,Fd),Me.snap=Le.w+e.margin}function bb(){Oe.min=Math.min(0,Le.nw-ze.width()),Oe.max=0,ze.toggleClass(Bb,!(Oe.noMove=Oe.min===Oe.max))}function cb(a,b,c){if("number"==typeof a){a=new Array(a);var e=!0}return d.each(a,function(a,d){if(e&&(d=a),"number"==typeof d){var f=yd[x(d)];if(f){var g="$"+b+"Frame",h=f[g];c.call(this,a,d,f,h,g,h&&h.data())}}})}function fb(a,b,c,d){(!$d||"*"===$d&&d===Ld)&&(a=q(e.width)||q(a)||Vc,b=q(e.height)||q(b)||Wc,ie.resize({width:a,ratio:e.ratio||c||a/b},0,d!==Ld&&"*"))}function Pb(a,b,c,f,g,h){cb(a,b,function(a,i,j,k,l,m){function n(a){var b=x(i);fd(a,{index:b,src:w,frame:yd[b]})}function o(){t.remove(),d.Fotorama.cache[w]="error",j.html&&"stage"===b||!y||y===w?(!w||j.html||r?"stage"===b&&(k.trigger("f:load").removeClass(ac+" "+_b).addClass(bc),n("load"),fb()):(k.trigger("f:error").removeClass(ac).addClass(_b),n("error")),m.state="error",!(zd>1&&yd[i]===j)||j.html||j.deleted||j.video||r||(j.deleted=!0,ie.splice(i,1))):(j[v]=w=y,Pb([i],b,c,f,g,!0))}function p(){d.Fotorama.measures[w]=u.measures=d.Fotorama.measures[w]||{width:s.width,height:s.height,ratio:s.width/s.height},fb(u.measures.width,u.measures.height,u.measures.ratio,i),t.off("load error").addClass(fc+(r?" "+gc:"")).prependTo(k),I(t,(d.isFunction(c)?c():c)||Le,f||j.fit||e.fit,g||j.position||e.position),d.Fotorama.cache[w]=m.state="loaded",setTimeout(function(){k.trigger("f:load").removeClass(ac+" "+_b).addClass(bc+" "+(r?cc:dc)),"stage"===b?n("load"):(j.thumbratio===$c||!j.thumbratio&&e.thumbratio===$c)&&(j.thumbratio=u.measures.ratio,vd())},0)}function q(){var a=10;G(function(){return!fe||!a--&&!Mc},function(){p()})}if(k){var r=ie.fullScreen&&j.full&&j.full!==j.img&&!m.$full&&"stage"===b;if(!m.$img||h||r){var s=new Image,t=d(s),u=t.data();m[r?"$full":"$img"]=t;var v="stage"===b?r?"full":"img":"thumb",w=j[v],y=r?null:j["stage"===b?"thumb":"img"];if("navThumb"===b&&(k=m.$wrap),!w)return void o();d.Fotorama.cache[w]?!function z(){"error"===d.Fotorama.cache[w]?o():"loaded"===d.Fotorama.cache[w]?setTimeout(q,0):setTimeout(z,100)}():(d.Fotorama.cache[w]="*",t.on("load",q).on("error",o)),m.state="",s.src=w}}})}function Qb(a){Ie.append(Bd.spin().el).appendTo(a)}function Rb(){Ie.detach(),Bd&&Bd.stop()}function Sb(){var a=Dd[Xc];a&&!a.data().state&&(Qb(a),a.on("f:load f:error",function(){a.off("f:load f:error"),Rb()}))}function ec(a){W(a,sd),X(a,function(){setTimeout(function(){Q(ye)},0),Rc({time:Vd,guessIndex:d(this).data().eq,minMax:Oe})})}function lc(a,b){cb(a,b,function(a,c,e,f,g,h){if(!f){f=e[g]=qe[g].clone(),h=f.data(),h.data=e;var i=f[0];"stage"===b?(e.html&&d('<div class="'+kc+'"></div>').append(e._html?d(e.html).removeAttr("id").html(e._html):e.html).appendTo(f),e.caption&&d(N(oc,N(pc,e.caption))).appendTo(f),e.video&&f.addClass(zb).append(Fe.clone()),X(i,function(){setTimeout(function(){Q(re)},0),pd({index:h.eq,user:!0})}),te=te.add(f)):"navDot"===b?(ec(i),Ae=Ae.add(f)):"navThumb"===b&&(ec(i),h.$wrap=f.children(":first"),Be=Be.add(f),e.video&&h.$wrap.append(Fe.clone()))}})}function sc(a,b,c,d){return a&&a.length&&I(a,b,c,d)}function tc(a){cb(a,"stage",function(a,b,c,f,g,h){if(f){var i=x(b),j=c.fit||e.fit,k=c.position||e.position;h.eq=i,Re[Xc][i]=f.css(d.extend({left:Sd?0:r(b,Le.w,e.margin,Fd)},Sd&&l(0))),F(f[0])&&(f.appendTo(se),md(c.$video)),sc(h.$img,Le,j,k),sc(h.$full,Le,j,k)}})}function uc(a,b){if("thumbs"===Nd&&!isNaN(a)){var c=-a,f=-a+Le.nw;Be.each(function(){var a=d(this),g=a.data(),h=g.eq,i=function(){return{h:Ud,w:g.w}},j=i(),k=yd[h]||{},l=k.thumbfit||e.thumbfit,m=k.thumbposition||e.thumbposition;j.w=g.w,g.l+g.w<c||g.l>f||sc(g.$img,j,l,m)||b&&Pb([h],"navThumb",i,l,m)})}}function wc(a,b,c){if(!wc[c]){var f="nav"===c&&Od,g=0;b.append(a.filter(function(){for(var a,b=d(this),c=b.data(),e=0,f=yd.length;f>e;e++)if(c.data===yd[e]){a=!0,c.eq=e;break}return a||b.remove()&&!1}).sort(function(a,b){return d(a).data().eq-d(b).data().eq}).each(function(){if(f){var a=d(this),b=a.data(),c=Math.round(Ud*b.data.thumbratio)||Td;b.l=g,b.w=c,a.css({width:c}),g+=c+e.thumbmargin}})),wc[c]=!0}}function xc(a){return a-Se>Le.w/3}function yc(a){return!(Md||Je+a&&Je-zd+a||Cd)}function Gc(){var a=yc(0),b=yc(1);ue.toggleClass(Eb,a).attr(V(a)),ve.toggleClass(Eb,b).attr(V(b))}function Hc(){Ne.ok&&(Ne.prevent={"<":yc(0),">":yc(1)})}function Lc(a){var b,c,d=a.data();return Od?(b=d.l,c=d.w):(b=a.position().left,c=a.width()),{c:b+c/2,min:-b+10*e.thumbmargin,max:-b+Le.w-c-10*e.thumbmargin}}function Oc(a){var b=Dd[he].data();_(Ce,{time:1.2*a,pos:b.l,width:b.w-2*e.thumbborderwidth})}function Rc(a){var b=yd[a.guessIndex][he];if(b){var c=Oe.min!==Oe.max,d=a.minMax||c&&Lc(Dd[he]),e=c&&(a.keep&&Rc.l?Rc.l:h((a.coo||Le.nw/2)-Lc(b).c,d.min,d.max)),f=c&&h(e,Oe.min,Oe.max),g=1.1*a.time;_(ze,{time:g,pos:f||0,onEnd:function(){uc(f,!0)}}),ld(ye,K(f,Oe.min,Oe.max)),Rc.l=e}}function Tc(){_c(he),Qe[he].push(Dd[he].addClass(Wb))}function _c(a){for(var b=Qe[a];b.length;)b.shift().removeClass(Wb)}function bd(a){var b=Re[a];d.each(Ed,function(a,c){delete b[x(c)]}),d.each(b,function(a,c){delete b[a],c.detach()})}function cd(a){Fd=Gd=Je;var b=Dd[Xc];b&&(_c(Xc),Qe[Xc].push(b.addClass(Wb)),a||ie.show.onEnd(!0),v(se,0,!0),bd(Xc),tc(Ed),$(),bb())}function ed(a,b){a&&d.each(b,function(b,c){c&&d.extend(c,{width:a.width||c.width,height:a.height,minwidth:a.minwidth,maxwidth:a.maxwidth,minheight:a.minheight,maxheight:a.maxheight,ratio:S(a.ratio)})})}function fd(b,c){a.trigger(ib+":"+b,[ie,c])}function gd(){clearTimeout(hd.t),fe=1,e.stopautoplayontouch?ie.stopAutoplay():ce=!0}function hd(){fe&&(e.stopautoplayontouch||(id(),jd()),hd.t=setTimeout(function(){fe=0},Qc+Pc))}function id(){ce=!(!Cd&&!de)}function jd(){if(clearTimeout(jd.t),G.stop(jd.w),!e.autoplay||ce)return void(ie.autoplay&&(ie.autoplay=!1,fd("stopautoplay")));ie.autoplay||(ie.autoplay=!0,fd("startautoplay"));var a=Je,b=Dd[Xc].data();jd.w=G(function(){return b.state||a!==Je},function(){jd.t=setTimeout(function(){if(!ce&&a===Je){var b=Kd,c=yd[b][Xc].data();jd.w=G(function(){return c.state||b!==Kd},function(){ce||b!==Kd||ie.show(Md?Z(!Yd):Kd)})}},e.autoplay)})}function kd(){ie.fullScreen&&(ie.fullScreen=!1,Kc&&vc.cancel(le),Dc.removeClass(jb),Cc.removeClass(jb),a.removeClass(Zb).insertAfter(pe),Le=d.extend({},ee),md(Cd,!0,!0),rd("x",!1),ie.resize(),Pb(Ed,"stage"),Q(Ec,ae,_d),fd("fullscreenexit"))}function ld(a,b){Xd&&(a.removeClass(Ub+" "+Vb),b&&!Cd&&a.addClass(b.replace(/^|\s/g," "+Tb+"--")))}function md(a,b,c){b&&(qe.removeClass(nb),Cd=!1,o()),a&&a!==Cd&&(a.remove(),fd("unloadvideo")),c&&(id(),jd())}function nd(a){qe.toggleClass(qb,a)}function od(a){if(!Me.flow){var b=a?a.pageX:od.x,c=b&&!yc(xc(b))&&e.click;od.p!==c&&re.toggleClass(Cb,c)&&(od.p=c,od.x=b)}}function pd(a){clearTimeout(pd.t),e.clicktransition&&e.clicktransition!==e.transition?setTimeout(function(){var b=e.transition;ie.setOptions({transition:e.clicktransition}),Wd=b,pd.t=setTimeout(function(){ie.show(a)},10)},0):ie.show(a)}function qd(a,b){var c=a.target,f=d(c);f.hasClass(mc)?ie.playVideo():c===Ee?ie.toggleFullScreen():Cd?c===He&&md(Cd,!0,!0):b?nd():e.click&&pd({index:a.shiftKey||Z(xc(a._x)),slow:a.altKey,user:!0})}function rd(a,b){Me[a]=Oe[a]=b}function sd(a){var b=d(this).data().eq;pd({index:b,slow:a.altKey,user:!0,coo:a._x-ye.offset().left})}function td(a){pd({index:we.index(this)?">":"<",slow:a.altKey,user:!0})}function ud(a){X(a,function(){setTimeout(function(){Q(re)},0),nd(!1)})}function vd(){if(m(),u(),!vd.i){vd.i=!0;var a=e.startindex;(a||e.hash&&c.hash)&&(Ld=L(a||c.hash.replace(/^#/,""),yd,0===ie.index||a,a)),Je=Fd=Gd=Hd=Ld=z(Ld)||0}if(zd){if(wd())return;Cd&&md(Cd,!0),Ed=[],bd(Xc),vd.ok=!0,ie.show({index:Je,time:0}),ie.resize()}else ie.destroy()}function wd(){return!wd.f===Yd?(wd.f=Yd,Je=zd-1-Je,ie.reverse(),!0):void 0}function xd(){xd.ok||(xd.ok=!0,fd("ready"))}Cc=d("html"),Dc=d("body");var yd,zd,Ad,Bd,Cd,Dd,Ed,Fd,Gd,Hd,Id,Jd,Kd,Ld,Md,Nd,Od,Pd,Qd,Rd,Sd,Td,Ud,Vd,Wd,Xd,Yd,Zd,$d,_d,ae,be,ce,de,ee,fe,ge,he,ie=this,je=d.now(),ke=ib+je,le=a[0],me=1,ne=a.data(),oe=d("<style></style>"),pe=d(N(Yb)),qe=d(N(kb)),re=d(N(xb)).appendTo(qe),se=(re[0],d(N(Ab)).appendTo(re)),te=d(),ue=d(N(Db+" "+Fb+rc)),ve=d(N(Db+" "+Gb+rc)),we=ue.add(ve).appendTo(re),xe=d(N(Ib)),ye=d(N(Hb)).appendTo(xe),ze=d(N(Jb)).appendTo(ye),Ae=d(),Be=d(),Ce=(se.data(),ze.data(),d(N(jc)).appendTo(ze)),De=d(N($b+rc)),Ee=De[0],Fe=d(N(mc)),Ge=d(N(nc)).appendTo(re),He=Ge[0],Ie=d(N(qc)),Je=!1,Ke={},Le={},Me={},Ne={},Oe={},Pe={},Qe={},Re={},Se=0,Te=[];
qe[Xc]=d(N(yb)),qe[Zc]=d(N(Mb+" "+Ob+rc,N(ic))),qe[Yc]=d(N(Mb+" "+Nb+rc,N(hc))),Qe[Xc]=[],Qe[Zc]=[],Qe[Yc]=[],Re[Xc]={},qe.addClass(Ic?mb:lb).toggleClass(qb,!e.controlsonstart),ne.fotorama=this,ie.startAutoplay=function(a){return ie.autoplay?this:(ce=de=!1,t(a||e.autoplay),jd(),this)},ie.stopAutoplay=function(){return ie.autoplay&&(ce=de=!0,jd()),this},ie.show=function(a){var b;"object"!=typeof a?(b=a,a={}):b=a.index,b=">"===b?Gd+1:"<"===b?Gd-1:"<<"===b?0:">>"===b?zd-1:b,b=isNaN(b)?L(b,yd,!0):b,b="undefined"==typeof b?Je||0:b,ie.activeIndex=Je=z(b),Id=E(Je),Jd=U(Je),Kd=x(Je+(Yd?-1:1)),Ed=[Je,Id,Jd],Gd=Md?b:Je;var c=Math.abs(Hd-Gd),d=w(a.time,function(){return Math.min(Vd*(1+(c-1)/12),2*Vd)}),f=a.overPos;a.slow&&(d*=10);var g=Dd;ie.activeFrame=Dd=yd[Je];var i=g===Dd&&!a.user;md(Cd,Dd.i!==yd[x(Fd)].i),lc(Ed,"stage"),tc(Mc?[Gd]:[Gd,E(Gd),U(Gd)]),rd("go",!0),i||fd("show",{user:a.user,time:d}),ce=!0;var j=ie.show.onEnd=function(b){if(!j.ok){if(j.ok=!0,b||cd(!0),i||fd("showend",{user:a.user}),!b&&Wd&&Wd!==e.transition)return ie.setOptions({transition:Wd}),void(Wd=!1);Sb(),Pb(Ed,"stage"),rd("go",!1),Hc(),od(),id(),jd()}};if(Sd){var k=Dd[Xc],l=Je!==Hd?yd[Hd][Xc]:null;ab(k,l,te,{time:d,method:e.transition,onEnd:j},Te)}else _(se,{pos:-r(Gd,Le.w,e.margin,Fd),overPos:f,time:d,onEnd:j});if(Gc(),Nd){Tc();var m=y(Je+h(Gd-Hd,-1,1));Rc({time:d,coo:m!==Je&&a.coo,guessIndex:"undefined"!=typeof a.coo?m:Je,keep:i}),Od&&Oc(d)}return be="undefined"!=typeof Hd&&Hd!==Je,Hd=Je,e.hash&&be&&!ie.eq&&H(Dd.id||Je+1),this},ie.requestFullScreen=function(){return Qd&&!ie.fullScreen&&(_d=Ec.scrollTop(),ae=Ec.scrollLeft(),Q(Ec),rd("x",!0),ee=d.extend({},Le),a.addClass(Zb).appendTo(Dc.addClass(jb)),Cc.addClass(jb),md(Cd,!0,!0),ie.fullScreen=!0,Rd&&vc.request(le),ie.resize(),Pb(Ed,"stage"),Sb(),fd("fullscreenenter")),this},ie.cancelFullScreen=function(){return Rd&&vc.is()?vc.cancel(b):kd(),this},ie.toggleFullScreen=function(){return ie[(ie.fullScreen?"cancel":"request")+"FullScreen"]()},T(b,vc.event,function(){!yd||vc.is()||Cd||kd()}),ie.resize=function(a){if(!yd)return this;var b=arguments[1]||0,c=arguments[2];ed(ie.fullScreen?{width:"100%",maxwidth:null,minwidth:null,height:"100%",maxheight:null,minheight:null}:R(a),[Le,c||ie.fullScreen||e]);var d=Le.width,f=Le.height,g=Le.ratio,i=Ec.height()-(Nd?ye.height():0);return q(d)&&(qe.addClass(ub).css({width:d,minWidth:Le.minwidth||0,maxWidth:Le.maxwidth||ad}),d=Le.W=Le.w=qe.width(),Le.nw=Nd&&p(e.navwidth,d)||d,e.glimpse&&(Le.w-=Math.round(2*(p(e.glimpse,d)||0))),se.css({width:Le.w,marginLeft:(Le.W-Le.w)/2}),f=p(f,i),f=f||g&&d/g,f&&(d=Math.round(d),f=Le.h=Math.round(h(f,p(Le.minheight,i),p(Le.maxheight,i))),re.stop().animate({width:d,height:f},b,function(){qe.removeClass(ub)}),cd(),Nd&&(ye.stop().animate({width:Le.nw},b),Rc({guessIndex:Je,time:b,keep:!0}),Od&&wc.nav&&Oc(b)),$d=c||!0,xd())),Se=re.offset().left,this},ie.setOptions=function(a){return d.extend(e,a),vd(),this},ie.shuffle=function(){return yd&&O(yd)&&vd(),this},ie.destroy=function(){return ie.cancelFullScreen(),ie.stopAutoplay(),yd=ie.data=null,j(),Ed=[],bd(Xc),vd.ok=!1,this},ie.playVideo=function(){var a=Dd,b=a.video,c=Je;return"object"==typeof b&&a.videoReady&&(Rd&&ie.fullScreen&&ie.cancelFullScreen(),G(function(){return!vc.is()||c!==Je},function(){c===Je&&(a.$video=a.$video||d(d.Fotorama.jst.video(b)),a.$video.appendTo(a[Xc]),qe.addClass(nb),Cd=a.$video,o(),we.blur(),De.blur(),fd("loadvideo"))})),this},ie.stopVideo=function(){return md(Cd,!0,!0),this},re.on("mousemove",od),Me=db(se,{onStart:gd,onMove:function(a,b){ld(re,b.edge)},onTouchEnd:hd,onEnd:function(a){ld(re);var b=(Nc&&!ge||a.touch)&&e.arrows&&"always"!==e.arrows;if(a.moved||b&&a.pos!==a.newPos&&!a.control){var c=s(a.newPos,Le.w,e.margin,Fd);ie.show({index:c,time:Sd?Vd:a.time,overPos:a.overPos,user:!0})}else a.aborted||a.control||qd(a.startEvent,b)},timeLow:1,timeHigh:1,friction:2,select:"."+Xb+", ."+Xb+" *",$wrap:re}),Oe=db(ze,{onStart:gd,onMove:function(a,b){ld(ye,b.edge)},onTouchEnd:hd,onEnd:function(a){function b(){Rc.l=a.newPos,id(),jd(),uc(a.newPos,!0)}if(a.moved)a.pos!==a.newPos?(ce=!0,_(ze,{time:a.time,pos:a.newPos,overPos:a.overPos,onEnd:b}),uc(a.newPos),Xd&&ld(ye,K(a.newPos,Oe.min,Oe.max))):b();else{var c=a.$target.closest("."+Mb,ze)[0];c&&sd.call(c,a.startEvent)}},timeLow:.5,timeHigh:2,friction:5,$wrap:ye}),Ne=eb(re,{shift:!0,onEnd:function(a,b){gd(),hd(),ie.show({index:b,slow:a.altKey})}}),Pe=eb(ye,{onEnd:function(a,b){gd(),hd();var c=v(ze)+.25*b;ze.css(k(h(c,Oe.min,Oe.max))),Xd&&ld(ye,K(c,Oe.min,Oe.max)),Pe.prevent={"<":c>=Oe.max,">":c<=Oe.min},clearTimeout(Pe.t),Pe.t=setTimeout(function(){Rc.l=c,uc(c,!0)},Pc),uc(c)}}),qe.hover(function(){setTimeout(function(){fe||nd(!(ge=!0))},0)},function(){ge&&nd(!(ge=!1))}),M(we,function(a){Y(a),td.call(this,a)},{onStart:function(){gd(),Me.control=!0},onTouchEnd:hd}),we.each(function(){W(this,function(a){td.call(this,a)}),ud(this)}),W(Ee,ie.toggleFullScreen),ud(Ee),d.each("load push pop shift unshift reverse sort splice".split(" "),function(a,b){ie[b]=function(){return yd=yd||[],"load"!==b?Array.prototype[b].apply(yd,arguments):arguments[0]&&"object"==typeof arguments[0]&&arguments[0].length&&(yd=P(arguments[0])),vd(),ie}}),vd()},d.fn.fotorama=function(b){return this.each(function(){var c=this,e=d(this),f=e.data(),g=f.fotorama;g?g.setOptions(b,!0):G(function(){return!E(c)},function(){f.urtext=e.html(),new d.Fotorama(e,d.extend({},cd,a.fotoramaDefaults,b,f))})})},d.Fotorama.instances=[],d.Fotorama.cache={},d.Fotorama.measures={},d=d||{},d.Fotorama=d.Fotorama||{},d.Fotorama.jst=d.Fotorama.jst||{},d.Fotorama.jst.style=function(a){{var b,c="";tc.escape}return c+=".fotorama"+(null==(b=a.s)?"":b)+" .fotorama__nav--thumbs .fotorama__nav__frame{\npadding:"+(null==(b=a.m)?"":b)+"px;\nheight:"+(null==(b=a.h)?"":b)+"px}\n.fotorama"+(null==(b=a.s)?"":b)+" .fotorama__thumb-border{\nheight:"+(null==(b=a.h-a.b*(a.q?0:2))?"":b)+"px;\nborder-width:"+(null==(b=a.b)?"":b)+"px;\nmargin-top:"+(null==(b=a.m)?"":b)+"px}"},d.Fotorama.jst.video=function(a){function b(){c+=d.call(arguments,"")}var c="",d=(tc.escape,Array.prototype.join);return c+='<div class="fotorama__video"><iframe src="',b(("youtube"==a.type?a.p+"youtube.com/embed/"+a.id+"?autoplay=1":"vimeo"==a.type?a.p+"player.vimeo.com/video/"+a.id+"?autoplay=1&badge=0":a.id)+(a.s&&"custom"!=a.type?"&"+a.s:"")),c+='" frameborder="0" allowfullscreen></iframe></div>\n'},d(function(){d("."+ib+':not([data-auto="false"])').fotorama()})}(window,document,location,"undefined"!=typeof jQuery&&jQuery);
/**
 * sifter.js
 * Copyright (c) 2013 Brian Reavis & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@thirdroute.com>
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define('sifter', factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.Sifter = factory();
  }
}(this, function() {

  /**
   * Textually searches arrays and hashes of objects
   * by property (or multiple properties). Designed
   * specifically for autocomplete.
   *
   * @constructor
   * @param {array|object} items
   * @param {object} items
   */
  var Sifter = function(items, settings) {
    this.items = items;
    this.settings = settings || {diacritics: true};
  };

  /**
   * Splits a search string into an array of individual
   * regexps to be used to match results.
   *
   * @param {string} query
   * @returns {array}
   */
  Sifter.prototype.tokenize = function(query) {
    query = trim(String(query || '').toLowerCase());
    if (!query || !query.length) return [];

    var i, n, regex, letter;
    var tokens = [];
    var words = query.split(/ +/);

    for (i = 0, n = words.length; i < n; i++) {
      regex = escape_regex(words[i]);
      if (this.settings.diacritics) {
        for (letter in DIACRITICS) {
          if (DIACRITICS.hasOwnProperty(letter)) {
            regex = regex.replace(new RegExp(letter, 'g'), DIACRITICS[letter]);
          }
        }
      }
      tokens.push({
        string : words[i],
        regex  : new RegExp(regex, 'i')
      });
    }

    return tokens;
  };

  /**
   * Iterates over arrays and hashes.
   *
   * ```
   * this.iterator(this.items, function(item, id) {
   *    // invoked for each item
   * });
   * ```
   *
   * @param {array|object} object
   */
  Sifter.prototype.iterator = function(object, callback) {
    var iterator;
    if (is_array(object)) {
      iterator = Array.prototype.forEach || function(callback) {
        for (var i = 0, n = this.length; i < n; i++) {
          callback(this[i], i, this);
        }
      };
    } else {
      iterator = function(callback) {
        for (var key in this) {
          if (this.hasOwnProperty(key)) {
            callback(this[key], key, this);
          }
        }
      };
    }

    iterator.apply(object, [callback]);
  };

  /**
   * Returns a function to be used to score individual results.
   *
   * Good matches will have a higher score than poor matches.
   * If an item is not a match, 0 will be returned by the function.
   *
   * @param {object|string} search
   * @param {object} options (optional)
   * @returns {function}
   */
  Sifter.prototype.getScoreFunction = function(search, options) {
    var self, fields, tokens, token_count;

    self        = this;
    search      = self.prepareSearch(search, options);
    tokens      = search.tokens;
    fields      = search.options.fields;
    token_count = tokens.length;

    /**
     * Calculates how close of a match the
     * given value is against a search token.
     *
     * @param {mixed} value
     * @param {object} token
     * @return {number}
     */
    var scoreValue = function(value, token) {
      var score, pos;

      if (!value) return 0;
      value = String(value || '');
      pos = value.search(token.regex);
      if (pos === -1) return 0;
      score = token.string.length / value.length;
      if (pos === 0) score += 0.5;
      return score;
    };

    /**
     * Calculates the score of an object
     * against the search query.
     *
     * @param {object} token
     * @param {object} data
     * @return {number}
     */
    var scoreObject = (function() {
      var field_count = fields.length;
      if (!field_count) {
        return function() { return 0; };
      }
      if (field_count === 1) {
        return function(token, data) {
          return scoreValue(data[fields[0]], token);
        };
      }
      return function(token, data) {
        for (var i = 0, sum = 0; i < field_count; i++) {
          sum += scoreValue(data[fields[i]], token);
        }
        return sum / field_count;
      };
    })();

    if (!token_count) {
      return function() { return 0; };
    }
    if (token_count === 1) {
      return function(data) {
        return scoreObject(tokens[0], data);
      };
    }

    if (search.options.conjunction === 'and') {
      return function(data) {
        var score;
        for (var i = 0, sum = 0; i < token_count; i++) {
          score = scoreObject(tokens[i], data);
          if (score <= 0) return 0;
          sum += score;
        }
        return sum / token_count;
      };
    } else {
      return function(data) {
        for (var i = 0, sum = 0; i < token_count; i++) {
          sum += scoreObject(tokens[i], data);
        }
        return sum / token_count;
      };
    }
  };

  /**
   * Returns a function that can be used to compare two
   * results, for sorting purposes. If no sorting should
   * be performed, `null` will be returned.
   *
   * @param {string|object} search
   * @param {object} options
   * @return function(a,b)
   */
  Sifter.prototype.getSortFunction = function(search, options) {
    var i, n, self, field, fields, fields_count, multiplier, multipliers, get_field, implicit_score, sort;

    self   = this;
    search = self.prepareSearch(search, options);
    sort   = (!search.query && options.sort_empty) || options.sort;

    /**
     * Fetches the specified sort field value
     * from a search result item.
     *
     * @param  {string} name
     * @param  {object} result
     * @return {mixed}
     */
    get_field = function(name, result) {
      if (name === '$score') return result.score;
      return self.items[result.id][name];
    };

    // parse options
    fields = [];
    if (sort) {
      for (i = 0, n = sort.length; i < n; i++) {
        if (search.query || sort[i].field !== '$score') {
          fields.push(sort[i]);
        }
      }
    }

    // the "$score" field is implied to be the primary
    // sort field, unless it's manually specified
    if (search.query) {
      implicit_score = true;
      for (i = 0, n = fields.length; i < n; i++) {
        if (fields[i].field === '$score') {
          implicit_score = false;
          break;
        }
      }
      if (implicit_score) {
        fields.unshift({field: '$score', direction: 'desc'});
      }
    } else {
      for (i = 0, n = fields.length; i < n; i++) {
        if (fields[i].field === '$score') {
          fields.splice(i, 1);
          break;
        }
      }
    }

    multipliers = [];
    for (i = 0, n = fields.length; i < n; i++) {
      multipliers.push(fields[i].direction === 'desc' ? -1 : 1);
    }

    // build function
    fields_count = fields.length;
    if (!fields_count) {
      return null;
    } else if (fields_count === 1) {
      field = fields[0].field;
      multiplier = multipliers[0];
      return function(a, b) {
        return multiplier * cmp(
          get_field(field, a),
          get_field(field, b)
        );
      };
    } else {
      return function(a, b) {
        var i, result, a_value, b_value, field;
        for (i = 0; i < fields_count; i++) {
          field = fields[i].field;
          result = multipliers[i] * cmp(
            get_field(field, a),
            get_field(field, b)
          );
          if (result) return result;
        }
        return 0;
      };
    }
  };

  /**
   * Parses a search query and returns an object
   * with tokens and fields ready to be populated
   * with results.
   *
   * @param {string} query
   * @param {object} options
   * @returns {object}
   */
  Sifter.prototype.prepareSearch = function(query, options) {
    if (typeof query === 'object') return query;

    options = extend({}, options);

    var option_fields     = options.fields;
    var option_sort       = options.sort;
    var option_sort_empty = options.sort_empty;

    if (option_fields && !is_array(option_fields)) options.fields = [option_fields];
    if (option_sort && !is_array(option_sort)) options.sort = [option_sort];
    if (option_sort_empty && !is_array(option_sort_empty)) options.sort_empty = [option_sort_empty];

    return {
      options : options,
      query   : String(query || '').toLowerCase(),
      tokens  : this.tokenize(query),
      total   : 0,
      items   : []
    };
  };

  /**
   * Searches through all items and returns a sorted array of matches.
   *
   * The `options` parameter can contain:
   *
   *   - fields {string|array}
   *   - sort {array}
   *   - score {function}
   *   - filter {bool}
   *   - limit {integer}
   *
   * Returns an object containing:
   *
   *   - options {object}
   *   - query {string}
   *   - tokens {array}
   *   - total {int}
   *   - items {array}
   *
   * @param {string} query
   * @param {object} options
   * @returns {object}
   */
  Sifter.prototype.search = function(query, options) {
    var self = this, value, score, search, calculateScore;
    var fn_sort;
    var fn_score;

    search  = this.prepareSearch(query, options);
    options = search.options;
    query   = search.query;

    // generate result scoring function
    fn_score = options.score || self.getScoreFunction(search);

    // perform search and sort
    if (query.length) {
      self.iterator(self.items, function(item, id) {
        score = fn_score(item);
        if (options.filter === false || score > 0) {
          search.items.push({'score': score, 'id': id});
        }
      });
    } else {
      self.iterator(self.items, function(item, id) {
        search.items.push({'score': 1, 'id': id});
      });
    }

    fn_sort = self.getSortFunction(search, options);
    if (fn_sort) search.items.sort(fn_sort);

    // apply limits
    search.total = search.items.length;
    if (typeof options.limit === 'number') {
      search.items = search.items.slice(0, options.limit);
    }

    return search;
  };

  // utilities
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var cmp = function(a, b) {
    if (typeof a === 'number' && typeof b === 'number') {
      return a > b ? 1 : (a < b ? -1 : 0);
    }
    a = asciifold(String(a || ''));
    b = asciifold(String(b || ''));
    if (a > b) return 1;
    if (b > a) return -1;
    return 0;
  };

  var extend = function(a, b) {
    var i, n, k, object;
    for (i = 1, n = arguments.length; i < n; i++) {
      object = arguments[i];
      if (!object) continue;
      for (k in object) {
        if (object.hasOwnProperty(k)) {
          a[k] = object[k];
        }
      }
    }
    return a;
  };

  var trim = function(str) {
    return (str + '').replace(/^\s+|\s+$|/g, '');
  };

  var escape_regex = function(str) {
    return (str + '').replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
  };

  var is_array = Array.isArray || ($ && $.isArray) || function(object) {
    return Object.prototype.toString.call(object) === '[object Array]';
  };

  var DIACRITICS = {
    'a': '[aÀÁÂÃÄÅàáâãäåĀāąĄ]',
    'c': '[cÇçćĆčČ]',
    'd': '[dđĐďĎ]',
    'e': '[eÈÉÊËèéêëěĚĒēęĘ]',
    'i': '[iÌÍÎÏìíîïĪī]',
    'l': '[lłŁ]',
    'n': '[nÑñňŇńŃ]',
    'o': '[oÒÓÔÕÕÖØòóôõöøŌō]',
    'r': '[rřŘ]',
    's': '[sŠšśŚ]',
    't': '[tťŤ]',
    'u': '[uÙÚÛÜùúûüůŮŪū]',
    'y': '[yŸÿýÝ]',
    'z': '[zŽžżŻźŹ]'
  };

  var asciifold = (function() {
    var i, n, k, chunk;
    var foreignletters = '';
    var lookup = {};
    for (k in DIACRITICS) {
      if (DIACRITICS.hasOwnProperty(k)) {
        chunk = DIACRITICS[k].substring(2, DIACRITICS[k].length - 1);
        foreignletters += chunk;
        for (i = 0, n = chunk.length; i < n; i++) {
          lookup[chunk.charAt(i)] = k;
        }
      }
    }
    var regexp = new RegExp('[' +  foreignletters + ']', 'g');
    return function(str) {
      return str.replace(regexp, function(foreignletter) {
        return lookup[foreignletter];
      }).toLowerCase();
    };
  })();


  // export
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  return Sifter;
}));



/**
 * microplugin.js
 * Copyright (c) 2013 Brian Reavis & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@thirdroute.com>
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define('microplugin', factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.MicroPlugin = factory();
  }
}(this, function() {
  var MicroPlugin = {};

  MicroPlugin.mixin = function(Interface) {
    Interface.plugins = {};

    /**
     * Initializes the listed plugins (with options).
     * Acceptable formats:
     *
     * List (without options):
     *   ['a', 'b', 'c']
     *
     * List (with options):
     *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]
     *
     * Hash (with options):
     *   {'a': { ... }, 'b': { ... }, 'c': { ... }}
     *
     * @param {mixed} plugins
     */
    Interface.prototype.initializePlugins = function(plugins) {
      var i, n, key;
      var self  = this;
      var queue = [];

      self.plugins = {
        names     : [],
        settings  : {},
        requested : {},
        loaded    : {}
      };

      if (utils.isArray(plugins)) {
        for (i = 0, n = plugins.length; i < n; i++) {
          if (typeof plugins[i] === 'string') {
            queue.push(plugins[i]);
          } else {
            self.plugins.settings[plugins[i].name] = plugins[i].options;
            queue.push(plugins[i].name);
          }
        }
      } else if (plugins) {
        for (key in plugins) {
          if (plugins.hasOwnProperty(key)) {
            self.plugins.settings[key] = plugins[key];
            queue.push(key);
          }
        }
      }

      while (queue.length) {
        self.require(queue.shift());
      }
    };

    Interface.prototype.loadPlugin = function(name) {
      var self    = this;
      var plugins = self.plugins;
      var plugin  = Interface.plugins[name];

      if (!Interface.plugins.hasOwnProperty(name)) {
        throw new Error('Unable to find "' +  name + '" plugin');
      }

      plugins.requested[name] = true;
      plugins.loaded[name] = plugin.fn.apply(self, [self.plugins.settings[name] || {}]);
      plugins.names.push(name);
    };

    /**
     * Initializes a plugin.
     *
     * @param {string} name
     */
    Interface.prototype.require = function(name) {
      var self = this;
      var plugins = self.plugins;

      if (!self.plugins.loaded.hasOwnProperty(name)) {
        if (plugins.requested[name]) {
          throw new Error('Plugin has circular dependency ("' + name + '")');
        }
        self.loadPlugin(name);
      }

      return plugins.loaded[name];
    };

    /**
     * Registers a plugin.
     *
     * @param {string} name
     * @param {function} fn
     */
    Interface.define = function(name, fn) {
      Interface.plugins[name] = {
        'name' : name,
        'fn'   : fn
      };
    };
  };

  var utils = {
    isArray: Array.isArray || function(vArg) {
      return Object.prototype.toString.call(vArg) === '[object Array]';
    }
  };

  return MicroPlugin;
}));

/**
 * selectize.js (v0.12.1)
 * Copyright (c) 2013–2015 Brian Reavis & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@thirdroute.com>
 */

/*jshint curly:false */
/*jshint browser:true */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define('selectize', ['jquery','sifter','microplugin'], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('jquery'), require('sifter'), require('microplugin'));
  } else {
    root.Selectize = factory(root.jQuery, root.Sifter, root.MicroPlugin);
  }
}(this, function($, Sifter, MicroPlugin) {
  'use strict';

  var highlight = function($element, pattern) {
    if (typeof pattern === 'string' && !pattern.length) return;
    var regex = (typeof pattern === 'string') ? new RegExp(pattern, 'i') : pattern;
  
    var highlight = function(node) {
      var skip = 0;
      if (node.nodeType === 3) {
        var pos = node.data.search(regex);
        if (pos >= 0 && node.data.length > 0) {
          var match = node.data.match(regex);
          var spannode = document.createElement('span');
          spannode.className = 'highlight';
          var middlebit = node.splitText(pos);
          var endbit = middlebit.splitText(match[0].length);
          var middleclone = middlebit.cloneNode(true);
          spannode.appendChild(middleclone);
          middlebit.parentNode.replaceChild(spannode, middlebit);
          skip = 1;
        }
      } else if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {
        for (var i = 0; i < node.childNodes.length; ++i) {
          i += highlight(node.childNodes[i]);
        }
      }
      return skip;
    };
  
    return $element.each(function() {
      highlight(this);
    });
  };
  
  var MicroEvent = function() {};
  MicroEvent.prototype = {
    on: function(event, fct){
      this._events = this._events || {};
      this._events[event] = this._events[event] || [];
      this._events[event].push(fct);
    },
    off: function(event, fct){
      var n = arguments.length;
      if (n === 0) return delete this._events;
      if (n === 1) return delete this._events[event];
  
      this._events = this._events || {};
      if (event in this._events === false) return;
      this._events[event].splice(this._events[event].indexOf(fct), 1);
    },
    trigger: function(event /* , args... */){
      this._events = this._events || {};
      if (event in this._events === false) return;
      for (var i = 0; i < this._events[event].length; i++){
        this._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
      }
    }
  };
  
  /**
   * Mixin will delegate all MicroEvent.js function in the destination object.
   *
   * - MicroEvent.mixin(Foobar) will make Foobar able to use MicroEvent
   *
   * @param {object} the object which will support MicroEvent
   */
  MicroEvent.mixin = function(destObject){
    var props = ['on', 'off', 'trigger'];
    for (var i = 0; i < props.length; i++){
      destObject.prototype[props[i]] = MicroEvent.prototype[props[i]];
    }
  };
  
  var IS_MAC        = /Mac/.test(navigator.userAgent);
  
  var KEY_A         = 65;
  var KEY_COMMA     = 188;
  var KEY_RETURN    = 13;
  var KEY_ESC       = 27;
  var KEY_LEFT      = 37;
  var KEY_UP        = 38;
  var KEY_P         = 80;
  var KEY_RIGHT     = 39;
  var KEY_DOWN      = 40;
  var KEY_N         = 78;
  var KEY_BACKSPACE = 8;
  var KEY_DELETE    = 46;
  var KEY_SHIFT     = 16;
  var KEY_CMD       = IS_MAC ? 91 : 17;
  var KEY_CTRL      = IS_MAC ? 18 : 17;
  var KEY_TAB       = 9;
  
  var TAG_SELECT    = 1;
  var TAG_INPUT     = 2;
  
  // for now, android support in general is too spotty to support validity
  var SUPPORTS_VALIDITY_API = !/android/i.test(window.navigator.userAgent) && !!document.createElement('form').validity;
  
  var isset = function(object) {
    return typeof object !== 'undefined';
  };
  
  /**
   * Converts a scalar to its best string representation
   * for hash keys and HTML attribute values.
   *
   * Transformations:
   *   'str'     -> 'str'
   *   null      -> ''
   *   undefined -> ''
   *   true      -> '1'
   *   false     -> '0'
   *   0         -> '0'
   *   1         -> '1'
   *
   * @param {string} value
   * @returns {string|null}
   */
  var hash_key = function(value) {
    if (typeof value === 'undefined' || value === null) return null;
    if (typeof value === 'boolean') return value ? '1' : '0';
    return value + '';
  };
  
  /**
   * Escapes a string for use within HTML.
   *
   * @param {string} str
   * @returns {string}
   */
  var escape_html = function(str) {
    return (str + '')
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;');
  };
  
  /**
   * Escapes "$" characters in replacement strings.
   *
   * @param {string} str
   * @returns {string}
   */
  var escape_replace = function(str) {
    return (str + '').replace(/\$/g, '$$$$');
  };
  
  var hook = {};
  
  /**
   * Wraps `method` on `self` so that `fn`
   * is invoked before the original method.
   *
   * @param {object} self
   * @param {string} method
   * @param {function} fn
   */
  hook.before = function(self, method, fn) {
    var original = self[method];
    self[method] = function() {
      fn.apply(self, arguments);
      return original.apply(self, arguments);
    };
  };
  
  /**
   * Wraps `method` on `self` so that `fn`
   * is invoked after the original method.
   *
   * @param {object} self
   * @param {string} method
   * @param {function} fn
   */
  hook.after = function(self, method, fn) {
    var original = self[method];
    self[method] = function() {
      var result = original.apply(self, arguments);
      fn.apply(self, arguments);
      return result;
    };
  };
  
  /**
   * Wraps `fn` so that it can only be invoked once.
   *
   * @param {function} fn
   * @returns {function}
   */
  var once = function(fn) {
    var called = false;
    return function() {
      if (called) return;
      called = true;
      fn.apply(this, arguments);
    };
  };
  
  /**
   * Wraps `fn` so that it can only be called once
   * every `delay` milliseconds (invoked on the falling edge).
   *
   * @param {function} fn
   * @param {int} delay
   * @returns {function}
   */
  var debounce = function(fn, delay) {
    var timeout;
    return function() {
      var self = this;
      var args = arguments;
      window.clearTimeout(timeout);
      timeout = window.setTimeout(function() {
        fn.apply(self, args);
      }, delay);
    };
  };
  
  /**
   * Debounce all fired events types listed in `types`
   * while executing the provided `fn`.
   *
   * @param {object} self
   * @param {array} types
   * @param {function} fn
   */
  var debounce_events = function(self, types, fn) {
    var type;
    var trigger = self.trigger;
    var event_args = {};
  
    // override trigger method
    self.trigger = function() {
      var type = arguments[0];
      if (types.indexOf(type) !== -1) {
        event_args[type] = arguments;
      } else {
        return trigger.apply(self, arguments);
      }
    };
  
    // invoke provided function
    fn.apply(self, []);
    self.trigger = trigger;
  
    // trigger queued events
    for (type in event_args) {
      if (event_args.hasOwnProperty(type)) {
        trigger.apply(self, event_args[type]);
      }
    }
  };
  
  /**
   * A workaround for http://bugs.jquery.com/ticket/6696
   *
   * @param {object} $parent - Parent element to listen on.
   * @param {string} event - Event name.
   * @param {string} selector - Descendant selector to filter by.
   * @param {function} fn - Event handler.
   */
  var watchChildEvent = function($parent, event, selector, fn) {
    $parent.on(event, selector, function(e) {
      var child = e.target;
      while (child && child.parentNode !== $parent[0]) {
        child = child.parentNode;
      }
      e.currentTarget = child;
      return fn.apply(this, [e]);
    });
  };
  
  /**
   * Determines the current selection within a text input control.
   * Returns an object containing:
   *   - start
   *   - length
   *
   * @param {object} input
   * @returns {object}
   */
  var getSelection = function(input) {
    var result = {};
    if ('selectionStart' in input) {
      result.start = input.selectionStart;
      result.length = input.selectionEnd - result.start;
    } else if (document.selection) {
      input.focus();
      var sel = document.selection.createRange();
      var selLen = document.selection.createRange().text.length;
      sel.moveStart('character', -input.value.length);
      result.start = sel.text.length - selLen;
      result.length = selLen;
    }
    return result;
  };
  
  /**
   * Copies CSS properties from one element to another.
   *
   * @param {object} $from
   * @param {object} $to
   * @param {array} properties
   */
  var transferStyles = function($from, $to, properties) {
    var i, n, styles = {};
    if (properties) {
      for (i = 0, n = properties.length; i < n; i++) {
        styles[properties[i]] = $from.css(properties[i]);
      }
    } else {
      styles = $from.css();
    }
    $to.css(styles);
  };
  
  /**
   * Measures the width of a string within a
   * parent element (in pixels).
   *
   * @param {string} str
   * @param {object} $parent
   * @returns {int}
   */
  var measureString = function(str, $parent) {
    if (!str) {
      return 0;
    }
  
    var $test = $('<test>').css({
      position: 'absolute',
      top: -99999,
      left: -99999,
      width: 'auto',
      padding: 0,
      whiteSpace: 'pre'
    }).text(str).appendTo('body');
  
    transferStyles($parent, $test, [
      'letterSpacing',
      'fontSize',
      'fontFamily',
      'fontWeight',
      'textTransform'
    ]);
  
    var width = $test.width();
    $test.remove();
  
    return width;
  };
  
  /**
   * Sets up an input to grow horizontally as the user
   * types. If the value is changed manually, you can
   * trigger the "update" handler to resize:
   *
   * $input.trigger('update');
   *
   * @param {object} $input
   */
  var autoGrow = function($input) {
    var currentWidth = null;
  
    var update = function(e, options) {
      var value, keyCode, printable, placeholder, width;
      var shift, character, selection;
      e = e || window.event || {};
      options = options || {};
  
      if (e.metaKey || e.altKey) return;
      if (!options.force && $input.data('grow') === false) return;
  
      value = $input.val();
      if (e.type && e.type.toLowerCase() === 'keydown') {
        keyCode = e.keyCode;
        printable = (
          (keyCode >= 97 && keyCode <= 122) || // a-z
          (keyCode >= 65 && keyCode <= 90)  || // A-Z
          (keyCode >= 48 && keyCode <= 57)  || // 0-9
          keyCode === 32 // space
        );
  
        if (keyCode === KEY_DELETE || keyCode === KEY_BACKSPACE) {
          selection = getSelection($input[0]);
          if (selection.length) {
            value = value.substring(0, selection.start) + value.substring(selection.start + selection.length);
          } else if (keyCode === KEY_BACKSPACE && selection.start) {
            value = value.substring(0, selection.start - 1) + value.substring(selection.start + 1);
          } else if (keyCode === KEY_DELETE && typeof selection.start !== 'undefined') {
            value = value.substring(0, selection.start) + value.substring(selection.start + 1);
          }
        } else if (printable) {
          shift = e.shiftKey;
          character = String.fromCharCode(e.keyCode);
          if (shift) character = character.toUpperCase();
          else character = character.toLowerCase();
          value += character;
        }
      }
  
      placeholder = $input.attr('placeholder');
      if (!value && placeholder) {
        value = placeholder;
      }
  
      width = measureString(value, $input) + 4;
      if (width !== currentWidth) {
        currentWidth = width;
        $input.width(width);
        $input.triggerHandler('resize');
      }
    };
  
    $input.on('keydown keyup update blur', update);
    update();
  };
  
  var Selectize = function($input, settings) {
    var key, i, n, dir, input, self = this;
    input = $input[0];
    input.selectize = self;
  
    // detect rtl environment
    var computedStyle = window.getComputedStyle && window.getComputedStyle(input, null);
    dir = computedStyle ? computedStyle.getPropertyValue('direction') : input.currentStyle && input.currentStyle.direction;
    dir = dir || $input.parents('[dir]:first').attr('dir') || '';
  
    // setup default state
    $.extend(self, {
      order            : 0,
      settings         : settings,
      $input           : $input,
      tabIndex         : $input.attr('tabindex') || '',
      tagType          : input.tagName.toLowerCase() === 'select' ? TAG_SELECT : TAG_INPUT,
      rtl              : /rtl/i.test(dir),
  
      eventNS          : '.selectize' + (++Selectize.count),
      highlightedValue : null,
      isOpen           : false,
      isDisabled       : false,
      isRequired       : $input.is('[required]'),
      isInvalid        : false,
      isLocked         : false,
      isFocused        : false,
      isInputHidden    : false,
      isSetup          : false,
      isShiftDown      : false,
      isCmdDown        : false,
      isCtrlDown       : false,
      ignoreFocus      : false,
      ignoreBlur       : false,
      ignoreHover      : false,
      hasOptions       : false,
      currentResults   : null,
      lastValue        : '',
      caretPos         : 0,
      loading          : 0,
      loadedSearches   : {},
  
      $activeOption    : null,
      $activeItems     : [],
  
      optgroups        : {},
      options          : {},
      userOptions      : {},
      items            : [],
      renderCache      : {},
      onSearchChange   : settings.loadThrottle === null ? self.onSearchChange : debounce(self.onSearchChange, settings.loadThrottle)
    });
  
    // search system
    self.sifter = new Sifter(this.options, {diacritics: settings.diacritics});
  
    // build options table
    if (self.settings.options) {
      for (i = 0, n = self.settings.options.length; i < n; i++) {
        self.registerOption(self.settings.options[i]);
      }
      delete self.settings.options;
    }
  
    // build optgroup table
    if (self.settings.optgroups) {
      for (i = 0, n = self.settings.optgroups.length; i < n; i++) {
        self.registerOptionGroup(self.settings.optgroups[i]);
      }
      delete self.settings.optgroups;
    }
  
    // option-dependent defaults
    self.settings.mode = self.settings.mode || (self.settings.maxItems === 1 ? 'single' : 'multi');
    if (typeof self.settings.hideSelected !== 'boolean') {
      self.settings.hideSelected = self.settings.mode === 'multi';
    }
  
    self.initializePlugins(self.settings.plugins);
    self.setupCallbacks();
    self.setupTemplates();
    self.setup();
  };
  
  // mixins
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  MicroEvent.mixin(Selectize);
  MicroPlugin.mixin(Selectize);
  
  // methods
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  $.extend(Selectize.prototype, {
  
    /**
     * Creates all elements and sets up event bindings.
     */
    setup: function() {
      var self      = this;
      var settings  = self.settings;
      var eventNS   = self.eventNS;
      var $window   = $(window);
      var $document = $(document);
      var $input    = self.$input;
  
      var $wrapper;
      var $control;
      var $control_input;
      var $dropdown;
      var $dropdown_content;
      var $dropdown_parent;
      var inputMode;
      var timeout_blur;
      var timeout_focus;
      var classes;
      var classes_plugins;
  
      inputMode         = self.settings.mode;
      classes           = $input.attr('class') || '';
  
      $wrapper          = $('<div>').addClass(settings.wrapperClass).addClass(classes).addClass(inputMode);
      $control          = $('<div>').addClass(settings.inputClass).addClass('items').appendTo($wrapper);
      $control_input    = $('<input type="text" autocomplete="off" />').appendTo($control).attr('tabindex', $input.is(':disabled') ? '-1' : self.tabIndex);
      $dropdown_parent  = $(settings.dropdownParent || $wrapper);
      $dropdown         = $('<div>').addClass(settings.dropdownClass).addClass(inputMode).hide().appendTo($dropdown_parent);
      $dropdown_content = $('<div>').addClass(settings.dropdownContentClass).appendTo($dropdown);
  
      if(self.settings.copyClassesToDropdown) {
        $dropdown.addClass(classes);
      }
  
      $wrapper.css({
        width: $input[0].style.width
      });
  
      if (self.plugins.names.length) {
        classes_plugins = 'plugin-' + self.plugins.names.join(' plugin-');
        $wrapper.addClass(classes_plugins);
        $dropdown.addClass(classes_plugins);
      }
  
      if ((settings.maxItems === null || settings.maxItems > 1) && self.tagType === TAG_SELECT) {
        $input.attr('multiple', 'multiple');
      }
  
      if (self.settings.placeholder) {
        $control_input.attr('placeholder', settings.placeholder);
      }
  
      // if splitOn was not passed in, construct it from the delimiter to allow pasting universally
      if (!self.settings.splitOn && self.settings.delimiter) {
        var delimiterEscaped = self.settings.delimiter.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        self.settings.splitOn = new RegExp('\\s*' + delimiterEscaped + '+\\s*');
      }
  
      if ($input.attr('autocorrect')) {
        $control_input.attr('autocorrect', $input.attr('autocorrect'));
      }
  
      if ($input.attr('autocapitalize')) {
        $control_input.attr('autocapitalize', $input.attr('autocapitalize'));
      }
  
      self.$wrapper          = $wrapper;
      self.$control          = $control;
      self.$control_input    = $control_input;
      self.$dropdown         = $dropdown;
      self.$dropdown_content = $dropdown_content;
  
      $dropdown.on('mouseenter', '[data-selectable]', function() { return self.onOptionHover.apply(self, arguments); });
      $dropdown.on('mousedown click', '[data-selectable]', function() { return self.onOptionSelect.apply(self, arguments); });
      watchChildEvent($control, 'mousedown', '*:not(input)', function() { return self.onItemSelect.apply(self, arguments); });
      autoGrow($control_input);
  
      $control.on({
        mousedown : function() { return self.onMouseDown.apply(self, arguments); },
        click     : function() { return self.onClick.apply(self, arguments); }
      });
  
      $control_input.on({
        mousedown : function(e) { e.stopPropagation(); },
        keydown   : function() { return self.onKeyDown.apply(self, arguments); },
        keyup     : function() { return self.onKeyUp.apply(self, arguments); },
        keypress  : function() { return self.onKeyPress.apply(self, arguments); },
        resize    : function() { self.positionDropdown.apply(self, []); },
        blur      : function() { return self.onBlur.apply(self, arguments); },
        focus     : function() { self.ignoreBlur = false; return self.onFocus.apply(self, arguments); },
        paste     : function() { return self.onPaste.apply(self, arguments); }
      });
  
      $document.on('keydown' + eventNS, function(e) {
        self.isCmdDown = e[IS_MAC ? 'metaKey' : 'ctrlKey'];
        self.isCtrlDown = e[IS_MAC ? 'altKey' : 'ctrlKey'];
        self.isShiftDown = e.shiftKey;
      });
  
      $document.on('keyup' + eventNS, function(e) {
        if (e.keyCode === KEY_CTRL) self.isCtrlDown = false;
        if (e.keyCode === KEY_SHIFT) self.isShiftDown = false;
        if (e.keyCode === KEY_CMD) self.isCmdDown = false;
      });
  
      $document.on('mousedown' + eventNS, function(e) {
        if (self.isFocused) {
          // prevent events on the dropdown scrollbar from causing the control to blur
          if (e.target === self.$dropdown[0] || e.target.parentNode === self.$dropdown[0]) {
            return false;
          }
          // blur on click outside
          if (!self.$control.has(e.target).length && e.target !== self.$control[0]) {
            self.blur(e.target);
          }
        }
      });
  
      $window.on(['scroll' + eventNS, 'resize' + eventNS].join(' '), function() {
        if (self.isOpen) {
          self.positionDropdown.apply(self, arguments);
        }
      });
      $window.on('mousemove' + eventNS, function() {
        self.ignoreHover = false;
      });
  
      // store original children and tab index so that they can be
      // restored when the destroy() method is called.
      this.revertSettings = {
        $children : $input.children().detach(),
        tabindex  : $input.attr('tabindex')
      };
  
      $input.attr('tabindex', -1).hide().after(self.$wrapper);
  
      if ($.isArray(settings.items)) {
        self.setValue(settings.items);
        delete settings.items;
      }
  
      // feature detect for the validation API
      if (SUPPORTS_VALIDITY_API) {
        $input.on('invalid' + eventNS, function(e) {
          e.preventDefault();
          self.isInvalid = true;
          self.refreshState();
        });
      }
  
      self.updateOriginalInput();
      self.refreshItems();
      self.refreshState();
      self.updatePlaceholder();
      self.isSetup = true;
  
      if ($input.is(':disabled')) {
        self.disable();
      }
  
      self.on('change', this.onChange);
  
      $input.data('selectize', self);
      $input.addClass('selectized');
      self.trigger('initialize');
  
      // preload options
      if (settings.preload === true) {
        self.onSearchChange('');
      }
  
    },
  
    /**
     * Sets up default rendering functions.
     */
    setupTemplates: function() {
      var self = this;
      var field_label = self.settings.labelField;
      var field_optgroup = self.settings.optgroupLabelField;
  
      var templates = {
        'optgroup': function(data) {
          return '<div class="optgroup">' + data.html + '</div>';
        },
        'optgroup_header': function(data, escape) {
          return '<div class="optgroup-header">' + escape(data[field_optgroup]) + '</div>';
        },
        'option': function(data, escape) {
          return '<div class="option">' + escape(data[field_label]) + '</div>';
        },
        'item': function(data, escape) {
          return '<div class="item">' + escape(data[field_label]) + '</div>';
        },
        'option_create': function(data, escape) {
          return '<div class="create">Add <strong>' + escape(data.input) + '</strong>&hellip;</div>';
        }
      };
  
      self.settings.render = $.extend({}, templates, self.settings.render);
    },
  
    /**
     * Maps fired events to callbacks provided
     * in the settings used when creating the control.
     */
    setupCallbacks: function() {
      var key, fn, callbacks = {
        'initialize'      : 'onInitialize',
        'change'          : 'onChange',
        'item_add'        : 'onItemAdd',
        'item_remove'     : 'onItemRemove',
        'clear'           : 'onClear',
        'option_add'      : 'onOptionAdd',
        'option_remove'   : 'onOptionRemove',
        'option_clear'    : 'onOptionClear',
        'optgroup_add'    : 'onOptionGroupAdd',
        'optgroup_remove' : 'onOptionGroupRemove',
        'optgroup_clear'  : 'onOptionGroupClear',
        'dropdown_open'   : 'onDropdownOpen',
        'dropdown_close'  : 'onDropdownClose',
        'type'            : 'onType',
        'load'            : 'onLoad',
        'focus'           : 'onFocus',
        'blur'            : 'onBlur'
      };
  
      for (key in callbacks) {
        if (callbacks.hasOwnProperty(key)) {
          fn = this.settings[callbacks[key]];
          if (fn) this.on(key, fn);
        }
      }
    },
  
    /**
     * Triggered when the main control element
     * has a click event.
     *
     * @param {object} e
     * @return {boolean}
     */
    onClick: function(e) {
      var self = this;
  
      // necessary for mobile webkit devices (manual focus triggering
      // is ignored unless invoked within a click event)
      if (!self.isFocused) {
        self.focus();
        e.preventDefault();
      }
    },
  
    /**
     * Triggered when the main control element
     * has a mouse down event.
     *
     * @param {object} e
     * @return {boolean}
     */
    onMouseDown: function(e) {
      var self = this;
      var defaultPrevented = e.isDefaultPrevented();
      var $target = $(e.target);
  
      if (self.isFocused) {
        // retain focus by preventing native handling. if the
        // event target is the input it should not be modified.
        // otherwise, text selection within the input won't work.
        if (e.target !== self.$control_input[0]) {
          if (self.settings.mode === 'single') {
            // toggle dropdown
            self.isOpen ? self.close() : self.open();
          } else if (!defaultPrevented) {
            self.setActiveItem(null);
          }
          return false;
        }
      } else {
        // give control focus
        if (!defaultPrevented) {
          window.setTimeout(function() {
            self.focus();
          }, 0);
        }
      }
    },
  
    /**
     * Triggered when the value of the control has been changed.
     * This should propagate the event to the original DOM
     * input / select element.
     */
    onChange: function() {
      this.$input.trigger('change');
    },
  
    /**
     * Triggered on <input> paste.
     *
     * @param {object} e
     * @returns {boolean}
     */
    onPaste: function(e) {
      var self = this;
      if (self.isFull() || self.isInputHidden || self.isLocked) {
        e.preventDefault();
      } else {
        // If a regex or string is included, this will split the pasted
        // input and create Items for each separate value
        if (self.settings.splitOn) {
          setTimeout(function() {
            var splitInput = $.trim(self.$control_input.val() || '').split(self.settings.splitOn);
            for (var i = 0, n = splitInput.length; i < n; i++) {
              self.createItem(splitInput[i]);
            }
          }, 0);
        }
      }
    },
  
    /**
     * Triggered on <input> keypress.
     *
     * @param {object} e
     * @returns {boolean}
     */
    onKeyPress: function(e) {
      if (this.isLocked) return e && e.preventDefault();
      var character = String.fromCharCode(e.keyCode || e.which);
      if (this.settings.create && this.settings.mode === 'multi' && character === this.settings.delimiter) {
        this.createItem();
        e.preventDefault();
        return false;
      }
    },
  
    /**
     * Triggered on <input> keydown.
     *
     * @param {object} e
     * @returns {boolean}
     */
    onKeyDown: function(e) {
      var isInput = e.target === this.$control_input[0];
      var self = this;
  
      if (self.isLocked) {
        if (e.keyCode !== KEY_TAB) {
          e.preventDefault();
        }
        return;
      }
  
      switch (e.keyCode) {
        case KEY_A:
          if (self.isCmdDown) {
            self.selectAll();
            return;
          }
          break;
        case KEY_ESC:
          if (self.isOpen) {
            e.preventDefault();
            e.stopPropagation();
            self.close();
          }
          return;
        case KEY_N:
          if (!e.ctrlKey || e.altKey) break;
        case KEY_DOWN:
          if (!self.isOpen && self.hasOptions) {
            self.open();
          } else if (self.$activeOption) {
            self.ignoreHover = true;
            var $next = self.getAdjacentOption(self.$activeOption, 1);
            if ($next.length) self.setActiveOption($next, true, true);
          }
          e.preventDefault();
          return;
        case KEY_P:
          if (!e.ctrlKey || e.altKey) break;
        case KEY_UP:
          if (self.$activeOption) {
            self.ignoreHover = true;
            var $prev = self.getAdjacentOption(self.$activeOption, -1);
            if ($prev.length) self.setActiveOption($prev, true, true);
          }
          e.preventDefault();
          return;
        case KEY_RETURN:
          if (self.isOpen && self.$activeOption) {
            self.onOptionSelect({currentTarget: self.$activeOption});
            e.preventDefault();
          }
          return;
        case KEY_LEFT:
          self.advanceSelection(-1, e);
          return;
        case KEY_RIGHT:
          self.advanceSelection(1, e);
          return;
        case KEY_TAB:
          if (self.settings.selectOnTab && self.isOpen && self.$activeOption) {
            self.onOptionSelect({currentTarget: self.$activeOption});
  
            // Default behaviour is to jump to the next field, we only want this
            // if the current field doesn't accept any more entries
            if (!self.isFull()) {
              e.preventDefault();
            }
          }
          if (self.settings.create && self.createItem()) {
            e.preventDefault();
          }
          return;
        case KEY_BACKSPACE:
        case KEY_DELETE:
          self.deleteSelection(e);
          return;
      }
  
      if ((self.isFull() || self.isInputHidden) && !(IS_MAC ? e.metaKey : e.ctrlKey)) {
        e.preventDefault();
        return;
      }
    },
  
    /**
     * Triggered on <input> keyup.
     *
     * @param {object} e
     * @returns {boolean}
     */
    onKeyUp: function(e) {
      var self = this;
  
      if (self.isLocked) return e && e.preventDefault();
      var value = self.$control_input.val() || '';
      if (self.lastValue !== value) {
        self.lastValue = value;
        self.onSearchChange(value);
        self.refreshOptions();
        self.trigger('type', value);
      }
    },
  
    /**
     * Invokes the user-provide option provider / loader.
     *
     * Note: this function is debounced in the Selectize
     * constructor (by `settings.loadDelay` milliseconds)
     *
     * @param {string} value
     */
    onSearchChange: function(value) {
      var self = this;
      var fn = self.settings.load;
      if (!fn) return;
      if (self.loadedSearches.hasOwnProperty(value)) return;
      self.loadedSearches[value] = true;
      self.load(function(callback) {
        fn.apply(self, [value, callback]);
      });
    },
  
    /**
     * Triggered on <input> focus.
     *
     * @param {object} e (optional)
     * @returns {boolean}
     */
    onFocus: function(e) {
      var self = this;
      var wasFocused = self.isFocused;
  
      if (self.isDisabled) {
        self.blur();
        e && e.preventDefault();
        return false;
      }
  
      if (self.ignoreFocus) return;
      self.isFocused = true;
      if (self.settings.preload === 'focus') self.onSearchChange('');
  
      if (!wasFocused) self.trigger('focus');
  
      if (!self.$activeItems.length) {
        self.showInput();
        self.setActiveItem(null);
        self.refreshOptions(!!self.settings.openOnFocus);
      }
  
      self.refreshState();
    },
  
    /**
     * Triggered on <input> blur.
     *
     * @param {object} e
     * @param {Element} dest
     */
    onBlur: function(e, dest) {
      var self = this;
      if (!self.isFocused) return;
      self.isFocused = false;
  
      if (self.ignoreFocus) {
        return;
      } else if (!self.ignoreBlur && document.activeElement === self.$dropdown_content[0]) {
        // necessary to prevent IE closing the dropdown when the scrollbar is clicked
        self.ignoreBlur = true;
        self.onFocus(e);
        return;
      }
  
      var deactivate = function() {
        self.close();
        self.setTextboxValue('');
        self.setActiveItem(null);
        self.setActiveOption(null);
        self.setCaret(self.items.length);
        self.refreshState();
  
        // IE11 bug: element still marked as active
        (dest || document.body).focus();
  
        self.ignoreFocus = false;
        self.trigger('blur');
      };
  
      self.ignoreFocus = true;
      if (self.settings.create && self.settings.createOnBlur) {
        self.createItem(null, false, deactivate);
      } else {
        deactivate();
      }
    },
  
    /**
     * Triggered when the user rolls over
     * an option in the autocomplete dropdown menu.
     *
     * @param {object} e
     * @returns {boolean}
     */
    onOptionHover: function(e) {
      if (this.ignoreHover) return;
      this.setActiveOption(e.currentTarget, false);
    },
  
    /**
     * Triggered when the user clicks on an option
     * in the autocomplete dropdown menu.
     *
     * @param {object} e
     * @returns {boolean}
     */
    onOptionSelect: function(e) {
      var value, $target, $option, self = this;
  
      if (e.preventDefault) {
        e.preventDefault();
        e.stopPropagation();
      }
  
      $target = $(e.currentTarget);
      if ($target.hasClass('create')) {
        self.createItem(null, function() {
          if (self.settings.closeAfterSelect) {
            self.close();
          }
        });
      } else {
        value = $target.attr('data-value');
        if (typeof value !== 'undefined') {
          self.lastQuery = null;
          self.setTextboxValue('');
          self.addItem(value);
          if (self.settings.closeAfterSelect) {
            self.close();
          } else if (!self.settings.hideSelected && e.type && /mouse/.test(e.type)) {
            self.setActiveOption(self.getOption(value));
          }
        }
      }
    },
  
    /**
     * Triggered when the user clicks on an item
     * that has been selected.
     *
     * @param {object} e
     * @returns {boolean}
     */
    onItemSelect: function(e) {
      var self = this;
  
      if (self.isLocked) return;
      if (self.settings.mode === 'multi') {
        e.preventDefault();
        self.setActiveItem(e.currentTarget, e);
      }
    },
  
    /**
     * Invokes the provided method that provides
     * results to a callback---which are then added
     * as options to the control.
     *
     * @param {function} fn
     */
    load: function(fn) {
      var self = this;
      var $wrapper = self.$wrapper.addClass(self.settings.loadingClass);
  
      self.loading++;
      fn.apply(self, [function(results) {
        self.loading = Math.max(self.loading - 1, 0);
        if (results && results.length) {
          self.addOption(results);
          self.refreshOptions(self.isFocused && !self.isInputHidden);
        }
        if (!self.loading) {
          $wrapper.removeClass(self.settings.loadingClass);
        }
        self.trigger('load', results);
      }]);
    },
  
    /**
     * Sets the input field of the control to the specified value.
     *
     * @param {string} value
     */
    setTextboxValue: function(value) {
      var $input = this.$control_input;
      var changed = $input.val() !== value;
      if (changed) {
        $input.val(value).triggerHandler('update');
        this.lastValue = value;
      }
    },
  
    /**
     * Returns the value of the control. If multiple items
     * can be selected (e.g. <select multiple>), this returns
     * an array. If only one item can be selected, this
     * returns a string.
     *
     * @returns {mixed}
     */
    getValue: function() {
      if (this.tagType === TAG_SELECT && this.$input.attr('multiple')) {
        return this.items;
      } else {
        return this.items.join(this.settings.delimiter);
      }
    },
  
    /**
     * Resets the selected items to the given value.
     *
     * @param {mixed} value
     */
    setValue: function(value, silent) {
      var events = silent ? [] : ['change'];
  
      debounce_events(this, events, function() {
        this.clear(silent);
        this.addItems(value, silent);
      });
    },
  
    /**
     * Sets the selected item.
     *
     * @param {object} $item
     * @param {object} e (optional)
     */
    setActiveItem: function($item, e) {
      var self = this;
      var eventName;
      var i, idx, begin, end, item, swap;
      var $last;
  
      if (self.settings.mode === 'single') return;
      $item = $($item);
  
      // clear the active selection
      if (!$item.length) {
        $(self.$activeItems).removeClass('active');
        self.$activeItems = [];
        if (self.isFocused) {
          self.showInput();
        }
        return;
      }
  
      // modify selection
      eventName = e && e.type.toLowerCase();
  
      if (eventName === 'mousedown' && self.isShiftDown && self.$activeItems.length) {
        $last = self.$control.children('.active:last');
        begin = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$last[0]]);
        end   = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$item[0]]);
        if (begin > end) {
          swap  = begin;
          begin = end;
          end   = swap;
        }
        for (i = begin; i <= end; i++) {
          item = self.$control[0].childNodes[i];
          if (self.$activeItems.indexOf(item) === -1) {
            $(item).addClass('active');
            self.$activeItems.push(item);
          }
        }
        e.preventDefault();
      } else if ((eventName === 'mousedown' && self.isCtrlDown) || (eventName === 'keydown' && this.isShiftDown)) {
        if ($item.hasClass('active')) {
          idx = self.$activeItems.indexOf($item[0]);
          self.$activeItems.splice(idx, 1);
          $item.removeClass('active');
        } else {
          self.$activeItems.push($item.addClass('active')[0]);
        }
      } else {
        $(self.$activeItems).removeClass('active');
        self.$activeItems = [$item.addClass('active')[0]];
      }
  
      // ensure control has focus
      self.hideInput();
      if (!this.isFocused) {
        self.focus();
      }
    },
  
    /**
     * Sets the selected item in the dropdown menu
     * of available options.
     *
     * @param {object} $object
     * @param {boolean} scroll
     * @param {boolean} animate
     */
    setActiveOption: function($option, scroll, animate) {
      var height_menu, height_item, y;
      var scroll_top, scroll_bottom;
      var self = this;
  
      if (self.$activeOption) self.$activeOption.removeClass('active');
      self.$activeOption = null;
  
      $option = $($option);
      if (!$option.length) return;
  
      self.$activeOption = $option.addClass('active');
  
      if (scroll || !isset(scroll)) {
  
        height_menu   = self.$dropdown_content.height();
        height_item   = self.$activeOption.outerHeight(true);
        scroll        = self.$dropdown_content.scrollTop() || 0;
        y             = self.$activeOption.offset().top - self.$dropdown_content.offset().top + scroll;
        scroll_top    = y;
        scroll_bottom = y - height_menu + height_item;
  
        if (y + height_item > height_menu + scroll) {
          self.$dropdown_content.stop().animate({scrollTop: scroll_bottom}, animate ? self.settings.scrollDuration : 0);
        } else if (y < scroll) {
          self.$dropdown_content.stop().animate({scrollTop: scroll_top}, animate ? self.settings.scrollDuration : 0);
        }
  
      }
    },
  
    /**
     * Selects all items (CTRL + A).
     */
    selectAll: function() {
      var self = this;
      if (self.settings.mode === 'single') return;
  
      self.$activeItems = Array.prototype.slice.apply(self.$control.children(':not(input)').addClass('active'));
      if (self.$activeItems.length) {
        self.hideInput();
        self.close();
      }
      self.focus();
    },
  
    /**
     * Hides the input element out of view, while
     * retaining its focus.
     */
    hideInput: function() {
      var self = this;
  
      self.setTextboxValue('');
      self.$control_input.css({opacity: 0, position: 'absolute', left: self.rtl ? 10000 : -10000});
      self.isInputHidden = true;
    },
  
    /**
     * Restores input visibility.
     */
    showInput: function() {
      this.$control_input.css({opacity: 1, position: 'relative', left: 0});
      this.isInputHidden = false;
    },
  
    /**
     * Gives the control focus.
     */
    focus: function() {
      var self = this;
      if (self.isDisabled) return;
  
      self.ignoreFocus = true;
      self.$control_input[0].focus();
      window.setTimeout(function() {
        self.ignoreFocus = false;
        self.onFocus();
      }, 0);
    },
  
    /**
     * Forces the control out of focus.
     *
     * @param {Element} dest
     */
    blur: function(dest) {
      this.$control_input[0].blur();
      this.onBlur(null, dest);
    },
  
    /**
     * Returns a function that scores an object
     * to show how good of a match it is to the
     * provided query.
     *
     * @param {string} query
     * @param {object} options
     * @return {function}
     */
    getScoreFunction: function(query) {
      return this.sifter.getScoreFunction(query, this.getSearchOptions());
    },
  
    /**
     * Returns search options for sifter (the system
     * for scoring and sorting results).
     *
     * @see https://github.com/brianreavis/sifter.js
     * @return {object}
     */
    getSearchOptions: function() {
      var settings = this.settings;
      var sort = settings.sortField;
      if (typeof sort === 'string') {
        sort = [{field: sort}];
      }
  
      return {
        fields      : settings.searchField,
        conjunction : settings.searchConjunction,
        sort        : sort
      };
    },
  
    /**
     * Searches through available options and returns
     * a sorted array of matches.
     *
     * Returns an object containing:
     *
     *   - query {string}
     *   - tokens {array}
     *   - total {int}
     *   - items {array}
     *
     * @param {string} query
     * @returns {object}
     */
    search: function(query) {
      var i, value, score, result, calculateScore;
      var self     = this;
      var settings = self.settings;
      var options  = this.getSearchOptions();
  
      // validate user-provided result scoring function
      if (settings.score) {
        calculateScore = self.settings.score.apply(this, [query]);
        if (typeof calculateScore !== 'function') {
          throw new Error('Selectize "score" setting must be a function that returns a function');
        }
      }
  
      // perform search
      if (query !== self.lastQuery) {
        self.lastQuery = query;
        result = self.sifter.search(query, $.extend(options, {score: calculateScore}));
        self.currentResults = result;
      } else {
        result = $.extend(true, {}, self.currentResults);
      }
  
      // filter out selected items
      if (settings.hideSelected) {
        for (i = result.items.length - 1; i >= 0; i--) {
          if (self.items.indexOf(hash_key(result.items[i].id)) !== -1) {
            result.items.splice(i, 1);
          }
        }
      }
  
      return result;
    },
  
    /**
     * Refreshes the list of available options shown
     * in the autocomplete dropdown menu.
     *
     * @param {boolean} triggerDropdown
     */
    refreshOptions: function(triggerDropdown) {
      var i, j, k, n, groups, groups_order, option, option_html, optgroup, optgroups, html, html_children, has_create_option;
      var $active, $active_before, $create;
  
      if (typeof triggerDropdown === 'undefined') {
        triggerDropdown = true;
      }
  
      var self              = this;
      var query             = $.trim(self.$control_input.val());
      var results           = self.search(query);
      var $dropdown_content = self.$dropdown_content;
      var active_before     = self.$activeOption && hash_key(self.$activeOption.attr('data-value'));
  
      // build markup
      n = results.items.length;
      if (typeof self.settings.maxOptions === 'number') {
        n = Math.min(n, self.settings.maxOptions);
      }
  
      // render and group available options individually
      groups = {};
      groups_order = [];
  
      for (i = 0; i < n; i++) {
        option      = self.options[results.items[i].id];
        option_html = self.render('option', option);
        optgroup    = option[self.settings.optgroupField] || '';
        optgroups   = $.isArray(optgroup) ? optgroup : [optgroup];
  
        for (j = 0, k = optgroups && optgroups.length; j < k; j++) {
          optgroup = optgroups[j];
          if (!self.optgroups.hasOwnProperty(optgroup)) {
            optgroup = '';
          }
          if (!groups.hasOwnProperty(optgroup)) {
            groups[optgroup] = [];
            groups_order.push(optgroup);
          }
          groups[optgroup].push(option_html);
        }
      }
  
      // sort optgroups
      if (this.settings.lockOptgroupOrder) {
        groups_order.sort(function(a, b) {
          var a_order = self.optgroups[a].$order || 0;
          var b_order = self.optgroups[b].$order || 0;
          return a_order - b_order;
        });
      }
  
      // render optgroup headers & join groups
      html = [];
      for (i = 0, n = groups_order.length; i < n; i++) {
        optgroup = groups_order[i];
        if (self.optgroups.hasOwnProperty(optgroup) && groups[optgroup].length) {
          // render the optgroup header and options within it,
          // then pass it to the wrapper template
          html_children = self.render('optgroup_header', self.optgroups[optgroup]) || '';
          html_children += groups[optgroup].join('');
          html.push(self.render('optgroup', $.extend({}, self.optgroups[optgroup], {
            html: html_children
          })));
        } else {
          html.push(groups[optgroup].join(''));
        }
      }
  
      $dropdown_content.html(html.join(''));
  
      // highlight matching terms inline
      if (self.settings.highlight && results.query.length && results.tokens.length) {
        for (i = 0, n = results.tokens.length; i < n; i++) {
          highlight($dropdown_content, results.tokens[i].regex);
        }
      }
  
      // add "selected" class to selected options
      if (!self.settings.hideSelected) {
        for (i = 0, n = self.items.length; i < n; i++) {
          self.getOption(self.items[i]).addClass('selected');
        }
      }
  
      // add create option
      has_create_option = self.canCreate(query);
      if (has_create_option) {
        $dropdown_content.prepend(self.render('option_create', {input: query}));
        $create = $($dropdown_content[0].childNodes[0]);
      }
  
      // activate
      self.hasOptions = results.items.length > 0 || has_create_option;
      if (self.hasOptions) {
        if (results.items.length > 0) {
          $active_before = active_before && self.getOption(active_before);
          if ($active_before && $active_before.length) {
            $active = $active_before;
          } else if (self.settings.mode === 'single' && self.items.length) {
            $active = self.getOption(self.items[0]);
          }
          if (!$active || !$active.length) {
            if ($create && !self.settings.addPrecedence) {
              $active = self.getAdjacentOption($create, 1);
            } else {
              $active = $dropdown_content.find('[data-selectable]:first');
            }
          }
        } else {
          $active = $create;
        }
        self.setActiveOption($active);
        if (triggerDropdown && !self.isOpen) { self.open(); }
      } else {
        self.setActiveOption(null);
        if (triggerDropdown && self.isOpen) { self.close(); }
      }
    },
  
    /**
     * Adds an available option. If it already exists,
     * nothing will happen. Note: this does not refresh
     * the options list dropdown (use `refreshOptions`
     * for that).
     *
     * Usage:
     *
     *   this.addOption(data)
     *
     * @param {object|array} data
     */
    addOption: function(data) {
      var i, n, value, self = this;
  
      if ($.isArray(data)) {
        for (i = 0, n = data.length; i < n; i++) {
          self.addOption(data[i]);
        }
        return;
      }
  
      if (value = self.registerOption(data)) {
        self.userOptions[value] = true;
        self.lastQuery = null;
        self.trigger('option_add', value, data);
      }
    },
  
    /**
     * Registers an option to the pool of options.
     *
     * @param {object} data
     * @return {boolean|string}
     */
    registerOption: function(data) {
      var key = hash_key(data[this.settings.valueField]);
      if (!key || this.options.hasOwnProperty(key)) return false;
      data.$order = data.$order || ++this.order;
      this.options[key] = data;
      return key;
    },
  
    /**
     * Registers an option group to the pool of option groups.
     *
     * @param {object} data
     * @return {boolean|string}
     */
    registerOptionGroup: function(data) {
      var key = hash_key(data[this.settings.optgroupValueField]);
      if (!key) return false;
  
      data.$order = data.$order || ++this.order;
      this.optgroups[key] = data;
      return key;
    },
  
    /**
     * Registers a new optgroup for options
     * to be bucketed into.
     *
     * @param {string} id
     * @param {object} data
     */
    addOptionGroup: function(id, data) {
      data[this.settings.optgroupValueField] = id;
      if (id = this.registerOptionGroup(data)) {
        this.trigger('optgroup_add', id, data);
      }
    },
  
    /**
     * Removes an existing option group.
     *
     * @param {string} id
     */
    removeOptionGroup: function(id) {
      if (this.optgroups.hasOwnProperty(id)) {
        delete this.optgroups[id];
        this.renderCache = {};
        this.trigger('optgroup_remove', id);
      }
    },
  
    /**
     * Clears all existing option groups.
     */
    clearOptionGroups: function() {
      this.optgroups = {};
      this.renderCache = {};
      this.trigger('optgroup_clear');
    },
  
    /**
     * Updates an option available for selection. If
     * it is visible in the selected items or options
     * dropdown, it will be re-rendered automatically.
     *
     * @param {string} value
     * @param {object} data
     */
    updateOption: function(value, data) {
      var self = this;
      var $item, $item_new;
      var value_new, index_item, cache_items, cache_options, order_old;
  
      value     = hash_key(value);
      value_new = hash_key(data[self.settings.valueField]);
  
      // sanity checks
      if (value === null) return;
      if (!self.options.hasOwnProperty(value)) return;
      if (typeof value_new !== 'string') throw new Error('Value must be set in option data');
  
      order_old = self.options[value].$order;
  
      // update references
      if (value_new !== value) {
        delete self.options[value];
        index_item = self.items.indexOf(value);
        if (index_item !== -1) {
          self.items.splice(index_item, 1, value_new);
        }
      }
      data.$order = data.$order || order_old;
      self.options[value_new] = data;
  
      // invalidate render cache
      cache_items = self.renderCache['item'];
      cache_options = self.renderCache['option'];
  
      if (cache_items) {
        delete cache_items[value];
        delete cache_items[value_new];
      }
      if (cache_options) {
        delete cache_options[value];
        delete cache_options[value_new];
      }
  
      // update the item if it's selected
      if (self.items.indexOf(value_new) !== -1) {
        $item = self.getItem(value);
        $item_new = $(self.render('item', data));
        if ($item.hasClass('active')) $item_new.addClass('active');
        $item.replaceWith($item_new);
      }
  
      // invalidate last query because we might have updated the sortField
      self.lastQuery = null;
  
      // update dropdown contents
      if (self.isOpen) {
        self.refreshOptions(false);
      }
    },
  
    /**
     * Removes a single option.
     *
     * @param {string} value
     * @param {boolean} silent
     */
    removeOption: function(value, silent) {
      var self = this;
      value = hash_key(value);
  
      var cache_items = self.renderCache['item'];
      var cache_options = self.renderCache['option'];
      if (cache_items) delete cache_items[value];
      if (cache_options) delete cache_options[value];
  
      delete self.userOptions[value];
      delete self.options[value];
      self.lastQuery = null;
      self.trigger('option_remove', value);
      self.removeItem(value, silent);
    },
  
    /**
     * Clears all options.
     */
    clearOptions: function() {
      var self = this;
  
      self.loadedSearches = {};
      self.userOptions = {};
      self.renderCache = {};
      self.options = self.sifter.items = {};
      self.lastQuery = null;
      self.trigger('option_clear');
      self.clear();
    },
  
    /**
     * Returns the jQuery element of the option
     * matching the given value.
     *
     * @param {string} value
     * @returns {object}
     */
    getOption: function(value) {
      return this.getElementWithValue(value, this.$dropdown_content.find('[data-selectable]'));
    },
  
    /**
     * Returns the jQuery element of the next or
     * previous selectable option.
     *
     * @param {object} $option
     * @param {int} direction  can be 1 for next or -1 for previous
     * @return {object}
     */
    getAdjacentOption: function($option, direction) {
      var $options = this.$dropdown.find('[data-selectable]');
      var index    = $options.index($option) + direction;
  
      return index >= 0 && index < $options.length ? $options.eq(index) : $();
    },
  
    /**
     * Finds the first element with a "data-value" attribute
     * that matches the given value.
     *
     * @param {mixed} value
     * @param {object} $els
     * @return {object}
     */
    getElementWithValue: function(value, $els) {
      value = hash_key(value);
  
      if (typeof value !== 'undefined' && value !== null) {
        for (var i = 0, n = $els.length; i < n; i++) {
          if ($els[i].getAttribute('data-value') === value) {
            return $($els[i]);
          }
        }
      }
  
      return $();
    },
  
    /**
     * Returns the jQuery element of the item
     * matching the given value.
     *
     * @param {string} value
     * @returns {object}
     */
    getItem: function(value) {
      return this.getElementWithValue(value, this.$control.children());
    },
  
    /**
     * "Selects" multiple items at once. Adds them to the list
     * at the current caret position.
     *
     * @param {string} value
     * @param {boolean} silent
     */
    addItems: function(values, silent) {
      var items = $.isArray(values) ? values : [values];
      for (var i = 0, n = items.length; i < n; i++) {
        this.isPending = (i < n - 1);
        this.addItem(items[i], silent);
      }
    },
  
    /**
     * "Selects" an item. Adds it to the list
     * at the current caret position.
     *
     * @param {string} value
     * @param {boolean} silent
     */
    addItem: function(value, silent) {
      var events = silent ? [] : ['change'];
  
      debounce_events(this, events, function() {
        var $item, $option, $options;
        var self = this;
        var inputMode = self.settings.mode;
        var i, active, value_next, wasFull;
        value = hash_key(value);
  
        if (self.items.indexOf(value) !== -1) {
          if (inputMode === 'single') self.close();
          return;
        }
  
        if (!self.options.hasOwnProperty(value)) return;
        if (inputMode === 'single') self.clear(silent);
        if (inputMode === 'multi' && self.isFull()) return;
  
        $item = $(self.render('item', self.options[value]));
        wasFull = self.isFull();
        self.items.splice(self.caretPos, 0, value);
        self.insertAtCaret($item);
        if (!self.isPending || (!wasFull && self.isFull())) {
          self.refreshState();
        }
  
        if (self.isSetup) {
          $options = self.$dropdown_content.find('[data-selectable]');
  
          // update menu / remove the option (if this is not one item being added as part of series)
          if (!self.isPending) {
            $option = self.getOption(value);
            value_next = self.getAdjacentOption($option, 1).attr('data-value');
            self.refreshOptions(self.isFocused && inputMode !== 'single');
            if (value_next) {
              self.setActiveOption(self.getOption(value_next));
            }
          }
  
          // hide the menu if the maximum number of items have been selected or no options are left
          if (!$options.length || self.isFull()) {
            self.close();
          } else {
            self.positionDropdown();
          }
  
          self.updatePlaceholder();
          self.trigger('item_add', value, $item);
          self.updateOriginalInput({silent: silent});
        }
      });
    },
  
    /**
     * Removes the selected item matching
     * the provided value.
     *
     * @param {string} value
     */
    removeItem: function(value, silent) {
      var self = this;
      var $item, i, idx;
  
      $item = (typeof value === 'object') ? value : self.getItem(value);
      value = hash_key($item.attr('data-value'));
      i = self.items.indexOf(value);
  
      if (i !== -1) {
        $item.remove();
        if ($item.hasClass('active')) {
          idx = self.$activeItems.indexOf($item[0]);
          self.$activeItems.splice(idx, 1);
        }
  
        self.items.splice(i, 1);
        self.lastQuery = null;
        if (!self.settings.persist && self.userOptions.hasOwnProperty(value)) {
          self.removeOption(value, silent);
        }
  
        if (i < self.caretPos) {
          self.setCaret(self.caretPos - 1);
        }
  
        self.refreshState();
        self.updatePlaceholder();
        self.updateOriginalInput({silent: silent});
        self.positionDropdown();
        self.trigger('item_remove', value, $item);
      }
    },
  
    /**
     * Invokes the `create` method provided in the
     * selectize options that should provide the data
     * for the new item, given the user input.
     *
     * Once this completes, it will be added
     * to the item list.
     *
     * @param {string} value
     * @param {boolean} [triggerDropdown]
     * @param {function} [callback]
     * @return {boolean}
     */
    createItem: function(input, triggerDropdown) {
      var self  = this;
      var caret = self.caretPos;
      input = input || $.trim(self.$control_input.val() || '');
  
      var callback = arguments[arguments.length - 1];
      if (typeof callback !== 'function') callback = function() {};
  
      if (typeof triggerDropdown !== 'boolean') {
        triggerDropdown = true;
      }
  
      if (!self.canCreate(input)) {
        callback();
        return false;
      }
  
      self.lock();
  
      var setup = (typeof self.settings.create === 'function') ? this.settings.create : function(input) {
        var data = {};
        data[self.settings.labelField] = input;
        data[self.settings.valueField] = input;
        return data;
      };
  
      var create = once(function(data) {
        self.unlock();
  
        if (!data || typeof data !== 'object') return callback();
        var value = hash_key(data[self.settings.valueField]);
        if (typeof value !== 'string') return callback();
  
        self.setTextboxValue('');
        self.addOption(data);
        self.setCaret(caret);
        self.addItem(value);
        self.refreshOptions(triggerDropdown && self.settings.mode !== 'single');
        callback(data);
      });
  
      var output = setup.apply(this, [input, create]);
      if (typeof output !== 'undefined') {
        create(output);
      }
  
      return true;
    },
  
    /**
     * Re-renders the selected item lists.
     */
    refreshItems: function() {
      this.lastQuery = null;
  
      if (this.isSetup) {
        this.addItem(this.items);
      }
  
      this.refreshState();
      this.updateOriginalInput();
    },
  
    /**
     * Updates all state-dependent attributes
     * and CSS classes.
     */
    refreshState: function() {
      var invalid, self = this;
      if (self.isRequired) {
        if (self.items.length) self.isInvalid = false;
        self.$control_input.prop('required', invalid);
      }
      self.refreshClasses();
    },
  
    /**
     * Updates all state-dependent CSS classes.
     */
    refreshClasses: function() {
      var self     = this;
      var isFull   = self.isFull();
      var isLocked = self.isLocked;
  
      self.$wrapper
        .toggleClass('rtl', self.rtl);
  
      self.$control
        .toggleClass('focus', self.isFocused)
        .toggleClass('disabled', self.isDisabled)
        .toggleClass('required', self.isRequired)
        .toggleClass('invalid', self.isInvalid)
        .toggleClass('locked', isLocked)
        .toggleClass('full', isFull).toggleClass('not-full', !isFull)
        .toggleClass('input-active', self.isFocused && !self.isInputHidden)
        .toggleClass('dropdown-active', self.isOpen)
        .toggleClass('has-options', !$.isEmptyObject(self.options))
        .toggleClass('has-items', self.items.length > 0);
  
      self.$control_input.data('grow', !isFull && !isLocked);
    },
  
    /**
     * Determines whether or not more items can be added
     * to the control without exceeding the user-defined maximum.
     *
     * @returns {boolean}
     */
    isFull: function() {
      return this.settings.maxItems !== null && this.items.length >= this.settings.maxItems;
    },
  
    /**
     * Refreshes the original <select> or <input>
     * element to reflect the current state.
     */
    updateOriginalInput: function(opts) {
      var i, n, options, label, self = this;
      opts = opts || {};
  
      if (self.tagType === TAG_SELECT) {
        options = [];
        for (i = 0, n = self.items.length; i < n; i++) {
          label = self.options[self.items[i]][self.settings.labelField] || '';
          options.push('<option value="' + escape_html(self.items[i]) + '" selected="selected">' + escape_html(label) + '</option>');
        }
        if (!options.length && !this.$input.attr('multiple')) {
          options.push('<option value="" selected="selected"></option>');
        }
        self.$input.html(options.join(''));
      } else {
        self.$input.val(self.getValue());
        self.$input.attr('value',self.$input.val());
      }
  
      if (self.isSetup) {
        if (!opts.silent) {
          self.trigger('change', self.$input.val());
        }
      }
    },
  
    /**
     * Shows/hide the input placeholder depending
     * on if there items in the list already.
     */
    updatePlaceholder: function() {
      if (!this.settings.placeholder) return;
      var $input = this.$control_input;
  
      if (this.items.length) {
        $input.removeAttr('placeholder');
      } else {
        $input.attr('placeholder', this.settings.placeholder);
      }
      $input.triggerHandler('update', {force: true});
    },
  
    /**
     * Shows the autocomplete dropdown containing
     * the available options.
     */
    open: function() {
      var self = this;
  
      if (self.isLocked || self.isOpen || (self.settings.mode === 'multi' && self.isFull())) return;
      self.focus();
      self.isOpen = true;
      self.refreshState();
      self.$dropdown.css({visibility: 'hidden', display: 'block'});
      self.positionDropdown();
      self.$dropdown.css({visibility: 'visible'});
      self.trigger('dropdown_open', self.$dropdown);
    },
  
    /**
     * Closes the autocomplete dropdown menu.
     */
    close: function() {
      var self = this;
      var trigger = self.isOpen;
  
      if (self.settings.mode === 'single' && self.items.length) {
        self.hideInput();
      }
  
      self.isOpen = false;
      self.$dropdown.hide();
      self.setActiveOption(null);
      self.refreshState();
  
      if (trigger) self.trigger('dropdown_close', self.$dropdown);
    },
  
    /**
     * Calculates and applies the appropriate
     * position of the dropdown.
     */
    positionDropdown: function() {
      var $control = this.$control;
      var offset = this.settings.dropdownParent === 'body' ? $control.offset() : $control.position();
      offset.top += $control.outerHeight(true);
  
      this.$dropdown.css({
        width : $control.outerWidth(),
        top   : offset.top,
        left  : offset.left
      });
    },
  
    /**
     * Resets / clears all selected items
     * from the control.
     *
     * @param {boolean} silent
     */
    clear: function(silent) {
      var self = this;
  
      if (!self.items.length) return;
      self.$control.children(':not(input)').remove();
      self.items = [];
      self.lastQuery = null;
      self.setCaret(0);
      self.setActiveItem(null);
      self.updatePlaceholder();
      self.updateOriginalInput({silent: silent});
      self.refreshState();
      self.showInput();
      self.trigger('clear');
    },
  
    /**
     * A helper method for inserting an element
     * at the current caret position.
     *
     * @param {object} $el
     */
    insertAtCaret: function($el) {
      var caret = Math.min(this.caretPos, this.items.length);
      if (caret === 0) {
        this.$control.prepend($el);
      } else {
        $(this.$control[0].childNodes[caret]).before($el);
      }
      this.setCaret(caret + 1);
    },
  
    /**
     * Removes the current selected item(s).
     *
     * @param {object} e (optional)
     * @returns {boolean}
     */
    deleteSelection: function(e) {
      var i, n, direction, selection, values, caret, option_select, $option_select, $tail;
      var self = this;
  
      direction = (e && e.keyCode === KEY_BACKSPACE) ? -1 : 1;
      selection = getSelection(self.$control_input[0]);
  
      if (self.$activeOption && !self.settings.hideSelected) {
        option_select = self.getAdjacentOption(self.$activeOption, -1).attr('data-value');
      }
  
      // determine items that will be removed
      values = [];
  
      if (self.$activeItems.length) {
        $tail = self.$control.children('.active:' + (direction > 0 ? 'last' : 'first'));
        caret = self.$control.children(':not(input)').index($tail);
        if (direction > 0) { caret++; }
  
        for (i = 0, n = self.$activeItems.length; i < n; i++) {
          values.push($(self.$activeItems[i]).attr('data-value'));
        }
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
      } else if ((self.isFocused || self.settings.mode === 'single') && self.items.length) {
        if (direction < 0 && selection.start === 0 && selection.length === 0) {
          values.push(self.items[self.caretPos - 1]);
        } else if (direction > 0 && selection.start === self.$control_input.val().length) {
          values.push(self.items[self.caretPos]);
        }
      }
  
      // allow the callback to abort
      if (!values.length || (typeof self.settings.onDelete === 'function' && self.settings.onDelete.apply(self, [values]) === false)) {
        return false;
      }
  
      // perform removal
      if (typeof caret !== 'undefined') {
        self.setCaret(caret);
      }
      while (values.length) {
        self.removeItem(values.pop());
      }
  
      self.showInput();
      self.positionDropdown();
      self.refreshOptions(true);
  
      // select previous option
      if (option_select) {
        $option_select = self.getOption(option_select);
        if ($option_select.length) {
          self.setActiveOption($option_select);
        }
      }
  
      return true;
    },
  
    /**
     * Selects the previous / next item (depending
     * on the `direction` argument).
     *
     * > 0 - right
     * < 0 - left
     *
     * @param {int} direction
     * @param {object} e (optional)
     */
    advanceSelection: function(direction, e) {
      var tail, selection, idx, valueLength, cursorAtEdge, $tail;
      var self = this;
  
      if (direction === 0) return;
      if (self.rtl) direction *= -1;
  
      tail = direction > 0 ? 'last' : 'first';
      selection = getSelection(self.$control_input[0]);
  
      if (self.isFocused && !self.isInputHidden) {
        valueLength = self.$control_input.val().length;
        cursorAtEdge = direction < 0
          ? selection.start === 0 && selection.length === 0
          : selection.start === valueLength;
  
        if (cursorAtEdge && !valueLength) {
          self.advanceCaret(direction, e);
        }
      } else {
        $tail = self.$control.children('.active:' + tail);
        if ($tail.length) {
          idx = self.$control.children(':not(input)').index($tail);
          self.setActiveItem(null);
          self.setCaret(direction > 0 ? idx + 1 : idx);
        }
      }
    },
  
    /**
     * Moves the caret left / right.
     *
     * @param {int} direction
     * @param {object} e (optional)
     */
    advanceCaret: function(direction, e) {
      var self = this, fn, $adj;
  
      if (direction === 0) return;
  
      fn = direction > 0 ? 'next' : 'prev';
      if (self.isShiftDown) {
        $adj = self.$control_input[fn]();
        if ($adj.length) {
          self.hideInput();
          self.setActiveItem($adj);
          e && e.preventDefault();
        }
      } else {
        self.setCaret(self.caretPos + direction);
      }
    },
  
    /**
     * Moves the caret to the specified index.
     *
     * @param {int} i
     */
    setCaret: function(i) {
      var self = this;
  
      if (self.settings.mode === 'single') {
        i = self.items.length;
      } else {
        i = Math.max(0, Math.min(self.items.length, i));
      }
  
      if(!self.isPending) {
        // the input must be moved by leaving it in place and moving the
        // siblings, due to the fact that focus cannot be restored once lost
        // on mobile webkit devices
        var j, n, fn, $children, $child;
        $children = self.$control.children(':not(input)');
        for (j = 0, n = $children.length; j < n; j++) {
          $child = $($children[j]).detach();
          if (j <  i) {
            self.$control_input.before($child);
          } else {
            self.$control.append($child);
          }
        }
      }
  
      self.caretPos = i;
    },
  
    /**
     * Disables user input on the control. Used while
     * items are being asynchronously created.
     */
    lock: function() {
      this.close();
      this.isLocked = true;
      this.refreshState();
    },
  
    /**
     * Re-enables user input on the control.
     */
    unlock: function() {
      this.isLocked = false;
      this.refreshState();
    },
  
    /**
     * Disables user input on the control completely.
     * While disabled, it cannot receive focus.
     */
    disable: function() {
      var self = this;
      self.$input.prop('disabled', true);
      self.$control_input.prop('disabled', true).prop('tabindex', -1);
      self.isDisabled = true;
      self.lock();
    },
  
    /**
     * Enables the control so that it can respond
     * to focus and user input.
     */
    enable: function() {
      var self = this;
      self.$input.prop('disabled', false);
      self.$control_input.prop('disabled', false).prop('tabindex', self.tabIndex);
      self.isDisabled = false;
      self.unlock();
    },
  
    /**
     * Completely destroys the control and
     * unbinds all event listeners so that it can
     * be garbage collected.
     */
    destroy: function() {
      var self = this;
      var eventNS = self.eventNS;
      var revertSettings = self.revertSettings;
  
      self.trigger('destroy');
      self.off();
      self.$wrapper.remove();
      self.$dropdown.remove();
  
      self.$input
        .html('')
        .append(revertSettings.$children)
        .removeAttr('tabindex')
        .removeClass('selectized')
        .attr({tabindex: revertSettings.tabindex})
        .show();
  
      self.$control_input.removeData('grow');
      self.$input.removeData('selectize');
  
      $(window).off(eventNS);
      $(document).off(eventNS);
      $(document.body).off(eventNS);
  
      delete self.$input[0].selectize;
    },
  
    /**
     * A helper method for rendering "item" and
     * "option" templates, given the data.
     *
     * @param {string} templateName
     * @param {object} data
     * @returns {string}
     */
    render: function(templateName, data) {
      var value, id, label;
      var html = '';
      var cache = false;
      var self = this;
      var regex_tag = /^[\t \r\n]*<([a-z][a-z0-9\-_]*(?:\:[a-z][a-z0-9\-_]*)?)/i;
  
      if (templateName === 'option' || templateName === 'item') {
        value = hash_key(data[self.settings.valueField]);
        cache = !!value;
      }
  
      // pull markup from cache if it exists
      if (cache) {
        if (!isset(self.renderCache[templateName])) {
          self.renderCache[templateName] = {};
        }
        if (self.renderCache[templateName].hasOwnProperty(value)) {
          return self.renderCache[templateName][value];
        }
      }
  
      // render markup
      html = self.settings.render[templateName].apply(this, [data, escape_html]);
  
      // add mandatory attributes
      if (templateName === 'option' || templateName === 'option_create') {
        html = html.replace(regex_tag, '<$1 data-selectable');
      }
      if (templateName === 'optgroup') {
        id = data[self.settings.optgroupValueField] || '';
        html = html.replace(regex_tag, '<$1 data-group="' + escape_replace(escape_html(id)) + '"');
      }
      if (templateName === 'option' || templateName === 'item') {
        html = html.replace(regex_tag, '<$1 data-value="' + escape_replace(escape_html(value || '')) + '"');
      }
  
      // update cache
      if (cache) {
        self.renderCache[templateName][value] = html;
      }
  
      return html;
    },
  
    /**
     * Clears the render cache for a template. If
     * no template is given, clears all render
     * caches.
     *
     * @param {string} templateName
     */
    clearCache: function(templateName) {
      var self = this;
      if (typeof templateName === 'undefined') {
        self.renderCache = {};
      } else {
        delete self.renderCache[templateName];
      }
    },
  
    /**
     * Determines whether or not to display the
     * create item prompt, given a user input.
     *
     * @param {string} input
     * @return {boolean}
     */
    canCreate: function(input) {
      var self = this;
      if (!self.settings.create) return false;
      var filter = self.settings.createFilter;
      return input.length
        && (typeof filter !== 'function' || filter.apply(self, [input]))
        && (typeof filter !== 'string' || new RegExp(filter).test(input))
        && (!(filter instanceof RegExp) || filter.test(input));
    }
  
  });
  
  
  Selectize.count = 0;
  Selectize.defaults = {
    options: [],
    optgroups: [],
  
    plugins: [],
    delimiter: ',',
    splitOn: null, // regexp or string for splitting up values from a paste command
    persist: true,
    diacritics: true,
    create: false,
    createOnBlur: false,
    createFilter: null,
    highlight: true,
    openOnFocus: true,
    maxOptions: 1000,
    maxItems: null,
    hideSelected: null,
    addPrecedence: false,
    selectOnTab: false,
    preload: false,
    allowEmptyOption: false,
    closeAfterSelect: false,
  
    scrollDuration: 60,
    loadThrottle: 300,
    loadingClass: 'loading',
  
    dataAttr: 'data-data',
    optgroupField: 'optgroup',
    valueField: 'value',
    labelField: 'text',
    optgroupLabelField: 'label',
    optgroupValueField: 'value',
    lockOptgroupOrder: false,
  
    sortField: '$order',
    searchField: ['text'],
    searchConjunction: 'and',
  
    mode: null,
    wrapperClass: 'selectize-control',
    inputClass: 'selectize-input',
    dropdownClass: 'selectize-dropdown',
    dropdownContentClass: 'selectize-dropdown-content',
  
    dropdownParent: null,
  
    copyClassesToDropdown: true,
  
    /*
    load                 : null, // function(query, callback) { ... }
    score                : null, // function(search) { ... }
    onInitialize         : null, // function() { ... }
    onChange             : null, // function(value) { ... }
    onItemAdd            : null, // function(value, $item) { ... }
    onItemRemove         : null, // function(value) { ... }
    onClear              : null, // function() { ... }
    onOptionAdd          : null, // function(value, data) { ... }
    onOptionRemove       : null, // function(value) { ... }
    onOptionClear        : null, // function() { ... }
    onOptionGroupAdd     : null, // function(id, data) { ... }
    onOptionGroupRemove  : null, // function(id) { ... }
    onOptionGroupClear   : null, // function() { ... }
    onDropdownOpen       : null, // function($dropdown) { ... }
    onDropdownClose      : null, // function($dropdown) { ... }
    onType               : null, // function(str) { ... }
    onDelete             : null, // function(values) { ... }
    */
  
    render: {
      /*
      item: null,
      optgroup: null,
      optgroup_header: null,
      option: null,
      option_create: null
      */
    }
  };
  
  
  $.fn.selectize = function(settings_user) {
    var defaults             = $.fn.selectize.defaults;
    var settings             = $.extend({}, defaults, settings_user);
    var attr_data            = settings.dataAttr;
    var field_label          = settings.labelField;
    var field_value          = settings.valueField;
    var field_optgroup       = settings.optgroupField;
    var field_optgroup_label = settings.optgroupLabelField;
    var field_optgroup_value = settings.optgroupValueField;
  
    /**
     * Initializes selectize from a <input type="text"> element.
     *
     * @param {object} $input
     * @param {object} settings_element
     */
    var init_textbox = function($input, settings_element) {
      var i, n, values, option;
  
      var data_raw = $input.attr(attr_data);
  
      if (!data_raw) {
        var value = $.trim($input.val() || '');
        if (!settings.allowEmptyOption && !value.length) return;
        values = value.split(settings.delimiter);
        for (i = 0, n = values.length; i < n; i++) {
          option = {};
          option[field_label] = values[i];
          option[field_value] = values[i];
          settings_element.options.push(option);
        }
        settings_element.items = values;
      } else {
        settings_element.options = JSON.parse(data_raw);
        for (i = 0, n = settings_element.options.length; i < n; i++) {
          settings_element.items.push(settings_element.options[i][field_value]);
        }
      }
    };
  
    /**
     * Initializes selectize from a <select> element.
     *
     * @param {object} $input
     * @param {object} settings_element
     */
    var init_select = function($input, settings_element) {
      var i, n, tagName, $children, order = 0;
      var options = settings_element.options;
      var optionsMap = {};
  
      var readData = function($el) {
        var data = attr_data && $el.attr(attr_data);
        if (typeof data === 'string' && data.length) {
          return JSON.parse(data);
        }
        return null;
      };
  
      var addOption = function($option, group) {
        $option = $($option);
  
        var value = hash_key($option.attr('value'));
        if (!value && !settings.allowEmptyOption) return;
  
        // if the option already exists, it's probably been
        // duplicated in another optgroup. in this case, push
        // the current group to the "optgroup" property on the
        // existing option so that it's rendered in both places.
        if (optionsMap.hasOwnProperty(value)) {
          if (group) {
            var arr = optionsMap[value][field_optgroup];
            if (!arr) {
              optionsMap[value][field_optgroup] = group;
            } else if (!$.isArray(arr)) {
              optionsMap[value][field_optgroup] = [arr, group];
            } else {
              arr.push(group);
            }
          }
          return;
        }
  
        var option             = readData($option) || {};
        option[field_label]    = option[field_label] || $option.text();
        option[field_value]    = option[field_value] || value;
        option[field_optgroup] = option[field_optgroup] || group;
  
        optionsMap[value] = option;
        options.push(option);
  
        if ($option.is(':selected')) {
          settings_element.items.push(value);
        }
      };
  
      var addGroup = function($optgroup) {
        var i, n, id, optgroup, $options;
  
        $optgroup = $($optgroup);
        id = $optgroup.attr('label');
  
        if (id) {
          optgroup = readData($optgroup) || {};
          optgroup[field_optgroup_label] = id;
          optgroup[field_optgroup_value] = id;
          settings_element.optgroups.push(optgroup);
        }
  
        $options = $('option', $optgroup);
        for (i = 0, n = $options.length; i < n; i++) {
          addOption($options[i], id);
        }
      };
  
      settings_element.maxItems = $input.attr('multiple') ? null : 1;
  
      $children = $input.children();
      for (i = 0, n = $children.length; i < n; i++) {
        tagName = $children[i].tagName.toLowerCase();
        if (tagName === 'optgroup') {
          addGroup($children[i]);
        } else if (tagName === 'option') {
          addOption($children[i]);
        }
      }
    };
  
    return this.each(function() {
      if (this.selectize) return;
  
      var instance;
      var $input = $(this);
      var tag_name = this.tagName.toLowerCase();
      var placeholder = $input.attr('placeholder') || $input.attr('data-placeholder');
      if (!placeholder && !settings.allowEmptyOption) {
        placeholder = $input.children('option[value=""]').text();
      }
  
      var settings_element = {
        'placeholder' : placeholder,
        'options'     : [],
        'optgroups'   : [],
        'items'       : []
      };
  
      if (tag_name === 'select') {
        init_select($input, settings_element);
      } else {
        init_textbox($input, settings_element);
      }
  
      instance = new Selectize($input, $.extend(true, {}, defaults, settings_element, settings_user));
    });
  };
  
  $.fn.selectize.defaults = Selectize.defaults;
  $.fn.selectize.support = {
    validity: SUPPORTS_VALIDITY_API
  };
  
  
  Selectize.define('drag_drop', function(options) {
    if (!$.fn.sortable) throw new Error('The "drag_drop" plugin requires jQuery UI "sortable".');
    if (this.settings.mode !== 'multi') return;
    var self = this;
  
    self.lock = (function() {
      var original = self.lock;
      return function() {
        var sortable = self.$control.data('sortable');
        if (sortable) sortable.disable();
        return original.apply(self, arguments);
      };
    })();
  
    self.unlock = (function() {
      var original = self.unlock;
      return function() {
        var sortable = self.$control.data('sortable');
        if (sortable) sortable.enable();
        return original.apply(self, arguments);
      };
    })();
  
    self.setup = (function() {
      var original = self.setup;
      return function() {
        original.apply(this, arguments);
  
        var $control = self.$control.sortable({
          items: '[data-value]',
          forcePlaceholderSize: true,
          disabled: self.isLocked,
          start: function(e, ui) {
            ui.placeholder.css('width', ui.helper.css('width'));
            $control.css({overflow: 'visible'});
          },
          stop: function() {
            $control.css({overflow: 'hidden'});
            var active = self.$activeItems ? self.$activeItems.slice() : null;
            var values = [];
            $control.children('[data-value]').each(function() {
              values.push($(this).attr('data-value'));
            });
            self.setValue(values);
            self.setActiveItem(active);
          }
        });
      };
    })();
  
  });
  
  Selectize.define('dropdown_header', function(options) {
    var self = this;
  
    options = $.extend({
      title         : 'Untitled',
      headerClass   : 'selectize-dropdown-header',
      titleRowClass : 'selectize-dropdown-header-title',
      labelClass    : 'selectize-dropdown-header-label',
      closeClass    : 'selectize-dropdown-header-close',
  
      html: function(data) {
        return (
          '<div class="' + data.headerClass + '">' +
            '<div class="' + data.titleRowClass + '">' +
              '<span class="' + data.labelClass + '">' + data.title + '</span>' +
              '<a href="javascript:void(0)" class="' + data.closeClass + '">&times;</a>' +
            '</div>' +
          '</div>'
        );
      }
    }, options);
  
    self.setup = (function() {
      var original = self.setup;
      return function() {
        original.apply(self, arguments);
        self.$dropdown_header = $(options.html(options));
        self.$dropdown.prepend(self.$dropdown_header);
      };
    })();
  
  });
  
  Selectize.define('optgroup_columns', function(options) {
    var self = this;
  
    options = $.extend({
      equalizeWidth  : true,
      equalizeHeight : true
    }, options);
  
    this.getAdjacentOption = function($option, direction) {
      var $options = $option.closest('[data-group]').find('[data-selectable]');
      var index    = $options.index($option) + direction;
  
      return index >= 0 && index < $options.length ? $options.eq(index) : $();
    };
  
    this.onKeyDown = (function() {
      var original = self.onKeyDown;
      return function(e) {
        var index, $option, $options, $optgroup;
  
        if (this.isOpen && (e.keyCode === KEY_LEFT || e.keyCode === KEY_RIGHT)) {
          self.ignoreHover = true;
          $optgroup = this.$activeOption.closest('[data-group]');
          index = $optgroup.find('[data-selectable]').index(this.$activeOption);
  
          if(e.keyCode === KEY_LEFT) {
            $optgroup = $optgroup.prev('[data-group]');
          } else {
            $optgroup = $optgroup.next('[data-group]');
          }
  
          $options = $optgroup.find('[data-selectable]');
          $option  = $options.eq(Math.min($options.length - 1, index));
          if ($option.length) {
            this.setActiveOption($option);
          }
          return;
        }
  
        return original.apply(this, arguments);
      };
    })();
  
    var getScrollbarWidth = function() {
      var div;
      var width = getScrollbarWidth.width;
      var doc = document;
  
      if (typeof width === 'undefined') {
        div = doc.createElement('div');
        div.innerHTML = '<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>';
        div = div.firstChild;
        doc.body.appendChild(div);
        width = getScrollbarWidth.width = div.offsetWidth - div.clientWidth;
        doc.body.removeChild(div);
      }
      return width;
    };
  
    var equalizeSizes = function() {
      var i, n, height_max, width, width_last, width_parent, $optgroups;
  
      $optgroups = $('[data-group]', self.$dropdown_content);
      n = $optgroups.length;
      if (!n || !self.$dropdown_content.width()) return;
  
      if (options.equalizeHeight) {
        height_max = 0;
        for (i = 0; i < n; i++) {
          height_max = Math.max(height_max, $optgroups.eq(i).height());
        }
        $optgroups.css({height: height_max});
      }
  
      if (options.equalizeWidth) {
        width_parent = self.$dropdown_content.innerWidth() - getScrollbarWidth();
        width = Math.round(width_parent / n);
        $optgroups.css({width: width});
        if (n > 1) {
          width_last = width_parent - width * (n - 1);
          $optgroups.eq(n - 1).css({width: width_last});
        }
      }
    };
  
    if (options.equalizeHeight || options.equalizeWidth) {
      hook.after(this, 'positionDropdown', equalizeSizes);
      hook.after(this, 'refreshOptions', equalizeSizes);
    }
  
  
  });
  
  Selectize.define('remove_button', function(options) {
    if (this.settings.mode === 'single') return;
  
    options = $.extend({
      label     : '&times;',
      title     : 'Remove',
      className : 'remove',
      append    : true
    }, options);
  
    var self = this;
    var html = '<a href="javascript:void(0)" class="' + options.className + '" tabindex="-1" title="' + escape_html(options.title) + '">' + options.label + '</a>';
  
    /**
     * Appends an element as a child (with raw HTML).
     *
     * @param {string} html_container
     * @param {string} html_element
     * @return {string}
     */
    var append = function(html_container, html_element) {
      var pos = html_container.search(/(<\/[^>]+>\s*)$/);
      return html_container.substring(0, pos) + html_element + html_container.substring(pos);
    };
  
    this.setup = (function() {
      var original = self.setup;
      return function() {
        // override the item rendering method to add the button to each
        if (options.append) {
          var render_item = self.settings.render.item;
          self.settings.render.item = function(data) {
            return append(render_item.apply(this, arguments), html);
          };
        }
  
        original.apply(this, arguments);
  
        // add event listener
        this.$control.on('click', '.' + options.className, function(e) {
          e.preventDefault();
          if (self.isLocked) return;
  
          var $item = $(e.currentTarget).parent();
          self.setActiveItem($item);
          if (self.deleteSelection()) {
            self.setCaret(self.items.length);
          }
        });
  
      };
    })();
  
  });
  
  Selectize.define('restore_on_backspace', function(options) {
    var self = this;
  
    options.text = options.text || function(option) {
      return option[this.settings.labelField];
    };
  
    this.onKeyDown = (function() {
      var original = self.onKeyDown;
      return function(e) {
        var index, option;
        if (e.keyCode === KEY_BACKSPACE && this.$control_input.val() === '' && !this.$activeItems.length) {
          index = this.caretPos - 1;
          if (index >= 0 && index < this.items.length) {
            option = this.options[this.items[index]];
            if (this.deleteSelection(e)) {
              this.setTextboxValue(options.text.apply(this, [option]));
              this.refreshOptions(true);
            }
            e.preventDefault();
            return;
          }
        }
        return original.apply(this, arguments);
      };
    })();
  });
  

  return Selectize;
}));
/*!
 * Shuffle.js by @Vestride
 * Categorize, sort, and filter a responsive grid of items.
 * Dependencies: jQuery 1.9+, Modernizr 2.6.2+
 * @license MIT license
 * @version 3.1.1
 */

/* Modernizr 2.6.2 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-csstransforms-csstransforms3d-csstransitions-cssclasses-prefixed-teststyles-testprop-testallprops-prefixes-domprefixes
 */
window.Modernizr=function(a,b,c){function z(a){j.cssText=a}function A(a,b){return z(m.join(a+";")+(b||""))}function B(a,b){return typeof a===b}function C(a,b){return!!~(""+a).indexOf(b)}function D(a,b){for(var d in a){var e=a[d];if(!C(e,"-")&&j[e]!==c)return b=="pfx"?e:!0}return!1}function E(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:B(f,"function")?f.bind(d||b):f}return!1}function F(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),e=(a+" "+o.join(d+" ")+d).split(" ");return B(b,"string")||B(b,"undefined")?D(e,b):(e=(a+" "+p.join(d+" ")+d).split(" "),E(e,b,c))}var d="2.6.2",e={},f=!0,g=b.documentElement,h="modernizr",i=b.createElement(h),j=i.style,k,l={}.toString,m=" -webkit- -moz- -o- -ms- ".split(" "),n="Webkit Moz O ms",o=n.split(" "),p=n.toLowerCase().split(" "),q={},r={},s={},t=[],u=t.slice,v,w=function(a,c,d,e){var f,i,j,k,l=b.createElement("div"),m=b.body,n=m||b.createElement("body");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:h+(d+1),l.appendChild(j);return f=["&#173;",'<style id="s',h,'">',a,"</style>"].join(""),l.id=h,(m?l:n).innerHTML+=f,n.appendChild(l),m||(n.style.background="",n.style.overflow="hidden",k=g.style.overflow,g.style.overflow="hidden",g.appendChild(n)),i=c(l,a),m?l.parentNode.removeChild(l):(n.parentNode.removeChild(n),g.style.overflow=k),!!i},x={}.hasOwnProperty,y;!B(x,"undefined")&&!B(x.call,"undefined")?y=function(a,b){return x.call(a,b)}:y=function(a,b){return b in a&&B(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=u.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(u.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(u.call(arguments)))};return e}),q.csstransforms=function(){return!!F("transform")},q.csstransforms3d=function(){var a=!!F("perspective");return a&&"webkitPerspective"in g.style&&w("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(b,c){a=b.offsetLeft===9&&b.offsetHeight===3}),a},q.csstransitions=function(){return F("transition")};for(var G in q)y(q,G)&&(v=G.toLowerCase(),e[v]=q[G](),t.push((e[v]?"":"no-")+v));return e.addTest=function(a,b){if(typeof a=="object")for(var d in a)y(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,typeof f!="undefined"&&f&&(g.className+=" "+(b?"":"no-")+a),e[a]=b}return e},z(""),i=k=null,e._version=d,e._prefixes=m,e._domPrefixes=p,e._cssomPrefixes=o,e.testProp=function(a){return D([a])},e.testAllProps=F,e.testStyles=w,e.prefixed=function(a,b,c){return b?F(a,b,c):F(a,"pfx")},g.className=g.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(f?" js "+t.join(" "):""),e}(this,this.document);

(function (factory) {
  if (typeof define === 'function' && define.amd) {
    define(['jquery', 'modernizr'], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('jquery'), window.Modernizr);
  } else {
    window.Shuffle = factory(window.jQuery, window.Modernizr);
  }
})(function($, Modernizr, undefined) {

'use strict';


// Validate Modernizr exists.
// Shuffle requires `csstransitions`, `csstransforms`, `csstransforms3d`,
// and `prefixed` to exist on the Modernizr object.
if (typeof Modernizr !== 'object') {
  throw new Error('Shuffle.js requires Modernizr.\n' +
      'http://vestride.github.io/Shuffle/#dependencies');
}


/**
 * Returns css prefixed properties like `-webkit-transition` or `box-sizing`
 * from `transition` or `boxSizing`, respectively.
 * @param {(string|boolean)} prop Property to be prefixed.
 * @return {string} The prefixed css property.
 */
function dashify( prop ) {
  if (!prop) {
    return '';
  }

  // Replace upper case with dash-lowercase,
  // then fix ms- prefixes because they're not capitalized.
  return prop.replace(/([A-Z])/g, function( str, m1 ) {
    return '-' + m1.toLowerCase();
  }).replace(/^ms-/,'-ms-');
}

// Constant, prefixed variables.
var TRANSITION = Modernizr.prefixed('transition');
var TRANSITION_DELAY = Modernizr.prefixed('transitionDelay');
var TRANSITION_DURATION = Modernizr.prefixed('transitionDuration');

// Note(glen): Stock Android 4.1.x browser will fail here because it wrongly
// says it supports non-prefixed transitions.
// https://github.com/Modernizr/Modernizr/issues/897
var TRANSITIONEND = {
  'WebkitTransition' : 'webkitTransitionEnd',
  'transition' : 'transitionend'
}[ TRANSITION ];

var TRANSFORM = Modernizr.prefixed('transform');
var CSS_TRANSFORM = dashify(TRANSFORM);

// Constants
var CAN_TRANSITION_TRANSFORMS = Modernizr.csstransforms && Modernizr.csstransitions;
var HAS_TRANSFORMS_3D = Modernizr.csstransforms3d;
var HAS_COMPUTED_STYLE = !!window.getComputedStyle;
var SHUFFLE = 'shuffle';

// Configurable. You can change these constants to fit your application.
// The default scale and concealed scale, however, have to be different values.
var ALL_ITEMS = 'all';
var FILTER_ATTRIBUTE_KEY = 'groups';
var DEFAULT_SCALE = 1;
var CONCEALED_SCALE = 0.001;

// Underscore's throttle function.
function throttle(func, wait, options) {
  var context, args, result;
  var timeout = null;
  var previous = 0;
  options = options || {};
  var later = function() {
    previous = options.leading === false ? 0 : $.now();
    timeout = null;
    result = func.apply(context, args);
    context = args = null;
  };
  return function() {
    var now = $.now();
    if (!previous && options.leading === false) {
      previous = now;
    }
    var remaining = wait - (now - previous);
    context = this;
    args = arguments;
    if (remaining <= 0 || remaining > wait) {
      clearTimeout(timeout);
      timeout = null;
      previous = now;
      result = func.apply(context, args);
      context = args = null;
    } else if (!timeout && options.trailing !== false) {
      timeout = setTimeout(later, remaining);
    }
    return result;
  };
}

function each(obj, iterator, context) {
  for (var i = 0, length = obj.length; i < length; i++) {
    if (iterator.call(context, obj[i], i, obj) === {}) {
      return;
    }
  }
}

function defer(fn, context, wait) {
  return setTimeout( $.proxy( fn, context ), wait );
}

function arrayMax( array ) {
  return Math.max.apply( Math, array );
}

function arrayMin( array ) {
  return Math.min.apply( Math, array );
}


/**
 * Always returns a numeric value, given a value.
 * @param {*} value Possibly numeric value.
 * @return {number} `value` or zero if `value` isn't numeric.
 * @private
 */
function getNumber(value) {
  return $.isNumeric(value) ? value : 0;
}

var getStyles = window.getComputedStyle || function() {};

/**
 * Represents a coordinate pair.
 * @param {number} [x=0] X.
 * @param {number} [y=0] Y.
 */
var Point = function(x, y) {
  this.x = getNumber( x );
  this.y = getNumber( y );
};


/**
 * Whether two points are equal.
 * @param {Point} a Point A.
 * @param {Point} b Point B.
 * @return {boolean}
 */
Point.equals = function(a, b) {
  return a.x === b.x && a.y === b.y;
};

var COMPUTED_SIZE_INCLUDES_PADDING = (function() {
  if (!HAS_COMPUTED_STYLE) {
    return false;
  }

  var parent = document.body || document.documentElement;
  var e = document.createElement('div');
  e.style.cssText = 'width:10px;padding:2px;' +
    '-webkit-box-sizing:border-box;box-sizing:border-box;';
  parent.appendChild(e);

  var width = getStyles(e, null).width;
  var ret = width === '10px';

  parent.removeChild(e);

  return ret;
}());


// Used for unique instance variables
var id = 0;
var $window = $( window );


/**
 * Categorize, sort, and filter a responsive grid of items.
 *
 * @param {Element} element An element which is the parent container for the grid items.
 * @param {Object} [options=Shuffle.options] Options object.
 * @constructor
 */
var Shuffle = function( element, options ) {
  options = options || {};
  $.extend( this, Shuffle.options, options, Shuffle.settings );

  this.$el = $(element);
  this.element = element;
  this.unique = 'shuffle_' + id++;

  this._fire( Shuffle.EventType.LOADING );
  this._init();

  // Dispatch the done event asynchronously so that people can bind to it after
  // Shuffle has been initialized.
  defer(function() {
    this.initialized = true;
    this._fire( Shuffle.EventType.DONE );
  }, this, 16);
};


/**
 * Events the container element emits with the .shuffle namespace.
 * For example, "done.shuffle".
 * @enum {string}
 */
Shuffle.EventType = {
  LOADING: 'loading',
  DONE: 'done',
  LAYOUT: 'layout',
  REMOVED: 'removed'
};


/** @enum {string} */
Shuffle.ClassName = {
  BASE: SHUFFLE,
  SHUFFLE_ITEM: 'shuffle-item',
  FILTERED: 'filtered',
  CONCEALED: 'concealed'
};


// Overrideable options
Shuffle.options = {
  group: ALL_ITEMS, // Initial filter group.
  speed: 250, // Transition/animation speed (milliseconds).
  easing: 'ease-out', // CSS easing function to use.
  itemSelector: '', // e.g. '.picture-item'.
  sizer: null, // Sizer element. Use an element to determine the size of columns and gutters.
  gutterWidth: 0, // A static number or function that tells the plugin how wide the gutters between columns are (in pixels).
  columnWidth: 0, // A static number or function that returns a number which tells the plugin how wide the columns are (in pixels).
  delimeter: null, // If your group is not json, and is comma delimeted, you could set delimeter to ','.
  buffer: 0, // Useful for percentage based heights when they might not always be exactly the same (in pixels).
  columnThreshold: HAS_COMPUTED_STYLE ? 0.01 : 0.1, // Reading the width of elements isn't precise enough and can cause columns to jump between values.
  initialSort: null, // Shuffle can be initialized with a sort object. It is the same object given to the sort method.
  throttle: throttle, // By default, shuffle will throttle resize events. This can be changed or removed.
  throttleTime: 300, // How often shuffle can be called on resize (in milliseconds).
  sequentialFadeDelay: 150, // Delay between each item that fades in when adding items.
  supported: CAN_TRANSITION_TRANSFORMS // Whether to use transforms or absolute positioning.
};


// Not overrideable
Shuffle.settings = {
  useSizer: false,
  itemCss : { // default CSS for each item
    position: 'absolute',
    top: 0,
    left: 0,
    visibility: 'visible'
  },
  revealAppendedDelay: 300,
  lastSort: {},
  lastFilter: ALL_ITEMS,
  enabled: true,
  destroyed: false,
  initialized: false,
  _animations: [],
  _transitions: [],
  _isMovementCanceled: false,
  styleQueue: []
};


// Expose for testing.
Shuffle.Point = Point;


/**
 * Static methods.
 */

/**
 * If the browser has 3d transforms available, build a string with those,
 * otherwise use 2d transforms.
 * @param {Point} point X and Y positions.
 * @param {number} scale Scale amount.
 * @return {string} A normalized string which can be used with the transform style.
 * @private
 */
Shuffle._getItemTransformString = function(point, scale) {
  if ( HAS_TRANSFORMS_3D ) {
    return 'translate3d(' + point.x + 'px, ' + point.y + 'px, 0) scale3d(' + scale + ', ' + scale + ', 1)';
  } else {
    return 'translate(' + point.x + 'px, ' + point.y + 'px) scale(' + scale + ')';
  }
};


/**
 * Retrieve the computed style for an element, parsed as a float.
 * @param {Element} element Element to get style for.
 * @param {string} style Style property.
 * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to
 *     use instead of asking for them again.
 * @return {number} The parsed computed value or zero if that fails because IE
 *     will return 'auto' when the element doesn't have margins instead of
 *     the computed style.
 * @private
 */
Shuffle._getNumberStyle = function( element, style, styles ) {
  if ( HAS_COMPUTED_STYLE ) {
    styles = styles || getStyles( element, null );
    var value = Shuffle._getFloat( styles[ style ] );

    // Support IE<=11 and W3C spec.
    if ( !COMPUTED_SIZE_INCLUDES_PADDING && style === 'width' ) {
      value += Shuffle._getFloat( styles.paddingLeft ) +
        Shuffle._getFloat( styles.paddingRight ) +
        Shuffle._getFloat( styles.borderLeftWidth ) +
        Shuffle._getFloat( styles.borderRightWidth );
    } else if ( !COMPUTED_SIZE_INCLUDES_PADDING && style === 'height' ) {
      value += Shuffle._getFloat( styles.paddingTop ) +
        Shuffle._getFloat( styles.paddingBottom ) +
        Shuffle._getFloat( styles.borderTopWidth ) +
        Shuffle._getFloat( styles.borderBottomWidth );
    }

    return value;
  } else {
    return Shuffle._getFloat( $( element ).css( style )  );
  }
};


/**
 * Parse a string as an float.
 * @param {string} value String float.
 * @return {number} The string as an float or zero.
 * @private
 */
Shuffle._getFloat = function(value) {
  return getNumber( parseFloat( value ) );
};


/**
 * Returns the outer width of an element, optionally including its margins.
 *
 * There are a few different methods for getting the width of an element, none of
 * which work perfectly for all Shuffle's use cases.
 *
 * 1. getBoundingClientRect() `left` and `right` properties.
 *   - Accounts for transform scaled elements, making it useless for Shuffle
 *   elements which have shrunk.
 * 2. The `offsetWidth` property (or jQuery's CSS).
 *   - This value stays the same regardless of the elements transform property,
 *   however, it does not return subpixel values.
 * 3. getComputedStyle()
 *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include
 *   padding and border when box-sizing: border-box is set, requiring a feature
 *   test and extra work to add the padding back for IE and other browsers which
 *   follow the W3C spec here.
 *
 * @param {Element} element The element.
 * @param {boolean} [includeMargins] Whether to include margins. Default is false.
 * @return {number} The width.
 */
Shuffle._getOuterWidth = function( element, includeMargins ) {
  // Store the styles so that they can be used by others without asking for it again.
  var styles = getStyles( element, null );
  var width = Shuffle._getNumberStyle( element, 'width', styles );

  // Use jQuery here because it uses getComputedStyle internally and is
  // cross-browser. Using the style property of the element will only work
  // if there are inline styles.
  if ( includeMargins ) {
    var marginLeft = Shuffle._getNumberStyle( element, 'marginLeft', styles );
    var marginRight = Shuffle._getNumberStyle( element, 'marginRight', styles );
    width += marginLeft + marginRight;
  }

  return width;
};


/**
 * Returns the outer height of an element, optionally including its margins.
 * @param {Element} element The element.
 * @param {boolean} [includeMargins] Whether to include margins. Default is false.
 * @return {number} The height.
 */
Shuffle._getOuterHeight = function( element, includeMargins ) {
  var styles = getStyles( element, null );
  var height = Shuffle._getNumberStyle( element, 'height', styles );

  if ( includeMargins ) {
    var marginTop = Shuffle._getNumberStyle( element, 'marginTop', styles );
    var marginBottom = Shuffle._getNumberStyle( element, 'marginBottom', styles );
    height += marginTop + marginBottom;
  }

  return height;
};


/**
 * Change a property or execute a function which will not have a transition
 * @param {Element} element DOM element that won't be transitioned
 * @param {Function} callback A function which will be called while transition
 *     is set to 0ms.
 * @param {Object} [context] Optional context for the callback function.
 * @private
 */
Shuffle._skipTransition = function( element, callback, context ) {
  var duration = element.style[ TRANSITION_DURATION ];

  // Set the duration to zero so it happens immediately
  element.style[ TRANSITION_DURATION ] = '0ms'; // ms needed for firefox!

  callback.call( context );

  // Force reflow
  var reflow = element.offsetWidth;
  // Avoid jshint warnings: unused variables and expressions.
  reflow = null;

  // Put the duration back
  element.style[ TRANSITION_DURATION ] = duration;
};


/**
 * Instance methods.
 */

Shuffle.prototype._init = function() {
  this.$items = this._getItems();

  this.sizer = this._getElementOption( this.sizer );

  if ( this.sizer ) {
    this.useSizer = true;
  }

  // Add class and invalidate styles
  this.$el.addClass( Shuffle.ClassName.BASE );

  // Set initial css for each item
  this._initItems();

  // Bind resize events
  // http://stackoverflow.com/questions/1852751/window-resize-event-firing-in-internet-explorer
  $window.on('resize.' + SHUFFLE + '.' + this.unique, this._getResizeFunction());

  // Get container css all in one request. Causes reflow
  var containerCSS = this.$el.css(['position', 'overflow']);
  var containerWidth = Shuffle._getOuterWidth( this.element );

  // Add styles to the container if it doesn't have them.
  this._validateStyles( containerCSS );

  // We already got the container's width above, no need to cause another reflow getting it again...
  // Calculate the number of columns there will be
  this._setColumns( containerWidth );

  // Kick off!
  this.shuffle( this.group, this.initialSort );

  // The shuffle items haven't had transitions set on them yet
  // so the user doesn't see the first layout. Set them now that the first layout is done.
  if ( this.supported ) {
    defer(function() {
      this._setTransitions();
      this.element.style[ TRANSITION ] = 'height ' + this.speed + 'ms ' + this.easing;
    }, this);
  }
};


/**
 * Returns a throttled and proxied function for the resize handler.
 * @return {Function}
 * @private
 */
Shuffle.prototype._getResizeFunction = function() {
  var resizeFunction = $.proxy( this._onResize, this );
  return this.throttle ?
      this.throttle( resizeFunction, this.throttleTime ) :
      resizeFunction;
};


/**
 * Retrieve an element from an option.
 * @param {string|jQuery|Element} option The option to check.
 * @return {?Element} The plain element or null.
 * @private
 */
Shuffle.prototype._getElementOption = function( option ) {
  // If column width is a string, treat is as a selector and search for the
  // sizer element within the outermost container
  if ( typeof option === 'string' ) {
    return this.$el.find( option )[0] || null;

  // Check for an element
  } else if ( option && option.nodeType && option.nodeType === 1 ) {
    return option;

  // Check for jQuery object
  } else if ( option && option.jquery ) {
    return option[0];
  }

  return null;
};


/**
 * Ensures the shuffle container has the css styles it needs applied to it.
 * @param {Object} styles Key value pairs for position and overflow.
 * @private
 */
Shuffle.prototype._validateStyles = function(styles) {
  // Position cannot be static.
  if ( styles.position === 'static' ) {
    this.element.style.position = 'relative';
  }

  // Overflow has to be hidden
  if ( styles.overflow !== 'hidden' ) {
    this.element.style.overflow = 'hidden';
  }
};


/**
 * Filter the elements by a category.
 * @param {string} [category] Category to filter by. If it's given, the last
 *     category will be used to filter the items.
 * @param {ArrayLike} [$collection] Optionally filter a collection. Defaults to
 *     all the items.
 * @return {jQuery} Filtered items.
 * @private
 */
Shuffle.prototype._filter = function( category, $collection ) {
  category = category || this.lastFilter;
  $collection = $collection || this.$items;

  var set = this._getFilteredSets( category, $collection );

  // Individually add/remove concealed/filtered classes
  this._toggleFilterClasses( set.filtered, set.concealed );

  // Save the last filter in case elements are appended.
  this.lastFilter = category;

  // This is saved mainly because providing a filter function (like searching)
  // will overwrite the `lastFilter` property every time its called.
  if ( typeof category === 'string' ) {
    this.group = category;
  }

  return set.filtered;
};


/**
 * Returns an object containing the filtered and concealed elements.
 * @param {string|Function} category Category or function to filter by.
 * @param {ArrayLike.<Element>} $items A collection of items to filter.
 * @return {!{filtered: jQuery, concealed: jQuery}}
 * @private
 */
Shuffle.prototype._getFilteredSets = function( category, $items ) {
  var $filtered = $();
  var $concealed = $();

  // category === 'all', add filtered class to everything
  if ( category === ALL_ITEMS ) {
    $filtered = $items;

  // Loop through each item and use provided function to determine
  // whether to hide it or not.
  } else {
    each($items, function( el ) {
      var $item = $(el);
      if ( this._doesPassFilter( category, $item ) ) {
        $filtered = $filtered.add( $item );
      } else {
        $concealed = $concealed.add( $item );
      }
    }, this);
  }

  return {
    filtered: $filtered,
    concealed: $concealed
  };
};


/**
 * Test an item to see if it passes a category.
 * @param {string|Function} category Category or function to filter by.
 * @param {jQuery} $item A single item, wrapped with jQuery.
 * @return {boolean} Whether it passes the category/filter.
 * @private
 */
Shuffle.prototype._doesPassFilter = function( category, $item ) {
  if ( $.isFunction( category ) ) {
    return category.call( $item[0], $item, this );

  // Check each element's data-groups attribute against the given category.
  } else {
    var groups = $item.data( FILTER_ATTRIBUTE_KEY );
    var keys = this.delimeter && !$.isArray( groups ) ?
        groups.split( this.delimeter ) :
        groups;
    return $.inArray(category, keys) > -1;
  }
};


/**
 * Toggles the filtered and concealed class names.
 * @param {jQuery} $filtered Filtered set.
 * @param {jQuery} $concealed Concealed set.
 * @private
 */
Shuffle.prototype._toggleFilterClasses = function( $filtered, $concealed ) {
  $filtered
    .removeClass( Shuffle.ClassName.CONCEALED )
    .addClass( Shuffle.ClassName.FILTERED );
  $concealed
    .removeClass( Shuffle.ClassName.FILTERED )
    .addClass( Shuffle.ClassName.CONCEALED );
};


/**
 * Set the initial css for each item
 * @param {jQuery} [$items] Optionally specifiy at set to initialize
 */
Shuffle.prototype._initItems = function( $items ) {
  $items = $items || this.$items;
  $items.addClass([
    Shuffle.ClassName.SHUFFLE_ITEM,
    Shuffle.ClassName.FILTERED
  ].join(' '));
  $items.css( this.itemCss ).data('point', new Point()).data('scale', DEFAULT_SCALE);
};


/**
 * Updates the filtered item count.
 * @private
 */
Shuffle.prototype._updateItemCount = function() {
  this.visibleItems = this._getFilteredItems().length;
};


/**
 * Sets css transform transition on a an element.
 * @param {Element} element Element to set transition on.
 * @private
 */
Shuffle.prototype._setTransition = function( element ) {
  element.style[ TRANSITION ] = CSS_TRANSFORM + ' ' + this.speed + 'ms ' +
    this.easing + ', opacity ' + this.speed + 'ms ' + this.easing;
};


/**
 * Sets css transform transition on a group of elements.
 * @param {ArrayLike.<Element>} $items Elements to set transitions on.
 * @private
 */
Shuffle.prototype._setTransitions = function( $items ) {
  $items = $items || this.$items;
  each($items, function( el ) {
    this._setTransition( el );
  }, this);
};


/**
 * Sets a transition delay on a collection of elements, making each delay
 * greater than the last.
 * @param {ArrayLike.<Element>} $collection Array to iterate over.
 */
Shuffle.prototype._setSequentialDelay = function( $collection ) {
  if ( !this.supported ) {
    return;
  }

  // $collection can be an array of dom elements or jquery object
  each($collection, function( el, i ) {
    // This works because the transition-property: transform, opacity;
    el.style[ TRANSITION_DELAY ] = '0ms,' + ((i + 1) * this.sequentialFadeDelay) + 'ms';
  }, this);
};


Shuffle.prototype._getItems = function() {
  return this.$el.children( this.itemSelector );
};


Shuffle.prototype._getFilteredItems = function() {
  return this.$items.filter('.' + Shuffle.ClassName.FILTERED);
};


Shuffle.prototype._getConcealedItems = function() {
  return this.$items.filter('.' + Shuffle.ClassName.CONCEALED);
};


/**
 * Returns the column size, based on column width and sizer options.
 * @param {number} containerWidth Size of the parent container.
 * @param {number} gutterSize Size of the gutters.
 * @return {number}
 * @private
 */
Shuffle.prototype._getColumnSize = function( containerWidth, gutterSize ) {
  var size;

  // If the columnWidth property is a function, then the grid is fluid
  if ( $.isFunction( this.columnWidth ) ) {
    size = this.columnWidth(containerWidth);

  // columnWidth option isn't a function, are they using a sizing element?
  } else if ( this.useSizer ) {
    size = Shuffle._getOuterWidth(this.sizer);

  // if not, how about the explicitly set option?
  } else if ( this.columnWidth ) {
    size = this.columnWidth;

  // or use the size of the first item
  } else if ( this.$items.length > 0 ) {
    size = Shuffle._getOuterWidth(this.$items[0], true);

  // if there's no items, use size of container
  } else {
    size = containerWidth;
  }

  // Don't let them set a column width of zero.
  if ( size === 0 ) {
    size = containerWidth;
  }

  return size + gutterSize;
};


/**
 * Returns the gutter size, based on gutter width and sizer options.
 * @param {number} containerWidth Size of the parent container.
 * @return {number}
 * @private
 */
Shuffle.prototype._getGutterSize = function( containerWidth ) {
  var size;
  if ( $.isFunction( this.gutterWidth ) ) {
    size = this.gutterWidth(containerWidth);
  } else if ( this.useSizer ) {
    size = Shuffle._getNumberStyle(this.sizer, 'marginLeft');
  } else {
    size = this.gutterWidth;
  }

  return size;
};


/**
 * Calculate the number of columns to be used. Gets css if using sizer element.
 * @param {number} [theContainerWidth] Optionally specify a container width if it's already available.
 */
Shuffle.prototype._setColumns = function( theContainerWidth ) {
  var containerWidth = theContainerWidth || Shuffle._getOuterWidth( this.element );
  var gutter = this._getGutterSize( containerWidth );
  var columnWidth = this._getColumnSize( containerWidth, gutter );
  var calculatedColumns = (containerWidth + gutter) / columnWidth;

  // Widths given from getStyles are not precise enough...
  if ( Math.abs(Math.round(calculatedColumns) - calculatedColumns) < this.columnThreshold ) {
    // e.g. calculatedColumns = 11.998876
    calculatedColumns = Math.round( calculatedColumns );
  }

  this.cols = Math.max( Math.floor(calculatedColumns), 1 );
  this.containerWidth = containerWidth;
  this.colWidth = columnWidth;
};

/**
 * Adjust the height of the grid
 */
Shuffle.prototype._setContainerSize = function() {
  this.$el.css( 'height', this._getContainerSize() );
};


/**
 * Based on the column heights, it returns the biggest one.
 * @return {number}
 * @private
 */
Shuffle.prototype._getContainerSize = function() {
  return arrayMax( this.positions );
};


/**
 * Fire events with .shuffle namespace
 */
Shuffle.prototype._fire = function( name, args ) {
  this.$el.trigger( name + '.' + SHUFFLE, args && args.length ? args : [ this ] );
};


/**
 * Zeros out the y columns array, which is used to determine item placement.
 * @private
 */
Shuffle.prototype._resetCols = function() {
  var i = this.cols;
  this.positions = [];
  while (i--) {
    this.positions.push( 0 );
  }
};


/**
 * Loops through each item that should be shown and calculates the x, y position.
 * @param {Array.<Element>} items Array of items that will be shown/layed out in order in their array.
 *     Because jQuery collection are always ordered in DOM order, we can't pass a jq collection.
 * @param {boolean} [isOnlyPosition=false] If true this will position the items with zero opacity.
 */
Shuffle.prototype._layout = function( items, isOnlyPosition ) {
  each(items, function( item ) {
    this._layoutItem( item, !!isOnlyPosition );
  }, this);

  // `_layout` always happens after `_shrink`, so it's safe to process the style
  // queue here with styles from the shrink method.
  this._processStyleQueue();

  // Adjust the height of the container.
  this._setContainerSize();
};


/**
 * Calculates the position of the item and pushes it onto the style queue.
 * @param {Element} item Element which is being positioned.
 * @param {boolean} isOnlyPosition Whether to position the item, but with zero
 *     opacity so that it can fade in later.
 * @private
 */
Shuffle.prototype._layoutItem = function( item, isOnlyPosition ) {
  var $item = $(item);
  var itemData = $item.data();
  var currPos = itemData.point;
  var currScale = itemData.scale;
  var itemSize = {
    width: Shuffle._getOuterWidth( item, true ),
    height: Shuffle._getOuterHeight( item, true )
  };
  var pos = this._getItemPosition( itemSize );

  // If the item will not change its position, do not add it to the render
  // queue. Transitions don't fire when setting a property to the same value.
  if ( Point.equals(currPos, pos) && currScale === DEFAULT_SCALE ) {
    return;
  }

  // Save data for shrink
  itemData.point = pos;
  itemData.scale = DEFAULT_SCALE;

  this.styleQueue.push({
    $item: $item,
    point: pos,
    scale: DEFAULT_SCALE,
    opacity: isOnlyPosition ? 0 : 1,
    // Set styles immediately if there is no transition speed.
    skipTransition: isOnlyPosition || this.speed === 0,
    callfront: function() {
      if ( !isOnlyPosition ) {
        $item.css( 'visibility', 'visible' );
      }
    },
    callback: function() {
      if ( isOnlyPosition ) {
        $item.css( 'visibility', 'hidden' );
      }
    }
  });
};


/**
 * Determine the location of the next item, based on its size.
 * @param {{width: number, height: number}} itemSize Object with width and height.
 * @return {Point}
 * @private
 */
Shuffle.prototype._getItemPosition = function( itemSize ) {
  var columnSpan = this._getColumnSpan( itemSize.width, this.colWidth, this.cols );

  var setY = this._getColumnSet( columnSpan, this.cols );

  // Finds the index of the smallest number in the set.
  var shortColumnIndex = this._getShortColumn( setY, this.buffer );

  // Position the item
  var point = new Point(
    Math.round( this.colWidth * shortColumnIndex ),
    Math.round( setY[shortColumnIndex] ));

  // Update the columns array with the new values for each column.
  // e.g. before the update the columns could be [250, 0, 0, 0] for an item
  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].
  var setHeight = setY[shortColumnIndex] + itemSize.height;
  var setSpan = this.cols + 1 - setY.length;
  for ( var i = 0; i < setSpan; i++ ) {
    this.positions[ shortColumnIndex + i ] = setHeight;
  }

  return point;
};


/**
 * Determine the number of columns an items spans.
 * @param {number} itemWidth Width of the item.
 * @param {number} columnWidth Width of the column (includes gutter).
 * @param {number} columns Total number of columns
 * @return {number}
 * @private
 */
Shuffle.prototype._getColumnSpan = function( itemWidth, columnWidth, columns ) {
  var columnSpan = itemWidth / columnWidth;

  // If the difference between the rounded column span number and the
  // calculated column span number is really small, round the number to
  // make it fit.
  if ( Math.abs(Math.round( columnSpan ) - columnSpan ) < this.columnThreshold ) {
    // e.g. columnSpan = 4.0089945390298745
    columnSpan = Math.round( columnSpan );
  }

  // Ensure the column span is not more than the amount of columns in the whole layout.
  return Math.min( Math.ceil( columnSpan ), columns );
};


/**
 * Retrieves the column set to use for placement.
 * @param {number} columnSpan The number of columns this current item spans.
 * @param {number} columns The total columns in the grid.
 * @return {Array.<number>} An array of numbers represeting the column set.
 * @private
 */
Shuffle.prototype._getColumnSet = function( columnSpan, columns ) {
  // The item spans only one column.
  if ( columnSpan === 1 ) {
    return this.positions;

  // The item spans more than one column, figure out how many different
  // places it could fit horizontally.
  // The group count is the number of places within the positions this block
  // could fit, ignoring the current positions of items.
  // Imagine a 2 column brick as the second item in a 4 column grid with
  // 10px height each. Find the places it would fit:
  // [10, 0, 0, 0]
  //  |   |  |
  //  *   *  *
  //
  // Then take the places which fit and get the bigger of the two:
  // max([10, 0]), max([0, 0]), max([0, 0]) = [10, 0, 0]
  //
  // Next, find the first smallest number (the short column).
  // [10, 0, 0]
  //      |
  //      *
  //
  // And that's where it should be placed!
  } else {
    var groupCount = columns + 1 - columnSpan;
    var groupY = [];

    // For how many possible positions for this item there are.
    for ( var i = 0; i < groupCount; i++ ) {
      // Find the bigger value for each place it could fit.
      groupY[i] = arrayMax( this.positions.slice( i, i + columnSpan ) );
    }

    return groupY;
  }
};


/**
 * Find index of short column, the first from the left where this item will go.
 *
 * @param {Array.<number>} positions The array to search for the smallest number.
 * @param {number} buffer Optional buffer which is very useful when the height
 *     is a percentage of the width.
 * @return {number} Index of the short column.
 * @private
 */
Shuffle.prototype._getShortColumn = function( positions, buffer ) {
  var minPosition = arrayMin( positions );
  for (var i = 0, len = positions.length; i < len; i++) {
    if ( positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer ) {
      return i;
    }
  }
  return 0;
};


/**
 * Hides the elements that don't match our filter.
 * @param {jQuery} $collection jQuery collection to shrink.
 * @private
 */
Shuffle.prototype._shrink = function( $collection ) {
  var $concealed = $collection || this._getConcealedItems();

  each($concealed, function( item ) {
    var $item = $(item);
    var itemData = $item.data();

    // Continuing would add a transitionend event listener to the element, but
    // that listener would not execute because the transform and opacity would
    // stay the same.
    if ( itemData.scale === CONCEALED_SCALE ) {
      return;
    }

    itemData.scale = CONCEALED_SCALE;

    this.styleQueue.push({
      $item: $item,
      point: itemData.point,
      scale : CONCEALED_SCALE,
      opacity: 0,
      callback: function() {
        $item.css( 'visibility', 'hidden' );
      }
    });
  }, this);
};


/**
 * Resize handler.
 * @private
 */
Shuffle.prototype._onResize = function() {
  // If shuffle is disabled, destroyed, don't do anything
  if ( !this.enabled || this.destroyed ) {
    return;
  }

  // Will need to check height in the future if it's layed out horizontaly
  var containerWidth = Shuffle._getOuterWidth( this.element );

  // containerWidth hasn't changed, don't do anything
  if ( containerWidth === this.containerWidth ) {
    return;
  }

  this.update();
};


/**
 * Returns styles for either jQuery animate or transition.
 * @param {Object} opts Transition options.
 * @return {!Object} Transforms for transitions, left/top for animate.
 * @private
 */
Shuffle.prototype._getStylesForTransition = function( opts ) {
  var styles = {
    opacity: opts.opacity
  };

  if ( this.supported ) {
    styles[ TRANSFORM ] = Shuffle._getItemTransformString( opts.point, opts.scale );
  } else {
    styles.left = opts.point.x;
    styles.top = opts.point.y;
  }

  return styles;
};


/**
 * Transitions an item in the grid
 *
 * @param {Object} opts options.
 * @param {jQuery} opts.$item jQuery object representing the current item.
 * @param {Point} opts.point A point object with the x and y coordinates.
 * @param {number} opts.scale Amount to scale the item.
 * @param {number} opts.opacity Opacity of the item.
 * @param {Function} opts.callback Complete function for the animation.
 * @param {Function} opts.callfront Function to call before transitioning.
 * @private
 */
Shuffle.prototype._transition = function( opts ) {
  var styles = this._getStylesForTransition( opts );
  this._startItemAnimation( opts.$item, styles, opts.callfront || $.noop, opts.callback || $.noop );
};


Shuffle.prototype._startItemAnimation = function( $item, styles, callfront, callback ) {
  var _this = this;
  // Transition end handler removes its listener.
  function handleTransitionEnd( evt ) {
    // Make sure this event handler has not bubbled up from a child.
    if ( evt.target === evt.currentTarget ) {
      $( evt.target ).off( TRANSITIONEND, handleTransitionEnd );
      _this._removeTransitionReference(reference);
      callback();
    }
  }

  var reference = {
    $element: $item,
    handler: handleTransitionEnd
  };

  callfront();

  // Transitions are not set until shuffle has loaded to avoid the initial transition.
  if ( !this.initialized ) {
    $item.css( styles );
    callback();
    return;
  }

  // Use CSS Transforms if we have them
  if ( this.supported ) {
    $item.css( styles );
    $item.on( TRANSITIONEND, handleTransitionEnd );
    this._transitions.push(reference);

  // Use jQuery to animate left/top
  } else {
    // Save the deferred object which jQuery returns.
    var anim = $item.stop( true ).animate( styles, this.speed, 'swing', callback );
    // Push the animation to the list of pending animations.
    this._animations.push( anim.promise() );
  }
};


/**
 * Execute the styles gathered in the style queue. This applies styles to elements,
 * triggering transitions.
 * @param {boolean} noLayout Whether to trigger a layout event.
 * @private
 */
Shuffle.prototype._processStyleQueue = function( noLayout ) {
  if ( this.isTransitioning ) {
    this._cancelMovement();
  }

  var $transitions = $();

  // Iterate over the queue and keep track of ones that use transitions.
  each(this.styleQueue, function( transitionObj ) {
    if ( transitionObj.skipTransition ) {
      this._styleImmediately( transitionObj );
    } else {
      $transitions = $transitions.add( transitionObj.$item );
      this._transition( transitionObj );
    }
  }, this);


  if ( $transitions.length > 0 && this.initialized && this.speed > 0 ) {
    // Set flag that shuffle is currently in motion.
    this.isTransitioning = true;

    if ( this.supported ) {
      this._whenCollectionDone( $transitions, TRANSITIONEND, this._movementFinished );

    // The _transition function appends a promise to the animations array.
    // When they're all complete, do things.
    } else {
      this._whenAnimationsDone( this._movementFinished );
    }

  // A call to layout happened, but none of the newly filtered items will
  // change position. Asynchronously fire the callback here.
  } else if ( !noLayout ) {
    defer( this._layoutEnd, this );
  }

  // Remove everything in the style queue
  this.styleQueue.length = 0;
};

Shuffle.prototype._cancelMovement = function() {
  if (this.supported) {
    // Remove the transition end event for each listener.
    each(this._transitions, function( transition ) {
      transition.$element.off( TRANSITIONEND, transition.handler );
    });
  } else {
    // Even when `stop` is called on the jQuery animation, its promise will
    // still be resolved. Since it cannot be determine from within that callback
    // whether the animation was stopped or not, a flag is set here to distinguish
    // between the two states.
    this._isMovementCanceled = true;
    this.$items.stop(true);
    this._isMovementCanceled = false;
  }

  // Reset the array.
  this._transitions.length = 0;

  // Show it's no longer active.
  this.isTransitioning = false;
};

Shuffle.prototype._removeTransitionReference = function(ref) {
  var indexInArray = $.inArray(ref, this._transitions);
  if (indexInArray > -1) {
    this._transitions.splice(indexInArray, 1);
  }
};


/**
 * Apply styles without a transition.
 * @param {Object} opts Transitions options object.
 * @private
 */
Shuffle.prototype._styleImmediately = function( opts ) {
  Shuffle._skipTransition(opts.$item[0], function() {
    opts.$item.css( this._getStylesForTransition( opts ) );
  }, this);
};

Shuffle.prototype._movementFinished = function() {
  this.isTransitioning = false;
  this._layoutEnd();
};

Shuffle.prototype._layoutEnd = function() {
  this._fire( Shuffle.EventType.LAYOUT );
};

Shuffle.prototype._addItems = function( $newItems, addToEnd, isSequential ) {
  // Add classes and set initial positions.
  this._initItems( $newItems );

  // Add transition to each item.
  this._setTransitions( $newItems );

  // Update the list of
  this.$items = this._getItems();

  // Shrink all items (without transitions).
  this._shrink( $newItems );
  each(this.styleQueue, function( transitionObj ) {
    transitionObj.skipTransition = true;
  });

  // Apply shrink positions, but do not cause a layout event.
  this._processStyleQueue( true );

  if ( addToEnd ) {
    this._addItemsToEnd( $newItems, isSequential );
  } else {
    this.shuffle( this.lastFilter );
  }
};


Shuffle.prototype._addItemsToEnd = function( $newItems, isSequential ) {
  // Get ones that passed the current filter
  var $passed = this._filter( null, $newItems );
  var passed = $passed.get();

  // How many filtered elements?
  this._updateItemCount();

  this._layout( passed, true );

  if ( isSequential && this.supported ) {
    this._setSequentialDelay( passed );
  }

  this._revealAppended( passed );
};


/**
 * Triggers appended elements to fade in.
 * @param {ArrayLike.<Element>} $newFilteredItems Collection of elements.
 * @private
 */
Shuffle.prototype._revealAppended = function( newFilteredItems ) {
  defer(function() {
    each(newFilteredItems, function( el ) {
      var $item = $( el );
      this._transition({
        $item: $item,
        opacity: 1,
        point: $item.data('point'),
        scale: DEFAULT_SCALE
      });
    }, this);

    this._whenCollectionDone($(newFilteredItems), TRANSITIONEND, function() {
      $(newFilteredItems).css( TRANSITION_DELAY, '0ms' );
      this._movementFinished();
    });
  }, this, this.revealAppendedDelay);
};


/**
 * Execute a function when an event has been triggered for every item in a collection.
 * @param {jQuery} $collection Collection of elements.
 * @param {string} eventName Event to listen for.
 * @param {Function} callback Callback to execute when they're done.
 * @private
 */
Shuffle.prototype._whenCollectionDone = function( $collection, eventName, callback ) {
  var done = 0;
  var items = $collection.length;
  var self = this;

  function handleEventName( evt ) {
    if ( evt.target === evt.currentTarget ) {
      $( evt.target ).off( eventName, handleEventName );
      done++;

      // Execute callback if all items have emitted the correct event.
      if ( done === items ) {
        self._removeTransitionReference(reference);
        callback.call( self );
      }
    }
  }

  var reference = {
    $element: $collection,
    handler: handleEventName
  };

  // Bind the event to all items.
  $collection.on( eventName, handleEventName );

  // Keep track of transitionend events so they can be removed.
  this._transitions.push(reference);
};


/**
 * Execute a callback after jQuery `animate` for a collection has finished.
 * @param {Function} callback Callback to execute when they're done.
 * @private
 */
Shuffle.prototype._whenAnimationsDone = function( callback ) {
  $.when.apply( null, this._animations ).always( $.proxy( function() {
    this._animations.length = 0;
    if (!this._isMovementCanceled) {
      callback.call( this );
    }
  }, this ));
};


/**
 * Public Methods
 */

/**
 * The magic. This is what makes the plugin 'shuffle'
 * @param {string|Function} [category] Category to filter by. Can be a function
 * @param {Object} [sortObj] A sort object which can sort the filtered set
 */
Shuffle.prototype.shuffle = function( category, sortObj ) {
  if ( !this.enabled ) {
    return;
  }

  if ( !category ) {
    category = ALL_ITEMS;
  }

  this._filter( category );

  // How many filtered elements?
  this._updateItemCount();

  // Shrink each concealed item
  this._shrink();

  // Update transforms on .filtered elements so they will animate to their new positions
  this.sort( sortObj );
};


/**
 * Gets the .filtered elements, sorts them, and passes them to layout.
 * @param {Object} opts the options object for the sorted plugin
 */
Shuffle.prototype.sort = function( opts ) {
  if ( this.enabled ) {
    this._resetCols();

    var sortOptions = opts || this.lastSort;
    var items = this._getFilteredItems().sorted( sortOptions );

    this._layout( items );

    this.lastSort = sortOptions;
  }
};


/**
 * Reposition everything.
 * @param {boolean} isOnlyLayout If true, column and gutter widths won't be
 *     recalculated.
 */
Shuffle.prototype.update = function( isOnlyLayout ) {
  if ( this.enabled ) {

    if ( !isOnlyLayout ) {
      // Get updated colCount
      this._setColumns();
    }

    // Layout items
    this.sort();
  }
};


/**
 * Use this instead of `update()` if you don't need the columns and gutters updated
 * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations
 * could be off.
 */
Shuffle.prototype.layout = function() {
  this.update( true );
};


/**
 * New items have been appended to shuffle. Fade them in sequentially
 * @param {jQuery} $newItems jQuery collection of new items
 * @param {boolean} [addToEnd=false] If true, new items will be added to the end / bottom
 *     of the items. If not true, items will be mixed in with the current sort order.
 * @param {boolean} [isSequential=true] If false, new items won't sequentially fade in
 */
Shuffle.prototype.appended = function( $newItems, addToEnd, isSequential ) {
  this._addItems( $newItems, addToEnd === true, isSequential !== false );
};


/**
 * Disables shuffle from updating dimensions and layout on resize
 */
Shuffle.prototype.disable = function() {
  this.enabled = false;
};


/**
 * Enables shuffle again
 * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters
 */
Shuffle.prototype.enable = function( isUpdateLayout ) {
  this.enabled = true;
  if ( isUpdateLayout !== false ) {
    this.update();
  }
};


/**
 * Remove 1 or more shuffle items
 * @param {jQuery} $collection A jQuery object containing one or more element in shuffle
 * @return {Shuffle} The shuffle object
 */
Shuffle.prototype.remove = function( $collection ) {

  // If this isn't a jquery object, exit
  if ( !$collection.length || !$collection.jquery ) {
    return;
  }

  function handleRemoved() {
    // Remove the collection in the callback
    $collection.remove();

    // Update things now that elements have been removed.
    this.$items = this._getItems();
    this._updateItemCount();

    this._fire( Shuffle.EventType.REMOVED, [ $collection, this ] );

    // Let it get garbage collected
    $collection = null;
  }

  // Hide collection first.
  this._toggleFilterClasses( $(), $collection );
  this._shrink( $collection );

  this.sort();

  this.$el.one( Shuffle.EventType.LAYOUT + '.' + SHUFFLE, $.proxy( handleRemoved, this ) );
};


/**
 * Destroys shuffle, removes events, styles, and classes
 */
Shuffle.prototype.destroy = function() {
  // If there is more than one shuffle instance on the page,
  // removing the resize handler from the window would remove them
  // all. This is why a unique value is needed.
  $window.off('.' + this.unique);

  // Reset container styles
  this.$el
      .removeClass( SHUFFLE )
      .removeAttr('style')
      .removeData( SHUFFLE );

  // Reset individual item styles
  this.$items
      .removeAttr('style')
      .removeData('point')
      .removeData('scale')
      .removeClass([
        Shuffle.ClassName.CONCEALED,
        Shuffle.ClassName.FILTERED,
        Shuffle.ClassName.SHUFFLE_ITEM
      ].join(' '));

  // Null DOM references
  this.$items = null;
  this.$el = null;
  this.sizer = null;
  this.element = null;
  this._transitions = null;

  // Set a flag so if a debounced resize has been triggered,
  // it can first check if it is actually destroyed and not doing anything
  this.destroyed = true;
};


// Plugin definition
$.fn.shuffle = function( opts ) {
  var args = Array.prototype.slice.call( arguments, 1 );
  return this.each(function() {
    var $this = $( this );
    var shuffle = $this.data( SHUFFLE );

    // If we don't have a stored shuffle, make a new one and save it
    if ( !shuffle ) {
      shuffle = new Shuffle( this, opts );
      $this.data( SHUFFLE, shuffle );
    } else if ( typeof opts === 'string' && shuffle[ opts ] ) {
      shuffle[ opts ].apply( shuffle, args );
    }
  });
};


// http://stackoverflow.com/a/962890/373422
function randomize( array ) {
  var tmp, current;
  var top = array.length;

  if ( !top ) {
    return array;
  }

  while ( --top ) {
    current = Math.floor( Math.random() * (top + 1) );
    tmp = array[ current ];
    array[ current ] = array[ top ];
    array[ top ] = tmp;
  }

  return array;
}


// You can return `undefined` from the `by` function to revert to DOM order
// This plugin does NOT return a jQuery object. It returns a plain array because
// jQuery sorts everything in DOM order.
$.fn.sorted = function(options) {
  var opts = $.extend({}, $.fn.sorted.defaults, options);
  var arr = this.get();
  var revert = false;

  if ( !arr.length ) {
    return [];
  }

  if ( opts.randomize ) {
    return randomize( arr );
  }

  // Sort the elements by the opts.by function.
  // If we don't have opts.by, default to DOM order
  if ( $.isFunction( opts.by ) ) {
    arr.sort(function(a, b) {

      // Exit early if we already know we want to revert
      if ( revert ) {
        return 0;
      }

      var valA = opts.by($(a));
      var valB = opts.by($(b));

      // If both values are undefined, use the DOM order
      if ( valA === undefined && valB === undefined ) {
        revert = true;
        return 0;
      }

      if ( valA < valB || valA === 'sortFirst' || valB === 'sortLast' ) {
        return -1;
      }

      if ( valA > valB || valA === 'sortLast' || valB === 'sortFirst' ) {
        return 1;
      }

      return 0;
    });
  }

  // Revert to the original array if necessary
  if ( revert ) {
    return this.get();
  }

  if ( opts.reverse ) {
    arr.reverse();
  }

  return arr;
};


$.fn.sorted.defaults = {
  reverse: false, // Use array.reverse() to reverse the results
  by: null, // Sorting function
  randomize: false // If true, this will skip the sorting and return a randomized order in the array
};

return Shuffle;

});

(function(window, $, undefined) {
    'use strict';

    if (!window) return; // Server side

var
    _baron = baron, // Stored baron value for noConflict usage
    pos = ['left', 'top', 'right', 'bottom', 'width', 'height'],
    origin = {
        v: { // Vertical
            x: 'Y', pos: pos[1], oppos: pos[3], crossPos: pos[0], crossOpPos: pos[2], size: pos[5], crossSize: pos[4],
            client: 'clientHeight', crossClient: 'clientWidth', crossScroll: 'scrollWidth', offset: 'offsetHeight', crossOffset: 'offsetWidth', offsetPos: 'offsetTop',
            scroll: 'scrollTop', scrollSize: 'scrollHeight'
        },
        h: { // Horizontal
            x: 'X', pos: pos[0], oppos: pos[2], crossPos: pos[1], crossOpPos: pos[3], size: pos[4], crossSize: pos[5],
            client: 'clientWidth', crossClient: 'clientHeight', crossScroll: 'scrollHeight', offset: 'offsetWidth', crossOffset: 'offsetHeight', offsetPos: 'offsetLeft',
            scroll: 'scrollLeft', scrollSize: 'scrollWidth'
        }
    },

    each = function(obj, iterator) {
        var i = 0;

         if (obj.length === undefined || obj === window) obj = [obj];

        while (obj[i]) {
            iterator.call(this, obj[i], i);
            i++;
        }
    },

    baron = function(params) {
        var jQueryMode,
            roots,
            $;

        params = params || {};
        $ = params.$ || $ || window.jQuery;
        jQueryMode = this instanceof $;  // this - window or jQuery instance

        if (jQueryMode) {
            params.root = roots = this;
        } else {
            roots = $(params.root || params.scroller);
        }

        var instance = new baron.fn.constructor(roots, params, $);

        if (instance.autoUpdate) {
            instance.autoUpdate();
        }

        return instance;
    };

    // shortcut for getTime
    function getTime() {
        return new Date().getTime();
    }

    baron.fn = {
        constructor: function(roots, input, $) {
            var params = validate(input);

            params.$ = $;
            each.call(this, roots, function(root, i) {
                var localParams = clone(params);

                if (params.root && params.scroller) {
                    localParams.scroller = params.$(params.scroller, root);
                    if (!localParams.scroller.length) {
                        localParams.scroller = root;
                    }
                } else {
                    localParams.scroller = root;
                }

                localParams.root = root;
                this[i] = init(localParams);
                this.length = i + 1;
            });

            this.params = params;
        },

        dispose: function() {
            var params = this.params;

            if (this[0]) { /* Если есть хотя бы 1 рабочий инстанс */
                each(this, function(item) {
                    item.dispose(params);
                });
            }
            this.params = null;
        },

        update: function() {
            var i = 0;

            while (this[i]) {
                this[i].update.apply(this[i], arguments);
                i++;
            }
        },

        baron: function(params) {
            params.root = [];
            params.scroller = this.params.scroller;

            each.call(this, this, function(elem) {
                params.root.push(elem.root);
            });
            params.direction = (this.params.direction == 'v') ? 'h' : 'v';
            params._chain = true;

            return baron(params);
        }
    };

    function manageEvents(item, eventManager, mode) {
        item._eventHandlers = item._eventHandlers || [ // Creating new functions for one baron item only one time
            {
                // onScroll:
                element: item.scroller,

                handler: function(e) {
                    item.scroll(e);
                },

                type: 'scroll'
            }, {
                // css transitions & animations
                element: item.root,

                handler: function() {
                    item.update();
                },

                type: 'transitionend animationend'
            }, {
                // onKeyup (textarea):
                element: item.scroller,

                handler: function() {
                    item.update();
                },

                type: 'keyup'
            }, {
                // onMouseDown:
                element: item.bar,

                handler: function(e) {
                    e.preventDefault(); // Text selection disabling in Opera... and all other browsers?
                    item.selection(); // Disable text selection in ie8
                    item.drag.now = 1; // Save private byte
                },

                type: 'touchstart mousedown'
            }, {
                // onMouseUp:
                element: document,

                handler: function() {
                    item.selection(1); // Enable text selection
                    item.drag.now = 0;
                },

                type: 'mouseup blur touchend'
            }, {
                // onCoordinateReset:
                element: document,

                handler: function(e) {
                    if (e.button != 2) { // Not RM
                        item._pos0(e);
                    }
                },

                type: 'touchstart mousedown'
            }, {
                // onMouseMove:
                element: document,

                handler: function(e) {
                    if (item.drag.now) {
                        item.drag(e);
                    }
                },

                type: 'mousemove touchmove'
            }, {
                // onResize:
                element: window,

                handler: function() {
                    item.update();
                },

                type: 'resize'
            }, {
                // sizeChange:
                element: item.root,

                handler: function() {
                    item.update();
                },

                type: 'sizeChange'
            }
        ];

        each(item._eventHandlers, function(event) {
            if (event.element) {
                eventManager(event.element, event.type, event.handler, mode);
            }
        });

        // if (item.scroller) {
        //     event(item.scroller, 'scroll', item._eventHandlers.onScroll, mode);
        // }
        // if (item.bar) {
        //     event(item.bar, 'touchstart mousedown', item._eventHandlers.onMouseDown, mode);
        // }
        // event(document, 'mouseup blur touchend', item._eventHandlers.onMouseUp, mode);
        // event(document, 'touchstart mousedown', item._eventHandlers.onCoordinateReset, mode);
        // event(document, 'mousemove touchmove', item._eventHandlers.onMouseMove, mode);
        // event(window, 'resize', item._eventHandlers.onResize, mode);
        // if (item.root) {
        //     event(item.root, 'sizeChange', item._eventHandlers.onResize, mode); // Custon event for alternate baron update mechanism
        // }
    }

    function manageAttr(node, direction, mode) {
        var attrName = 'data-baron-' + direction;

        if (mode == 'on') {
            node.setAttribute(attrName, 'inited');
        } else if (mode == 'off') {
            node.removeAttribute(attrName);
        } else {
            return node.getAttribute(attrName);
        }
    }

    function init(params) {
        if (manageAttr(params.root, params.direction)) throw new Error('Second baron initialization');

        var out = new item.prototype.constructor(params); // __proto__ of returning object is baron.prototype

        manageEvents(out, params.event, 'on');

        manageAttr(out.root, params.direction, 'on');

        out.update();

        return out;
    }

    function clone(input) {
        var output = {};

        input = input || {};

        for (var key in input) {
            if (input.hasOwnProperty(key)) {
                output[key] = input[key];
            }
        }

        return output;
    }

    function validate(input) {
        var output = clone(input);

        output.direction = output.direction || 'v';

        var event = input.event || function(elem, event, func, mode) {
            output.$(elem)[mode || 'on'](event, func);
        };

        output.event = function(elems, e, func, mode) {
            each(elems, function(elem) {
                event(elem, e, func, mode);
            });
        };

        return output;
    }

    function fire(eventName) {
        /* jshint validthis:true */
        if (this.events && this.events[eventName]) {
            for (var i = 0 ; i < this.events[eventName].length ; i++) {
                var args = Array.prototype.slice.call( arguments, 1 );

                this.events[eventName][i].apply(this, args);
            }
        }
    }

    var item = {};

    item.prototype = {
        // underscore.js realization
        _debounce: function(func, wait) {
            var self = this,
                timeout,
                // args, // right now there is no need for arguments
                // context, // and for context
                timestamp;
                // result; // and for result

            var later = function() {
                if (self._disposed) {
                    clearTimeout(timeout);
                    timeout = self = null;
                    return;
                }

                var last = getTime() - timestamp;

                if (last < wait && last >= 0) {
                    timeout = setTimeout(later, wait - last);
                } else {
                    timeout = null;
                    // result = func.apply(context, args);
                    func();
                    // context = args = null;
                }
            };

            return function() {
                // context = this;
                // args = arguments;
                timestamp = getTime();

                if (!timeout) {
                    timeout = setTimeout(later, wait);
                }

                // return result;
            };
        },

        constructor: function(params) {
            var $,
                barPos,
                scrollerPos0,
                track,
                resizePauseTimer,
                scrollPauseTimer,
                scrollingTimer,
                pause,
                scrollLastFire,
                resizeLastFire,
                oldBarSize;

            resizeLastFire = scrollLastFire = getTime();

            $ = this.$ = params.$;
            this.event = params.event;
            this.events = {};

            function getNode(sel, context) {
                return $(sel, context)[0]; // Can be undefined
            }

            // DOM elements
            this.root = params.root; // Always html node, not just selector
            this.scroller = getNode(params.scroller); // (params.scroller) ? getNode(params.scroller, this.root) : this.root;
            this.bar = getNode(params.bar, this.root);
            track = this.track = getNode(params.track, this.root);
            if (!this.track && this.bar) {
                track = this.bar.parentNode;
            }
            this.clipper = this.scroller.parentNode;

            // Parameters
            this.direction = params.direction;
            this.origin = origin[this.direction];
            this.barOnCls = params.barOnCls || '_baron';
            this.scrollingCls = params.scrollingCls;
            this.barTopLimit = 0;
            pause = params.pause * 1000 || 0;

            // Updating height or width of bar
            function setBarSize(size) {
                /* jshint validthis:true */
                var barMinSize = this.barMinSize || 20;

                if (size > 0 && size < barMinSize) {
                    size = barMinSize;
                }

                if (this.bar) {
                    $(this.bar).css(this.origin.size, parseInt(size, 10) + 'px');
                }
            }

            // Updating top or left bar position
            function posBar(pos) {
                /* jshint validthis:true */
                if (this.bar) {
                    var was = $(this.bar).css(this.origin.pos),
                        will = +pos + 'px';

                    if (will && will != was) {
                        $(this.bar).css(this.origin.pos, will);
                    }
                }
            }

            // Free path for bar
            function k() {
                /* jshint validthis:true */
                return track[this.origin.client] - this.barTopLimit - this.bar[this.origin.offset];
            }

            // Relative content top position to bar top position
            function relToPos(r) {
                /* jshint validthis:true */
                return r * k.call(this) + this.barTopLimit;
            }

            // Bar position to relative content position
            function posToRel(t) {
                /* jshint validthis:true */
                return (t - this.barTopLimit) / k.call(this);
            }

            // Cursor position in main direction in px // Now with iOs support
            this.cursor = function(e) {
                return e['client' + this.origin.x] || (((e.originalEvent || e).touches || {})[0] || {})['page' + this.origin.x];
            };

            // Text selection pos preventing
            function dontPosSelect() {
                return false;
            }

            this.pos = function(x) { // Absolute scroller position in px
                var ie = 'page' + this.origin.x + 'Offset',
                    key = (this.scroller[ie]) ? ie : this.origin.scroll;

                if (x !== undefined) this.scroller[key] = x;

                return this.scroller[key];
            };

            this.rpos = function(r) { // Relative scroller position (0..1)
                var free = this.scroller[this.origin.scrollSize] - this.scroller[this.origin.client],
                    x;

                if (r) {
                    x = this.pos(r * free);
                } else {
                    x = this.pos();
                }

                return x / (free || 1);
            };

            // Switch on the bar by adding user-defined CSS classname to scroller
            this.barOn = function(dispose) {
                if (this.barOnCls) {
                    if (dispose || this.scroller[this.origin.client] >= this.scroller[this.origin.scrollSize]) {
                        if ($(this.root).hasClass(this.barOnCls)) $(this.root).removeClass(this.barOnCls);
                    } else {
                        if (!$(this.root).hasClass(this.barOnCls)) $(this.root).addClass(this.barOnCls);
                    }
                }
            };

            this._pos0 = function(e) {
                scrollerPos0 = this.cursor(e) - barPos;
            };

            this.drag = function(e) {
                this.scroller[this.origin.scroll] = posToRel.call(this, this.cursor(e) - scrollerPos0) * (this.scroller[this.origin.scrollSize] - this.scroller[this.origin.client]);
            };

            // Text selection preventing on drag
            this.selection = function(enable) {
                this.event(document, 'selectpos selectstart', dontPosSelect, enable ? 'off' : 'on');
            };

            // onResize & DOM modified handler
            this.resize = function() {
                var self = this,
                    delay = 0;

                if (getTime() - resizeLastFire < pause) {
                    clearTimeout(resizePauseTimer);
                    delay = pause;
                }

                function upd() {
                    var delta,
                        client,
                        offset,
                        was,
                        will;

                    // Change a css inline rule only if it is really changing value
                    // function tryCss(prop, value, ) {
                    //     var was = $(self.clipper).css(self.origin.crossSize),
                    //         will = self.clipper[self.origin.crossClient] - delta + 'px';
                    // };

                    self.barOn();

                    client = self.scroller[self.origin.crossClient];
                    offset = self.scroller[self.origin.crossOffset];
                    delta = offset - client;

                    if (offset) { // if there is no size, css should not be set
                        if (params.freeze && !self.clipper.style[self.origin.crossSize]) { // Sould fire only once
                            was = $(self.clipper).css(self.origin.crossSize);
                            will = self.clipper[self.origin.crossClient] - delta + 'px';

                            if (was != will) {
                                $(self.clipper).css(self.origin.crossSize, will);
                            }
                        }

                        was = $(self.clipper).css(self.origin.crossSize);
                        will = self.clipper[self.origin.crossClient] + delta + 'px';

                        if (was != will) {
                            $(self.scroller).css(self.origin.crossSize, will);
                        }
                    }

                    Array.prototype.unshift.call(arguments, 'resize');
                    fire.apply(self, arguments);

                    resizeLastFire = getTime();
                }

                if (delay) {
                    resizePauseTimer = setTimeout(upd, delay);
                } else {
                    upd();
                }
            };

            this.updatePositions = function() {
                var newBarSize,
                    self = this;

                if (self.bar) {
                    newBarSize = (track[self.origin.client] - self.barTopLimit) * self.scroller[self.origin.client] / self.scroller[self.origin.scrollSize];

                    // Positioning bar
                    if (parseInt(oldBarSize, 10) != parseInt(newBarSize, 10)) {
                        setBarSize.call(self, newBarSize);
                        oldBarSize = newBarSize;
                    }

                    barPos = relToPos.call(self, self.rpos());

                    posBar.call(self, barPos);
                }

                Array.prototype.unshift.call( arguments, 'scroll' );
                fire.apply(self, arguments);

                scrollLastFire = getTime();
            };

            // onScroll handler
            this.scroll = function() {
                var delay = 0,
                    self = this;

                if (getTime() - scrollLastFire < pause) {
                    clearTimeout(scrollPauseTimer);
                    delay = pause;
                }

                if (getTime() - scrollLastFire < pause) {
                    clearTimeout(scrollPauseTimer);
                    delay = pause;
                }

                if (delay) {
                    scrollPauseTimer = setTimeout(function() {
                        self.updatePositions();
                    }, delay);
                } else {
                    self.updatePositions();
                }

                if (self.scrollingCls) {
                    if (!scrollingTimer) {
                        this.$(this.scroller).addClass(this.scrollingCls);
                    }
                    clearTimeout(scrollingTimer);
                    scrollingTimer = setTimeout(function() {
                        self.$(self.scroller).removeClass(self.scrollingCls);
                        scrollingTimer = undefined;
                    }, 300);
                }

            };

            return this;
        },

        update: function(params) {
            fire.call(this, 'upd', params); // Update all plugins' params

            this.resize(1);
            this.updatePositions();

            return this;
        },

        // One instance
        dispose: function(params) {
            manageEvents(this, this.event, 'off');
            manageAttr(this.root, params.direction, 'off');
            this.$(this.scroller).css(this.origin.crossSize, '');
            this.barOn(true);
            fire.call(this, 'dispose');
            this._disposed = true;
        },

        on: function(eventName, func, arg) {
            var names = eventName.split(' ');

            for (var i = 0 ; i < names.length ; i++) {
                if (names[i] == 'init') {
                    func.call(this, arg);
                } else {
                    this.events[names[i]] = this.events[names[i]] || [];

                    this.events[names[i]].push(function(userArg) {
                        func.call(this, userArg || arg);
                    });
                }
            }
        }
    };

    baron.fn.constructor.prototype = baron.fn;
    item.prototype.constructor.prototype = item.prototype;

    // Use when you need "baron" global var for another purposes
    baron.noConflict = function() {
        window.baron = _baron; // Restoring original value of "baron" global var

        return baron;
    };

    baron.version = '0.7.10';

    if ($ && $.fn) { // Adding baron to jQuery as plugin
        $.fn.baron = baron;
    }

    window.baron = baron; // Use noConflict method if you need window.baron var for another purposes
    if (window['module'] && module.exports) {
        module.exports = baron.noConflict();
    }
})(window, window.$);

/* Fixable elements plugin for baron 0.6+ */
(function(window, undefined) {
    var fix = function(userParams) {
        var elements, viewPortSize,
            params = { // Default params
                outside: '',
                inside: '',
                before: '',
                after: '',
                past: '',
                future: '',
                radius: 0,
                minView: 0
            },
            topFixHeights = [], // inline style for element
            topRealHeights = [], // ? something related to negative margins for fixable elements
            headerTops = [], // offset positions when not fixed
            scroller = this.scroller,
            eventManager = this.event,
            $ = this.$,
            self = this;

        // i - number of fixing element, pos - fix-position in px, flag - 1: top, 2: bottom
        // Invocation only in case when fix-state changed
        function fixElement(i, pos, flag) {
            var ori = flag == 1 ? 'pos' : 'oppos';

            if (viewPortSize < (params.minView || 0)) { // No headers fixing when no enought space for viewport
                pos = undefined;
            }

            // Removing all fixing stuff - we can do this because fixElement triggers only when fixState really changed
            this.$(elements[i]).css(this.origin.pos, '').css(this.origin.oppos, '').removeClass(params.outside);

            // Fixing if needed
            if (pos !== undefined) {
                pos += 'px';
                this.$(elements[i]).css(this.origin[ori], pos).addClass(params.outside);
            }
        }

        function bubbleWheel(e) {
            try {
                i = document.createEvent('WheelEvent'); // i - for extra byte
                // evt.initWebKitWheelEvent(deltaX, deltaY, window, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey);
                i.initWebKitWheelEvent(e.originalEvent.wheelDeltaX, e.originalEvent.wheelDeltaY);
                scroller.dispatchEvent(i);
                e.preventDefault();
            } catch (e) {}
        }

        function init(_params) {
            var pos;

            for (var key in _params) {
                params[key] = _params[key];
            }

            elements = this.$(params.elements, this.scroller);

            if (elements) {
                viewPortSize = this.scroller[this.origin.client];
                for (var i = 0 ; i < elements.length ; i++) {
                    // Variable header heights
                    pos = {};
                    pos[this.origin.size] = elements[i][this.origin.offset];
                    if (elements[i].parentNode !== this.scroller) {
                        this.$(elements[i].parentNode).css(pos);
                    }
                    pos = {};
                    pos[this.origin.crossSize] = elements[i].parentNode[this.origin.crossClient];
                    this.$(elements[i]).css(pos);

                    // Between fixed headers
                    viewPortSize -= elements[i][this.origin.offset];

                    headerTops[i] = elements[i].parentNode[this.origin.offsetPos]; // No paddings for parentNode

                    // Summary elements height above current
                    topFixHeights[i] = (topFixHeights[i - 1] || 0); // Not zero because of negative margins
                    topRealHeights[i] = (topRealHeights[i - 1] || Math.min(headerTops[i], 0));

                    if (elements[i - 1]) {
                        topFixHeights[i] += elements[i - 1][this.origin.offset];
                        topRealHeights[i] += elements[i - 1][this.origin.offset];
                    }

                    if ( !(i == 0 && headerTops[i] == 0)/* && force */) {
                        this.event(elements[i], 'mousewheel', bubbleWheel, 'off');
                        this.event(elements[i], 'mousewheel', bubbleWheel);
                    }
                }

                if (params.limiter && elements[0]) { // Bottom edge of first header as top limit for track
                    if (this.track && this.track != this.scroller) {
                        pos = {};
                        pos[this.origin.pos] = elements[0].parentNode[this.origin.offset];
                        this.$(this.track).css(pos);
                    } else {
                        this.barTopLimit = elements[0].parentNode[this.origin.offset];
                    }
                    // this.barTopLimit = elements[0].parentNode[this.origin.offset];
                    this.scroll();
                }

                if (params.limiter === false) { // undefined (in second fix instance) should have no influence on bar limit
                    this.barTopLimit = 0;
                }
            }

            var event = {
                element: elements,

                handler: function() {
                    var parent = $(this)[0].parentNode,
                        top = parent.offsetTop,
                        num;

                    // finding num -> elements[num] === this
                    for (var i = 0 ; i < elements.length ; i++ ) {
                        if (elements[i] === this) num = i;
                    }

                    var pos = top - topFixHeights[num];

                    if (params.scroll) { // User defined callback
                        params.scroll({
                            x1: self.scroller.scrollTop,
                            x2: pos
                        });
                    } else {
                        self.scroller.scrollTop = pos;
                    }
                },

                type: 'click'
            };

            if (params.clickable) {
                this._eventHandlers.push(event); // For auto-dispose
                // eventManager(event.element, event.type, event.handler, 'off');
                eventManager(event.element, event.type, event.handler, 'on');
            }
        }

        this.on('init', init, userParams);

        var fixFlag = [], // 1 - past, 2 - future, 3 - current (not fixed)
            gradFlag = [];
        this.on('init scroll', function() {
            var fixState, hTop, gradState;

            if (elements) {
                var change;

                // fixFlag update
                for (var i = 0 ; i < elements.length ; i++) {
                    fixState = 0;
                    if (headerTops[i] - this.pos() < topRealHeights[i] + params.radius) {
                        // Header trying to go up
                        fixState = 1;
                        hTop = topFixHeights[i];
                    } else if (headerTops[i] - this.pos() > topRealHeights[i] + viewPortSize - params.radius) {
                        // Header trying to go down
                        fixState = 2;
                        // console.log('topFixHeights[i] + viewPortSize + topRealHeights[i]', topFixHeights[i], this.scroller[this.origin.client], topRealHeights[i]);
                        hTop = this.scroller[this.origin.client] - elements[i][this.origin.offset] - topFixHeights[i] - viewPortSize;
                        // console.log('hTop', hTop, viewPortSize, elements[this.origin.offset], topFixHeights[i]);
                        //(topFixHeights[i] + viewPortSize + elements[this.origin.offset]) - this.scroller[this.origin.client];
                    } else {
                        // Header in viewport
                        fixState = 3;
                        hTop = undefined;
                    }

                    gradState = false;
                    if (headerTops[i] - this.pos() < topRealHeights[i] || headerTops[i] - this.pos() > topRealHeights[i] + viewPortSize) {
                        gradState = true;
                    }

                    if (fixState != fixFlag[i] || gradState != gradFlag[i]) {
                        fixElement.call(this, i, hTop, fixState);
                        fixFlag[i] = fixState;
                        gradFlag[i] = gradState;
                        change = true;
                    }
                }

                // Adding positioning classes (on last top and first bottom header)
                if (change) { // At leats one change in elements flag structure occured
                    for (i = 0 ; i < elements.length ; i++) {
                        if (fixFlag[i] == 1 && params.past) {
                            this.$(elements[i]).addClass(params.past).removeClass(params.future);
                        }

                        if (fixFlag[i] == 2 && params.future) {
                            this.$(elements[i]).addClass(params.future).removeClass(params.past);
                        }

                        if (fixFlag[i] == 3) {
                            if (params.future || params.past) this.$(elements[i]).removeClass(params.past).removeClass(params.future);
                            if (params.inside) this.$(elements[i]).addClass(params.inside);
                        } else if (params.inside) {
                            this.$(elements[i]).removeClass(params.inside);
                        }

                        if (fixFlag[i] != fixFlag[i + 1] && fixFlag[i] == 1 && params.before) {
                            this.$(elements[i]).addClass(params.before).removeClass(params.after); // Last top fixed header
                        } else if (fixFlag[i] != fixFlag[i - 1] && fixFlag[i] == 2 && params.after) {
                            this.$(elements[i]).addClass(params.after).removeClass(params.before); // First bottom fixed header
                        } else {
                            this.$(elements[i]).removeClass(params.before).removeClass(params.after);
                        }

                        if (params.grad) {
                            if (gradFlag[i]) {
                                this.$(elements[i]).addClass(params.grad);
                            } else {
                                this.$(elements[i]).removeClass(params.grad);
                            }
                        }
                    }
                }
            }
        });

        this.on('resize upd', function(updParams) {
            init.call(this, updParams && updParams.fix);
        });
    };

    baron.fn.fix = function(params) {
        var i = 0;

        while (this[i]) {
            fix.call(this[i], params);
            i++;
        }

        return this;
    };
})(window);
/* Autoupdate plugin for baron 0.6+ */
(function(window) {
    var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver || null;

    var autoUpdate = function() {
        var self = this;
        var watcher;

        function actualizeWatcher() {
            if (!self.root[self.origin.offset]) {
                startWatch();
            } else {
                stopWatch();
            }
        }

        // Set interval timeout for watching when root node will be visible
        function startWatch() {
            if (watcher) return;

            watcher = setInterval(function() {
                if (self.root[self.origin.offset]) {
                    stopWatch();
                    self.update();
                }
            }, 300); // is it good enought for you?)
        }

        function stopWatch() {
            clearInterval(watcher);
            watcher = null;
        }

        var debouncedUpdater = self._debounce(function() {
            self.update();
        }, 300);

        this._observer = new MutationObserver(function() {
            actualizeWatcher();
            self.update();
            debouncedUpdater();
        });

        this.on('init', function() {
            self._observer.observe(self.root, {
                childList: true,
                subtree: true,
                characterData: true
                // attributes: true
                // No reasons to set attributes to true
                // The case when root/child node with already properly inited baron toggled to hidden and then back to visible,
                // and the size of parent was changed during that hidden state, is very rare
                // Other cases are covered by watcher, and you still can do .update by yourself
            });

            actualizeWatcher();
        });

        this.on('dispose', function() {
            self._observer.disconnect();
            stopWatch();
            delete self._observer;
        });
    };

    baron.fn.autoUpdate = function(params) {
        if (!MutationObserver) return this;

        var i = 0;

        while (this[i]) {
            autoUpdate.call(this[i], params);
            i++;
        }

        return this;
    };
})(window);

/* Controls plugin for baron 0.6+ */
(function(window, undefined) {
    var controls = function(params) {
        var forward, backward, track, screen,
            self = this, // AAAAAA!!!!!11
            event;

        screen = params.screen || 0.9;

        if (params.forward) {
            forward = this.$(params.forward, this.clipper);

            event = {
                element: forward,

                handler: function() {
                    var y = self.pos() - params.delta || 30;

                    self.pos(y);
                },

                type: 'click'
            };

            this._eventHandlers.push(event); // For auto-dispose
            this.event(event.element, event.type, event.handler, 'on');
        }

        if (params.backward) {
            backward = this.$(params.backward, this.clipper);

            event = {
                element: backward,

                handler: function() {
                    var y = self.pos() + params.delta || 30;

                    self.pos(y);
                },

                type: 'click'
            };

            this._eventHandlers.push(event); // For auto-dispose
            this.event(event.element, event.type, event.handler, 'on');
        }

        if (params.track) {
            if (params.track === true) {
                track = this.track;
            } else {
                track = this.$(params.track, this.clipper)[0];
            }

            if (track) {
                event = {
                    element: track,

                    handler: function(e) {
                        var x = e['offset' + self.origin.x],
                            xBar = self.bar[self.origin.offsetPos],
                            sign = 0;

                        if (x < xBar) {
                            sign = -1;
                        } else if (x > xBar + self.bar[self.origin.offset]) {
                            sign = 1;
                        }

                        var y = self.pos() + sign * screen * self.scroller[self.origin.client];
                        self.pos(y);
                    },

                    type: 'mousedown'
                };

                this._eventHandlers.push(event); // For auto-dispose
                this.event(event.element, event.type, event.handler, 'on');
            }
        }
    };

    baron.fn.controls = function(params) {
        var i = 0;

        while (this[i]) {
            controls.call(this[i], params);
            i++;
        }

        return this;
    };
})(window);
/* Pull to load plugin for baron 0.6+ */
(function(window, undefined) {
    var pull = function(params) {
        var block = this.$(params.block),
            size = params.size || this.origin.size,
            limit = params.limit || 80,
            onExpand = params.onExpand,
            elements = params.elements || [],
            inProgress = params.inProgress || '',
            self = this,
            _insistence = 0,
            _zeroXCount = 0,
            _interval,
            _timer,
            _x = 0,
            _onExpandCalled,
            _waiting = params.waiting || 500,
            _on;

        function getSize() {
            return self.scroller[self.origin.scroll] + self.scroller[self.origin.offset];
        }

        // Scroller content height
        function getContentSize() {
            return self.scroller[self.origin.scrollSize];
        }

        // Scroller height
        function getScrollerSize() {
            return self.scroller[self.origin.client];
        }

        function step(x, force) {
            var k = x * 0.0005;

            return Math.floor(force - k * (x + 550));
        }

        function toggle(on) {
            _on = on;

            if (on) {
                update(); // First time with no delay
                _interval = setInterval(update, 200);
            } else {
                clearInterval(_interval);
            }
        }

        function update() {
            var pos = {},
                height = getSize(),
                scrollHeight = getContentSize(),
                dx,
                op4,
                scrollInProgress = _insistence == 1;

            op4 = 0; // Возвращающая сила
            if (_insistence > 0) {
                op4 = 40;
            }
            //if (_insistence > -1) {
                dx = step(_x, op4);
                if (height >= scrollHeight - _x && _insistence > -1) {
                    if (scrollInProgress) {
                        _x += dx;
                    }
                } else {
                    _x = 0;
                }

                if (_x < 0) _x = 0;

                pos[size] = _x + 'px';
                if (getScrollerSize() <= getContentSize()) {
                    self.$(block).css(pos);
                    for (var i = 0 ; i < elements.length ; i++) {
                        self.$(elements[i].self).css(elements[i].property, Math.min(_x / limit * 100, 100) + '%');
                    }
                }

                if (inProgress && _x) {
                    self.$(self.root).addClass(inProgress);
                }

                if (_x == 0) {
                    if (params.onCollapse) {
                        params.onCollapse();
                    }
                }

                _insistence = 0;
                _timer = setTimeout(function() {
                    _insistence = -1;
                }, _waiting);
            //}

            if (onExpand && _x > limit && !_onExpandCalled) {
                onExpand();
                _onExpandCalled = true;
            }

            if (_x == 0) {
                _zeroXCount++;
            } else {
                _zeroXCount = 0;
            }
            if (_zeroXCount > 1) {
                toggle(false);
                _onExpandCalled = false;
                if (inProgress) {
                    self.$(self.root).removeClass(inProgress);
                }
            }
        }

        this.on('init', function() {
            toggle(true);
        });

        this.on('dispose', function() {
            toggle(false);
        });

        this.event(this.scroller, 'mousewheel DOMMouseScroll', function(e) {
            var down = e.wheelDelta < 0 || (e.originalEvent && e.originalEvent.wheelDelta < 0) || e.detail > 0;

            if (down) {
                _insistence = 1;
                clearTimeout(_timer);
                if (!_on && getSize() >= getContentSize()) {
                    toggle(true);
                }
            }
            //  else {
            //     toggle(false);
            // }
        });
    };

    baron.fn.pull = function(params) {
        var i = 0;

        while (this[i]) {
            pull.call(this[i], params);
            i++;
        }

        return this;
    };
})(window);
/* jshint ignore:start */
var COMPILED=!0,goog=goog||{};goog.global=this;goog.DEBUG=!0;goog.LOCALE="en";goog.provide=function(a){if(!COMPILED){if(goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');delete goog.implicitNamespaces_[a];for(var b=a;(b=b.substring(0,b.lastIndexOf(".")))&&!goog.getObjectByName(b);)goog.implicitNamespaces_[b]=!0}goog.exportPath_(a)};goog.setTestOnly=function(a){if(COMPILED&&!goog.DEBUG)throw a=a||"",Error("Importing test-only code into non-debug environment"+a?": "+a:".");};
COMPILED||(goog.isProvided_=function(a){return!goog.implicitNamespaces_[a]&&!!goog.getObjectByName(a)},goog.implicitNamespaces_={});goog.exportPath_=function(a,b,c){a=a.split(".");c=c||goog.global;!(a[0]in c)&&c.execScript&&c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());)!a.length&&goog.isDef(b)?c[d]=b:c=c[d]?c[d]:c[d]={}};goog.getObjectByName=function(a,b){for(var c=a.split("."),d=b||goog.global,e;e=c.shift();)if(goog.isDefAndNotNull(d[e]))d=d[e];else return null;return d};
goog.globalize=function(a,b){var c=b||goog.global,d;for(d in a)c[d]=a[d]};goog.addDependency=function(a,b,c){if(!COMPILED){for(var d,a=a.replace(/\\/g,"/"),e=goog.dependencies_,f=0;d=b[f];f++){e.nameToPath[d]=a;a in e.pathToNames||(e.pathToNames[a]={});e.pathToNames[a][d]=true}for(d=0;b=c[d];d++){a in e.requires||(e.requires[a]={});e.requires[a][b]=true}}};goog.ENABLE_DEBUG_LOADER=!0;
goog.require=function(a){if(!COMPILED&&!goog.isProvided_(a)){if(goog.ENABLE_DEBUG_LOADER){var b=goog.getPathFromDeps_(a);if(b){goog.included_[b]=true;goog.writeScripts_();return}}a="goog.require could not find: "+a;goog.global.console&&goog.global.console.error(a);throw Error(a);}};goog.basePath="";goog.nullFunction=function(){};goog.identityFunction=function(a){return a};goog.abstractMethod=function(){throw Error("unimplemented abstract method");};
goog.addSingletonGetter=function(a){a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a}};goog.instantiatedSingletons_=[];
!COMPILED&&goog.ENABLE_DEBUG_LOADER&&(goog.included_={},goog.dependencies_={pathToNames:{},nameToPath:{},requires:{},visited:{},written:{}},goog.inHtmlDocument_=function(){var a=goog.global.document;return typeof a!="undefined"&&"write"in a},goog.findBasePath_=function(){if(goog.global.CLOSURE_BASE_PATH)goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_())for(var a=goog.global.document.getElementsByTagName("script"),b=a.length-1;b>=0;--b){var c=a[b].src,d=c.lastIndexOf("?"),
d=d==-1?c.length:d;if(c.substr(d-7,7)=="base.js"){goog.basePath=c.substr(0,d-7);break}}},goog.importScript_=function(a){var b=goog.global.CLOSURE_IMPORT_SCRIPT||goog.writeScriptTag_;!goog.dependencies_.written[a]&&b(a)&&(goog.dependencies_.written[a]=true)},goog.writeScriptTag_=function(a){if(goog.inHtmlDocument_()){goog.global.document.write('<script type="text/javascript" src="'+a+'"><\/script>');return true}return false},goog.writeScripts_=function(){function a(e){if(!(e in d.written)){if(!(e in
d.visited)){d.visited[e]=true;if(e in d.requires)for(var g in d.requires[e])if(!goog.isProvided_(g))if(g in d.nameToPath)a(d.nameToPath[g]);else throw Error("Undefined nameToPath for "+g);}if(!(e in c)){c[e]=true;b.push(e)}}}var b=[],c={},d=goog.dependencies_,e;for(e in goog.included_)d.written[e]||a(e);for(e=0;e<b.length;e++)if(b[e])goog.importScript_(goog.basePath+b[e]);else throw Error("Undefined script input");},goog.getPathFromDeps_=function(a){return a in goog.dependencies_.nameToPath?goog.dependencies_.nameToPath[a]:
null},goog.findBasePath_(),goog.global.CLOSURE_NO_DEPS||goog.importScript_(goog.basePath+"deps.js"));
goog.typeOf=function(a){var b=typeof a;if(b=="object")if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(c=="[object Window]")return"object";if(c=="[object Array]"||typeof a.length=="number"&&typeof a.splice!="undefined"&&typeof a.propertyIsEnumerable!="undefined"&&!a.propertyIsEnumerable("splice"))return"array";if(c=="[object Function]"||typeof a.call!="undefined"&&typeof a.propertyIsEnumerable!="undefined"&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if(b=="function"&&typeof a.call=="undefined")return"object";return b};goog.isDef=function(a){return a!==void 0};goog.isNull=function(a){return a===null};goog.isDefAndNotNull=function(a){return a!=null};goog.isArray=function(a){return goog.typeOf(a)=="array"};goog.isArrayLike=function(a){var b=goog.typeOf(a);return b=="array"||b=="object"&&typeof a.length=="number"};goog.isDateLike=function(a){return goog.isObject(a)&&typeof a.getFullYear=="function"};
goog.isString=function(a){return typeof a=="string"};goog.isBoolean=function(a){return typeof a=="boolean"};goog.isNumber=function(a){return typeof a=="number"};goog.isFunction=function(a){return goog.typeOf(a)=="function"};goog.isObject=function(a){var b=typeof a;return b=="object"&&a!=null||b=="function"};goog.getUid=function(a){return a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.removeUid=function(a){"removeAttribute"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_]}catch(b){}};
goog.UID_PROPERTY_="closure_uid_"+Math.floor(2147483648*Math.random()).toString(36);goog.uidCounter_=0;goog.getHashCode=goog.getUid;goog.removeHashCode=goog.removeUid;goog.cloneObject=function(a){var b=goog.typeOf(a);if(b=="object"||b=="array"){if(a.clone)return a.clone();var b=b=="array"?[]:{},c;for(c in a)b[c]=goog.cloneObject(a[c]);return b}return a};goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};
goog.bindJs_=function(a,b,c){if(!a)throw Error();if(arguments.length>2){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}};goog.bind=function(a,b,c){goog.bind=Function.prototype.bind&&Function.prototype.bind.toString().indexOf("native code")!=-1?goog.bindNative_:goog.bindJs_;return goog.bind.apply(null,arguments)};
goog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=Array.prototype.slice.call(arguments);b.unshift.apply(b,c);return a.apply(this,b)}};goog.mixin=function(a,b){for(var c in b)a[c]=b[c]};goog.now=Date.now||function(){return+new Date};
goog.globalEval=function(a){if(goog.global.execScript)goog.global.execScript(a,"JavaScript");else if(goog.global.eval){if(goog.evalWorksForGlobals_==null){goog.global.eval("var _et_ = 1;");if(typeof goog.global._et_!="undefined"){delete goog.global._et_;goog.evalWorksForGlobals_=true}else goog.evalWorksForGlobals_=false}if(goog.evalWorksForGlobals_)goog.global.eval(a);else{var b=goog.global.document,c=b.createElement("script");c.type="text/javascript";c.defer=false;c.appendChild(b.createTextNode(a));
b.body.appendChild(c);b.body.removeChild(c)}}else throw Error("goog.globalEval not available");};goog.evalWorksForGlobals_=null;goog.getCssName=function(a,b){var c=function(a){return goog.cssNameMapping_[a]||a},d=function(a){for(var a=a.split("-"),b=[],d=0;d<a.length;d++)b.push(c(a[d]));return b.join("-")},d=goog.cssNameMapping_?goog.cssNameMappingStyle_=="BY_WHOLE"?c:d:function(a){return a};return b?a+"-"+d(b):d(a)};
goog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b};!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING);goog.getMsg=function(a,b){var c=b||{},d;for(d in c)var e=(""+c[d]).replace(/\$/g,"$$$$"),a=a.replace(RegExp("\\{\\$"+d+"\\}","gi"),e);return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,c)};goog.exportProperty=function(a,b,c){a[b]=c};
goog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a};
goog.base=function(a,b,c){var d=arguments.callee.caller;if(d.superClass_)return d.superClass_.constructor.apply(a,Array.prototype.slice.call(arguments,1));for(var e=Array.prototype.slice.call(arguments,2),f=false,g=a.constructor;g;g=g.superClass_&&g.superClass_.constructor)if(g.prototype[b]===d)f=true;else if(f)return g.prototype[b].apply(a,e);if(a[b]===d)return a.constructor.prototype[b].apply(a,e);throw Error("goog.base called from a method of one name to a method of a different name");};
goog.scope=function(a){a.call(goog.global)};var crow={util:{}};crow.util.MonkeyPatches={};Array.prototype.indexOf||(Array.prototype.indexOf=function(a,b){var c=this.length>>>0,d=Number(b)||0,d=0>d?Math.ceil(d):Math.floor(d);for(0>d&&(d+=c);d<c;d++)if(d in this&&this[d]===a)return d;return-1});Array.prototype.shuffle||(Array.prototype.shuffle=function(){for(var a=this.concat(),b,c,d=a.length;d;b=parseInt(Math.random()*d),c=a[--d],a[d]=a[b],a[b]=c);return a});crow.Logger={};
(function(){var a={error:1,warn:2,info:3,debug:4,off:-Infinity},b=goog.global.console?console:{},c=a.warn;crow.Logger=function(a){this.klass=a};crow.Logger.prototype.getLogLevel=function(){return"undefined"!==typeof this.klass.LOG_LEVEL?this.klass.LOG_LEVEL:c};crow.Logger.prototype.error=function(){var a=Array.prototype.slice.call(arguments,0);a[0]="Crow Error: "+a[0];b&&(b.error&&1<=this.getLogLevel())&&b.error.apply(b,a)};crow.Logger.prototype.warn=function(){var a=Array.prototype.slice.call(arguments,0);
a[0]="Crow Warning: "+a[0];b&&(b.warn&&2<=this.getLogLevel())&&b.warn.apply(b,a)};crow.Logger.prototype.info=function(){var a=Array.prototype.slice.call(arguments,0);a[0]="Crow Info: "+a[0];b&&(b.info&&3<=this.getLogLevel())&&b.info.apply(b,a)};crow.Logger.prototype.debug=function(){var a=Array.prototype.slice.call(arguments,0);a[0]="Crow Debug: "+a[0];b&&(b.debug&&4<=this.getLogLevel())&&b.debug.apply(b,a)};crow.Logger.prototype.setLevel=function(a){return crow.Logger.setLevel(a,this.klass)};crow.Logger.setLevel=
function(b,e){var f=a[b.toLowerCase()];if("number"!==typeof f)throw Error("Invalid log level: "+b);e?e.LOG_LEVEL=f:c=f};crow.Logger.setAppender=function(a){b=a}})();crow.util.Assert={};crow.assert=function(a,b){if(!a)throw Error(b);};crow.assert.InvalidArgumentType=function(a){return"Invalid argument type, expected "+a};crow.assert.IncorrectArgumentCount=function(a,b){return"Incorrect argument count, got "+a+" but expected "+b};crow.assert.IndexOutBounds=function(a){return"Index out of bounds (<0 or >length), was "+a};crow.assert.AbstractMethod=function(a){return"Method "+a+" is abstract; must be overridden"};
crow.assert.IllegalMethodCall=function(a,b){return"Method `"+a+"` cannot be called here: "+b};crow.structs={};crow.structs.BucketPriorityQueue=function(a){this.arr=[];this.length=0;this.key_comparator=a?a:crow.structs.BucketPriorityQueue.DEFAULT_KEY_COMPARATOR};crow.structs.BucketPriorityQueue.DEFAULT_KEY_COMPARATOR=function(a,b){return a<b?-1:a>b?1:0};crow.structs.BucketPriorityQueue.REVERSE_KEY_COMPARATOR=function(a,b){return b<a?-1:b>a?1:0};crow.structs.BucketPriorityQueue.prototype.enqueue=function(a,b){this.findBucket(a,!0).push(b);this.length++};
crow.structs.BucketPriorityQueue.prototype.dequeue=function(){var a;if(this.length){var b=this.arr[0];a=b.shift();b.length||this.arr.shift();this.length--}return a};crow.structs.BucketPriorityQueue.prototype.contains=function(a,b){if(b)throw Error("not implemented yet");for(var c=0;c<this.arr.length;c++)for(var d=this.arr[c],e=0;e<d.length;e++)if(d[e]==a)return!0;return!1};
crow.structs.BucketPriorityQueue.prototype.getPriority=function(a){for(var b=0;b<this.arr.length;b++)for(var c=this.arr[b],d=0;d<c.length;d++)if(c[d]==a)return c.key;return null};crow.structs.BucketPriorityQueue.prototype.remove=function(a,b){if(b)throw Error("not implemented yet");for(var c=0;c<this.arr.length;c++)for(var d=this.arr[c],e=0;e<d.length;e++){var f=d[e];if(f==a)return d.splice(e,1),d.length||this.arr.splice(c,1),this.length--,f}};crow.structs.BucketPriorityQueue.prototype.peek=function(){if(this.length)return this.arr[0][0]};
crow.structs.BucketPriorityQueue.prototype.peekKey=function(){if(this.length)return this.arr[0].key};crow.structs.BucketPriorityQueue.prototype.each=function(a){for(var b=0;b<this.arr.length;b++){var c=this.arr[b];if(c)for(var d=0;d<c.length;d++)a(c[d],b)}};
crow.structs.BucketPriorityQueue.prototype.findBucket=function(a,b){for(var c,d=this.key_comparator,e=0,f=this.arr.length-1,g,h;e<=f;){g=e+Math.floor((f-e)/2);var i=this.arr[g];h=d(i.key,a);if(0>h)e=g+1;else if(0<h)f=g-1;else{c=i;break}}if(!c&&b){c=[];c.key=a;for(e=!1;g<this.arr.length&&!e;g++)0<d(this.arr[g].key,a)&&(this.arr.splice(g,0,c),e=!0);e||this.arr.push(c)}return c};crow.Algorithm=function(){};crow.Algorithm.wrapperNodeGetterTemplate=function(a){return function(b){if(b instanceof a)return b;var c=this.wrapperNode.get(b);if(c)return c;c=new a(b);c.algorithm=this;this.wrapperNode.set(b,c);return c}};crow.Algorithm.prototype._invalidatePoint=function(a,b){for(var c=b.x,d=b.y,e=0;e<a.nodes.length;e++){var f=a.nodes[e];if(f.x==c&&f.y==d){a.nodes=a.nodes.slice(0,1);a.end=null;a.found=!1;break}}};
crow.Algorithm.prototype._invalidateRegion=function(a,b){for(var c=b.x,d=b.y,e=c+b.dx,f=d+b.dy,g=0;g<a.nodes.length;g++){var h=a.nodes[g],i=h.x,h=h.y;if(i>=c&&h>=d&&i<e&&h<f){a.nodes=a.nodes.slice(0,1);a.end=null;a.found=!1;break}}};crow.Algorithm.prototype.continueCalculating=function(a,b){var c=a.nodes[a.nodes.length-1];c||(c=a.start);var d={};b&&(d.limit=b);a.actor&&(d.actor=a.actor);c=this.findPath(c,a.goal,d);a.nodes=a.nodes.concat(c.nodes.slice(1));a.found=c.found;return a.found};
crow.Algorithm.NodeMap=function(a){var b={};this.get=function(c){c=b[c.id];return"undefined"!==typeof c?c:a};this.set=function(a,d){b[a.id]=d}};crow.Algorithm.PriorityQueue=function(){throw Error("A PriorityQueue class is required, but none found!");};crow.Algorithm.initializeDataStructures=function(){crow.Algorithm.PriorityQueue=crow.structs.BucketPriorityQueue;crow.Algorithm.initializeDataStructures=function(){}};goog.disposable={};goog.disposable.IDisposable=function(){};goog.Disposable=function(){goog.Disposable.ENABLE_MONITORING&&(this.creationStack=Error().stack,goog.Disposable.instances_[goog.getUid(this)]=this)};goog.Disposable.ENABLE_MONITORING=!1;goog.Disposable.instances_={};goog.Disposable.getUndisposedObjects=function(){var a=[],b;for(b in goog.Disposable.instances_)goog.Disposable.instances_.hasOwnProperty(b)&&a.push(goog.Disposable.instances_[Number(b)]);return a};goog.Disposable.clearUndisposedObjects=function(){goog.Disposable.instances_={}};
goog.Disposable.prototype.disposed_=!1;goog.Disposable.prototype.isDisposed=function(){return this.disposed_};goog.Disposable.prototype.getDisposed=goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose=function(){if(!this.disposed_&&(this.disposed_=!0,this.disposeInternal(),goog.Disposable.ENABLE_MONITORING)){var a=goog.getUid(this);if(!goog.Disposable.instances_.hasOwnProperty(a))throw Error(this+" did not call the goog.Disposable base constructor or was disposed of after a clearUndisposedObjects call");delete goog.Disposable.instances_[a]}};goog.Disposable.prototype.registerDisposable=function(a){this.dependentDisposables_||(this.dependentDisposables_=[]);this.dependentDisposables_.push(a)};
goog.Disposable.prototype.addOnDisposeCallback=function(a,b){this.onDisposeCallbacks_||(this.onDisposeCallbacks_=[]);this.onDisposeCallbacks_.push(goog.bind(a,b))};goog.Disposable.prototype.disposeInternal=function(){this.dependentDisposables_&&goog.disposeAll.apply(null,this.dependentDisposables_);if(this.onDisposeCallbacks_)for(;this.onDisposeCallbacks_.length;)this.onDisposeCallbacks_.shift()()};goog.dispose=function(a){a&&"function"==typeof a.dispose&&a.dispose()};
goog.disposeAll=function(a){for(var b=0,c=arguments.length;b<c;++b){var d=arguments[b];goog.isArrayLike(d)?goog.disposeAll.apply(null,d):goog.dispose(d)}};goog.debug={};goog.debug.Error=function(a){Error.captureStackTrace?Error.captureStackTrace(this,goog.debug.Error):this.stack=Error().stack||"";a&&(this.message=String(a))};goog.inherits(goog.debug.Error,Error);goog.debug.Error.prototype.name="CustomError";goog.string={};goog.string.Unicode={NBSP:"\u00a0"};goog.string.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};goog.string.endsWith=function(a,b){var c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};goog.string.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.caseInsensitiveCompare(b,a.substr(0,b.length))};goog.string.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.caseInsensitiveCompare(b,a.substr(a.length-b.length,b.length))};
goog.string.subs=function(a,b){for(var c=1;c<arguments.length;c++)var d=String(arguments[c]).replace(/\$/g,"$$$$"),a=a.replace(/\%s/,d);return a};goog.string.collapseWhitespace=function(a){return a.replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"")};goog.string.isEmpty=function(a){return/^[\s\xa0]*$/.test(a)};goog.string.isEmptySafe=function(a){return goog.string.isEmpty(goog.string.makeSafe(a))};goog.string.isBreakingWhitespace=function(a){return!/[^\t\n\r ]/.test(a)};goog.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};
goog.string.isNumeric=function(a){return!/[^0-9]/.test(a)};goog.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};goog.string.isSpace=function(a){return" "==a};goog.string.isUnicodeChar=function(a){return 1==a.length&&" "<=a&&"~">=a||"\u0080"<=a&&"\ufffd">=a};goog.string.stripNewlines=function(a){return a.replace(/(\r\n|\r|\n)+/g," ")};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\r\n|\r|\n)/g,"\n")};
goog.string.normalizeWhitespace=function(a){return a.replace(/\xa0|\s/g," ")};goog.string.normalizeSpaces=function(a){return a.replace(/\xa0|[ \t]+/g," ")};goog.string.collapseBreakingSpaces=function(a){return a.replace(/[\t\r\n ]+/g," ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g,"")};goog.string.trim=function(a){return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")};goog.string.trimLeft=function(a){return a.replace(/^[\s\xa0]+/,"")};goog.string.trimRight=function(a){return a.replace(/[\s\xa0]+$/,"")};
goog.string.caseInsensitiveCompare=function(a,b){var c=String(a).toLowerCase(),d=String(b).toLowerCase();return c<d?-1:c==d?0:1};goog.string.numerateCompareRegExp_=/(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare=function(a,b){if(a==b)return 0;if(!a)return-1;if(!b)return 1;for(var c=a.toLowerCase().match(goog.string.numerateCompareRegExp_),d=b.toLowerCase().match(goog.string.numerateCompareRegExp_),e=Math.min(c.length,d.length),f=0;f<e;f++){var g=c[f],h=d[f];if(g!=h)return c=parseInt(g,10),!isNaN(c)&&(d=parseInt(h,10),!isNaN(d)&&c-d)?c-d:g<h?-1:1}return c.length!=d.length?c.length-d.length:a<b?-1:1};goog.string.urlEncode=function(a){return encodeURIComponent(String(a))};
goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\+/g," "))};goog.string.newLineToBr=function(a,b){return a.replace(/(\r\n|\r|\n)/g,b?"<br />":"<br>")};
goog.string.htmlEscape=function(a,b){if(b)return a.replace(goog.string.amperRe_,"&amp;").replace(goog.string.ltRe_,"&lt;").replace(goog.string.gtRe_,"&gt;").replace(goog.string.quotRe_,"&quot;");if(!goog.string.allRe_.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(goog.string.amperRe_,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(goog.string.ltRe_,"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(goog.string.gtRe_,"&gt;"));-1!=a.indexOf('"')&&(a=a.replace(goog.string.quotRe_,"&quot;"));return a};
goog.string.amperRe_=/&/g;goog.string.ltRe_=/</g;goog.string.gtRe_=/>/g;goog.string.quotRe_=/\"/g;goog.string.allRe_=/[&<>\"]/;goog.string.unescapeEntities=function(a){return goog.string.contains(a,"&")?"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a};
goog.string.unescapeEntitiesUsingDom_=function(a){var b={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"'},c=document.createElement("div");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(a,e){var f=b[a];if(f)return f;if("#"==e.charAt(0)){var g=Number("0"+e.substr(1));isNaN(g)||(f=String.fromCharCode(g))}f||(c.innerHTML=a+" ",f=c.firstChild.nodeValue.slice(0,-1));return b[a]=f})};
goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(a,c){switch(c){case "amp":return"&";case "lt":return"<";case "gt":return">";case "quot":return'"';default:if("#"==c.charAt(0)){var d=Number("0"+c.substr(1));if(!isNaN(d))return String.fromCharCode(d)}return a}})};goog.string.HTML_ENTITY_PATTERN_=/&([^;\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g," &#160;"),b)};
goog.string.stripQuotes=function(a,b){for(var c=b.length,d=0;d<c;d++){var e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1)}return a};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+"...");c&&(a=goog.string.htmlEscape(a));return a};
goog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d,a=a.substring(0,b-d)+"..."+a.substring(e)}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+"..."+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a};goog.string.specialEscapeChars_={"\x00":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\x0B",'"':'\\"',"\\":"\\\\"};goog.string.jsEscapeCache_={"'":"\\'"};
goog.string.quote=function(a){a=String(a);if(a.quote)return a.quote();for(var b=['"'],c=0;c<a.length;c++){var d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d))}b.push('"');return b.join("")};goog.string.escapeString=function(a){for(var b=[],c=0;c<a.length;c++)b[c]=goog.string.escapeChar(a.charAt(c));return b.join("")};
goog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];var b=a,c=a.charCodeAt(0);if(31<c&&127>c)b=a;else{if(256>c){if(b="\\x",16>c||256<c)b+="0"}else b="\\u",4096>c&&(b+="0");b+=c.toString(16).toUpperCase()}return goog.string.jsEscapeCache_[a]=b};goog.string.toMap=function(a){for(var b={},c=0;c<a.length;c++)b[a.charAt(c)]=!0;return b};
goog.string.contains=function(a,b){return-1!=a.indexOf(b)};goog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};goog.string.removeAt=function(a,b,c){var d=a;0<=b&&(b<a.length&&0<c)&&(d=a.substr(0,b)+a.substr(b+c,a.length-b-c));return d};goog.string.remove=function(a,b){var c=RegExp(goog.string.regExpEscape(b),"");return a.replace(c,"")};goog.string.removeAll=function(a,b){var c=RegExp(goog.string.regExpEscape(b),"g");return a.replace(c,"")};
goog.string.regExpEscape=function(a){return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")};goog.string.repeat=function(a,b){return Array(b+1).join(a)};goog.string.padNumber=function(a,b,c){a=goog.isDef(c)?a.toFixed(c):String(a);c=a.indexOf(".");-1==c&&(c=a.length);return goog.string.repeat("0",Math.max(0,b-c))+a};goog.string.makeSafe=function(a){return null==a?"":String(a)};goog.string.buildString=function(a){return Array.prototype.join.call(arguments,"")};
goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)};
goog.string.compareVersions=function(a,b){for(var c=0,d=goog.string.trim(String(a)).split("."),e=goog.string.trim(String(b)).split("."),f=Math.max(d.length,e.length),g=0;0==c&&g<f;g++){var h=d[g]||"",i=e[g]||"",j=RegExp("(\\d*)(\\D*)","g"),k=RegExp("(\\d*)(\\D*)","g");do{var m=j.exec(h)||["","",""],l=k.exec(i)||["","",""];if(0==m[0].length&&0==l[0].length)break;var c=0==m[1].length?0:parseInt(m[1],10),n=0==l[1].length?0:parseInt(l[1],10),c=goog.string.compareElements_(c,n)||goog.string.compareElements_(0==
m[2].length,0==l[2].length)||goog.string.compareElements_(m[2],l[2])}while(0==c)}return c};goog.string.compareElements_=function(a,b){return a<b?-1:a>b?1:0};goog.string.HASHCODE_MAX_=4294967296;goog.string.hashCode=function(a){for(var b=0,c=0;c<a.length;++c)b=31*b+a.charCodeAt(c),b%=goog.string.HASHCODE_MAX_;return b};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;goog.string.createUniqueString=function(){return"goog_"+goog.string.uniqueStringCounter_++};
goog.string.toNumber=function(a){var b=Number(a);return 0==b&&goog.string.isEmpty(a)?NaN:b};goog.string.toCamelCase=function(a){return String(a).replace(/\-([a-z])/g,function(a,c){return c.toUpperCase()})};goog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,"-$1").toLowerCase()};goog.string.toTitleCase=function(a,b){var c=goog.isString(b)?goog.string.regExpEscape(b):"\\s";return a.replace(RegExp("(^"+(c?"|["+c+"]+":"")+")([a-z])","g"),function(a,b,c){return b+c.toUpperCase()})};
goog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return goog.isString(a)?/^\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;goog.asserts.AssertionError=function(a,b){b.unshift(a);goog.debug.Error.call(this,goog.string.subs.apply(null,b));b.shift();this.messagePattern=a};goog.inherits(goog.asserts.AssertionError,goog.debug.Error);goog.asserts.AssertionError.prototype.name="AssertionError";goog.asserts.doAssertFailure_=function(a,b,c,d){var e="Assertion failed";if(c)var e=e+(": "+c),f=d;else a&&(e+=": "+a,f=b);throw new goog.asserts.AssertionError(""+e,f||[]);};
goog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&goog.asserts.doAssertFailure_("",null,b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.fail=function(a,b){if(goog.asserts.ENABLE_ASSERTS)throw new goog.asserts.AssertionError("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));};
goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isNumber(a)&&goog.asserts.doAssertFailure_("Expected number but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isString(a)&&goog.asserts.doAssertFailure_("Expected string but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isFunction(a)&&goog.asserts.doAssertFailure_("Expected function but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&goog.asserts.doAssertFailure_("Expected object but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isArray(a)&&goog.asserts.doAssertFailure_("Expected array but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isBoolean(a)&&goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertInstanceof=function(a,b,c,d){goog.asserts.ENABLE_ASSERTS&&!(a instanceof b)&&goog.asserts.doAssertFailure_("instanceof check failed.",null,c,Array.prototype.slice.call(arguments,3));return a};goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=!0;goog.array.peek=function(a){return a[a.length-1]};goog.array.ARRAY_PROTOTYPE_=Array.prototype;
goog.array.indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&goog.array.ARRAY_PROTOTYPE_.indexOf?function(a,b,c){goog.asserts.assert(null!=a.length);return goog.array.ARRAY_PROTOTYPE_.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(goog.isString(a))return!goog.isString(b)||1!=b.length?-1:a.indexOf(b,c);for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};
goog.array.lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&goog.array.ARRAY_PROTOTYPE_.lastIndexOf?function(a,b,c){goog.asserts.assert(null!=a.length);return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(a,b,null==c?a.length-1:c)}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if(goog.isString(a))return!goog.isString(b)||1!=b.length?-1:a.lastIndexOf(b,c);for(;0<=c;c--)if(c in a&&a[c]===b)return c;return-1};
goog.array.forEach=goog.NATIVE_ARRAY_PROTOTYPES&&goog.array.ARRAY_PROTOTYPE_.forEach?function(a,b,c){goog.asserts.assert(null!=a.length);goog.array.ARRAY_PROTOTYPE_.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};goog.array.forEachRight=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,d=d-1;0<=d;--d)d in e&&b.call(c,e[d],d,a)};
goog.array.filter=goog.NATIVE_ARRAY_PROTOTYPES&&goog.array.ARRAY_PROTOTYPE_.filter?function(a,b,c){goog.asserts.assert(null!=a.length);return goog.array.ARRAY_PROTOTYPE_.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,g=goog.isString(a)?a.split(""):a,h=0;h<d;h++)if(h in g){var i=g[h];b.call(c,i,h,a)&&(e[f++]=i)}return e};
goog.array.map=goog.NATIVE_ARRAY_PROTOTYPES&&goog.array.ARRAY_PROTOTYPE_.map?function(a,b,c){goog.asserts.assert(null!=a.length);return goog.array.ARRAY_PROTOTYPE_.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=goog.isString(a)?a.split(""):a,g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e};goog.array.reduce=function(a,b,c,d){if(a.reduce)return d?a.reduce(goog.bind(b,d),c):a.reduce(b,c);var e=c;goog.array.forEach(a,function(c,g){e=b.call(d,e,c,g,a)});return e};
goog.array.reduceRight=function(a,b,c,d){if(a.reduceRight)return d?a.reduceRight(goog.bind(b,d),c):a.reduceRight(b,c);var e=c;goog.array.forEachRight(a,function(c,g){e=b.call(d,e,c,g,a)});return e};
goog.array.some=goog.NATIVE_ARRAY_PROTOTYPES&&goog.array.ARRAY_PROTOTYPE_.some?function(a,b,c){goog.asserts.assert(null!=a.length);return goog.array.ARRAY_PROTOTYPE_.some.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};
goog.array.every=goog.NATIVE_ARRAY_PROTOTYPES&&goog.array.ARRAY_PROTOTYPE_.every?function(a,b,c){goog.asserts.assert(null!=a.length);return goog.array.ARRAY_PROTOTYPE_.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};goog.array.find=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};
goog.array.findIndex=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1};goog.array.findRight=function(a,b,c){b=goog.array.findIndexRight(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};goog.array.findIndexRight=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,d=d-1;0<=d;d--)if(d in e&&b.call(c,e[d],d,a))return d;return-1};goog.array.contains=function(a,b){return 0<=goog.array.indexOf(a,b)};
goog.array.isEmpty=function(a){return 0==a.length};goog.array.clear=function(a){if(!goog.isArray(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0};goog.array.insert=function(a,b){goog.array.contains(a,b)||a.push(b)};goog.array.insertAt=function(a,b,c){goog.array.splice(a,c,0,b)};goog.array.insertArrayAt=function(a,b,c){goog.partial(goog.array.splice,a,c,0).apply(null,b)};
goog.array.insertBefore=function(a,b,c){var d;2==arguments.length||0>(d=goog.array.indexOf(a,c))?a.push(b):goog.array.insertAt(a,b,d)};goog.array.remove=function(a,b){var c=goog.array.indexOf(a,b),d;(d=0<=c)&&goog.array.removeAt(a,c);return d};goog.array.removeAt=function(a,b){goog.asserts.assert(null!=a.length);return 1==goog.array.ARRAY_PROTOTYPE_.splice.call(a,b,1).length};goog.array.removeIf=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0<=b?(goog.array.removeAt(a,b),!0):!1};
goog.array.concat=function(a){return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_,arguments)};goog.array.toArray=function(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};goog.array.clone=goog.array.toArray;
goog.array.extend=function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c],e;if(goog.isArray(d)||(e=goog.isArrayLike(d))&&d.hasOwnProperty("callee"))a.push.apply(a,d);else if(e)for(var f=a.length,g=d.length,h=0;h<g;h++)a[f+h]=d[h];else a.push(d)}};goog.array.splice=function(a,b,c,d){goog.asserts.assert(null!=a.length);return goog.array.ARRAY_PROTOTYPE_.splice.apply(a,goog.array.slice(arguments,1))};
goog.array.slice=function(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?goog.array.ARRAY_PROTOTYPE_.slice.call(a,b):goog.array.ARRAY_PROTOTYPE_.slice.call(a,b,c)};goog.array.removeDuplicates=function(a,b){for(var c=b||a,d={},e=0,f=0;f<a.length;){var g=a[f++],h=goog.isObject(g)?"o"+goog.getUid(g):(typeof g).charAt(0)+g;Object.prototype.hasOwnProperty.call(d,h)||(d[h]=!0,c[e++]=g)}c.length=e};
goog.array.binarySearch=function(a,b,c){return goog.array.binarySearch_(a,c||goog.array.defaultCompare,!1,b)};goog.array.binarySelect=function(a,b,c){return goog.array.binarySearch_(a,b,!0,void 0,c)};goog.array.binarySearch_=function(a,b,c,d,e){for(var f=0,g=a.length,h;f<g;){var i=f+g>>1,j;j=c?b.call(e,a[i],i,a):b(d,a[i]);0<j?f=i+1:(g=i,h=!j)}return h?f:~f};goog.array.sort=function(a,b){goog.asserts.assert(null!=a.length);goog.array.ARRAY_PROTOTYPE_.sort.call(a,b||goog.array.defaultCompare)};
goog.array.stableSort=function(a,b){for(var c=0;c<a.length;c++)a[c]={index:c,value:a[c]};var d=b||goog.array.defaultCompare;goog.array.sort(a,function(a,b){return d(a.value,b.value)||a.index-b.index});for(c=0;c<a.length;c++)a[c]=a[c].value};goog.array.sortObjectsByKey=function(a,b,c){var d=c||goog.array.defaultCompare;goog.array.sort(a,function(a,c){return d(a[b],c[b])})};
goog.array.isSorted=function(a,b,c){for(var b=b||goog.array.defaultCompare,d=1;d<a.length;d++){var e=b(a[d-1],a[d]);if(0<e||0==e&&c)return!1}return!0};goog.array.equals=function(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return!1;for(var d=a.length,c=c||goog.array.defaultCompareEquality,e=0;e<d;e++)if(!c(a[e],b[e]))return!1;return!0};goog.array.compare=function(a,b,c){return goog.array.equals(a,b,c)};
goog.array.compare3=function(a,b,c){for(var c=c||goog.array.defaultCompare,d=Math.min(a.length,b.length),e=0;e<d;e++){var f=c(a[e],b[e]);if(0!=f)return f}return goog.array.defaultCompare(a.length,b.length)};goog.array.defaultCompare=function(a,b){return a>b?1:a<b?-1:0};goog.array.defaultCompareEquality=function(a,b){return a===b};goog.array.binaryInsert=function(a,b,c){c=goog.array.binarySearch(a,b,c);return 0>c?(goog.array.insertAt(a,b,-(c+1)),!0):!1};
goog.array.binaryRemove=function(a,b,c){b=goog.array.binarySearch(a,b,c);return 0<=b?goog.array.removeAt(a,b):!1};goog.array.bucket=function(a,b){for(var c={},d=0;d<a.length;d++){var e=a[d],f=b(e,d,a);goog.isDef(f)&&(c[f]||(c[f]=[])).push(e)}return c};goog.array.repeat=function(a,b){for(var c=[],d=0;d<b;d++)c[d]=a;return c};goog.array.flatten=function(a){for(var b=[],c=0;c<arguments.length;c++){var d=arguments[c];goog.isArray(d)?b.push.apply(b,goog.array.flatten.apply(null,d)):b.push(d)}return b};
goog.array.rotate=function(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?goog.array.ARRAY_PROTOTYPE_.unshift.apply(a,a.splice(-b,b)):0>b&&goog.array.ARRAY_PROTOTYPE_.push.apply(a,a.splice(0,-b)));return a};goog.array.zip=function(a){if(!arguments.length)return[];for(var b=[],c=0;;c++){for(var d=[],e=0;e<arguments.length;e++){var f=arguments[e];if(c>=f.length)return b;d.push(f[c])}b.push(d)}};
goog.array.shuffle=function(a,b){for(var c=b||Math.random,d=a.length-1;0<d;d--){var e=Math.floor(c()*(d+1)),f=a[d];a[d]=a[e];a[e]=f}};goog.debug.entryPointRegistry={};goog.debug.EntryPointMonitor=function(){};goog.debug.entryPointRegistry.refList_=[];goog.debug.entryPointRegistry.monitors_=[];goog.debug.entryPointRegistry.monitorsMayExist_=!1;goog.debug.entryPointRegistry.register=function(a){goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length]=a;if(goog.debug.entryPointRegistry.monitorsMayExist_)for(var b=goog.debug.entryPointRegistry.monitors_,c=0;c<b.length;c++)a(goog.bind(b[c].wrap,b[c]))};
goog.debug.entryPointRegistry.monitorAll=function(a){goog.debug.entryPointRegistry.monitorsMayExist_=!0;for(var b=goog.bind(a.wrap,a),c=0;c<goog.debug.entryPointRegistry.refList_.length;c++)goog.debug.entryPointRegistry.refList_[c](b);goog.debug.entryPointRegistry.monitors_.push(a)};
goog.debug.entryPointRegistry.unmonitorAllIfPossible=function(a){var b=goog.debug.entryPointRegistry.monitors_;goog.asserts.assert(a==b[b.length-1],"Only the most recent monitor can be unwrapped.");for(var a=goog.bind(a.unwrap,a),c=0;c<goog.debug.entryPointRegistry.refList_.length;c++)goog.debug.entryPointRegistry.refList_[c](a);b.length--};goog.debug.errorHandlerWeakDep={protectEntryPoint:function(a){return a}};goog.userAgent={};goog.userAgent.ASSUME_IE=!1;goog.userAgent.ASSUME_GECKO=!1;goog.userAgent.ASSUME_WEBKIT=!1;goog.userAgent.ASSUME_MOBILE_WEBKIT=!1;goog.userAgent.ASSUME_OPERA=!1;goog.userAgent.ASSUME_ANY_VERSION=!1;goog.userAgent.BROWSER_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_GECKO||goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString=function(){return goog.global.navigator?goog.global.navigator.userAgent:null};goog.userAgent.getNavigator=function(){return goog.global.navigator};
goog.userAgent.init_=function(){goog.userAgent.detectedOpera_=!1;goog.userAgent.detectedIe_=!1;goog.userAgent.detectedWebkit_=!1;goog.userAgent.detectedMobile_=!1;goog.userAgent.detectedGecko_=!1;var a;if(!goog.userAgent.BROWSER_KNOWN_&&(a=goog.userAgent.getUserAgentString())){var b=goog.userAgent.getNavigator();goog.userAgent.detectedOpera_=0==a.indexOf("Opera");goog.userAgent.detectedIe_=!goog.userAgent.detectedOpera_&&-1!=a.indexOf("MSIE");goog.userAgent.detectedWebkit_=!goog.userAgent.detectedOpera_&&
-1!=a.indexOf("WebKit");goog.userAgent.detectedMobile_=goog.userAgent.detectedWebkit_&&-1!=a.indexOf("Mobile");goog.userAgent.detectedGecko_=!goog.userAgent.detectedOpera_&&!goog.userAgent.detectedWebkit_&&"Gecko"==b.product}};goog.userAgent.BROWSER_KNOWN_||goog.userAgent.init_();goog.userAgent.OPERA=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_OPERA:goog.userAgent.detectedOpera_;goog.userAgent.IE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_IE:goog.userAgent.detectedIe_;
goog.userAgent.GECKO=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_GECKO:goog.userAgent.detectedGecko_;goog.userAgent.WEBKIT=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_MOBILE_WEBKIT:goog.userAgent.detectedWebkit_;goog.userAgent.MOBILE=goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.detectedMobile_;goog.userAgent.SAFARI=goog.userAgent.WEBKIT;goog.userAgent.determinePlatform_=function(){var a=goog.userAgent.getNavigator();return a&&a.platform||""};
goog.userAgent.PLATFORM=goog.userAgent.determinePlatform_();goog.userAgent.ASSUME_MAC=!1;goog.userAgent.ASSUME_WINDOWS=!1;goog.userAgent.ASSUME_LINUX=!1;goog.userAgent.ASSUME_X11=!1;goog.userAgent.PLATFORM_KNOWN_=goog.userAgent.ASSUME_MAC||goog.userAgent.ASSUME_WINDOWS||goog.userAgent.ASSUME_LINUX||goog.userAgent.ASSUME_X11;
goog.userAgent.initPlatform_=function(){goog.userAgent.detectedMac_=goog.string.contains(goog.userAgent.PLATFORM,"Mac");goog.userAgent.detectedWindows_=goog.string.contains(goog.userAgent.PLATFORM,"Win");goog.userAgent.detectedLinux_=goog.string.contains(goog.userAgent.PLATFORM,"Linux");goog.userAgent.detectedX11_=!!goog.userAgent.getNavigator()&&goog.string.contains(goog.userAgent.getNavigator().appVersion||"","X11")};goog.userAgent.PLATFORM_KNOWN_||goog.userAgent.initPlatform_();
goog.userAgent.MAC=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_MAC:goog.userAgent.detectedMac_;goog.userAgent.WINDOWS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_WINDOWS:goog.userAgent.detectedWindows_;goog.userAgent.LINUX=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_LINUX:goog.userAgent.detectedLinux_;goog.userAgent.X11=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_X11:goog.userAgent.detectedX11_;
goog.userAgent.determineVersion_=function(){var a="",b;goog.userAgent.OPERA&&goog.global.opera?(a=goog.global.opera.version,a="function"==typeof a?a():a):(goog.userAgent.GECKO?b=/rv\:([^\);]+)(\)|;)/:goog.userAgent.IE?b=/MSIE\s+([^\);]+)(\)|;)/:goog.userAgent.WEBKIT&&(b=/WebKit\/(\S+)/),b&&(a=(a=b.exec(goog.userAgent.getUserAgentString()))?a[1]:""));return goog.userAgent.IE&&(b=goog.userAgent.getDocumentMode_(),b>parseFloat(a))?String(b):a};
goog.userAgent.getDocumentMode_=function(){var a=goog.global.document;return a?a.documentMode:void 0};goog.userAgent.VERSION=goog.userAgent.determineVersion_();goog.userAgent.compare=function(a,b){return goog.string.compareVersions(a,b)};goog.userAgent.isVersionCache_={};goog.userAgent.isVersion=function(a){return goog.userAgent.ASSUME_ANY_VERSION||goog.userAgent.isVersionCache_[a]||(goog.userAgent.isVersionCache_[a]=0<=goog.string.compareVersions(goog.userAgent.VERSION,a))};
goog.userAgent.isDocumentModeCache_={};goog.userAgent.isDocumentMode=function(a){return goog.userAgent.isDocumentModeCache_[a]||(goog.userAgent.isDocumentModeCache_[a]=goog.userAgent.IE&&!!document.documentMode&&document.documentMode>=a)};goog.events={};
goog.events.BrowserFeature={HAS_W3C_BUTTON:!goog.userAgent.IE||goog.userAgent.isDocumentMode(9),HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE||goog.userAgent.isDocumentMode(9),SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE&&!goog.userAgent.isVersion("8"),HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT||goog.userAgent.isVersion("528"),HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO&&goog.userAgent.isVersion("1.9b")||goog.userAgent.IE&&goog.userAgent.isVersion("8")||goog.userAgent.OPERA&&goog.userAgent.isVersion("9.5")||
goog.userAgent.WEBKIT&&goog.userAgent.isVersion("528"),HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO&&!goog.userAgent.isVersion("8")||goog.userAgent.IE&&!goog.userAgent.isVersion("9")};goog.events.Event=function(a,b){this.type=a;this.currentTarget=this.target=b};goog.events.Event.prototype.disposeInternal=function(){};goog.events.Event.prototype.dispose=function(){};goog.events.Event.prototype.propagationStopped_=!1;goog.events.Event.prototype.defaultPrevented=!1;goog.events.Event.prototype.returnValue_=!0;goog.events.Event.prototype.stopPropagation=function(){this.propagationStopped_=!0};
goog.events.Event.prototype.preventDefault=function(){this.defaultPrevented=!0;this.returnValue_=!1};goog.events.Event.stopPropagation=function(a){a.stopPropagation()};goog.events.Event.preventDefault=function(a){a.preventDefault()};goog.events.EventType={CLICK:"click",DBLCLICK:"dblclick",MOUSEDOWN:"mousedown",MOUSEUP:"mouseup",MOUSEOVER:"mouseover",MOUSEOUT:"mouseout",MOUSEMOVE:"mousemove",SELECTSTART:"selectstart",KEYPRESS:"keypress",KEYDOWN:"keydown",KEYUP:"keyup",BLUR:"blur",FOCUS:"focus",DEACTIVATE:"deactivate",FOCUSIN:goog.userAgent.IE?"focusin":"DOMFocusIn",FOCUSOUT:goog.userAgent.IE?"focusout":"DOMFocusOut",CHANGE:"change",SELECT:"select",SUBMIT:"submit",INPUT:"input",PROPERTYCHANGE:"propertychange",DRAGSTART:"dragstart",
DRAGENTER:"dragenter",DRAGOVER:"dragover",DRAGLEAVE:"dragleave",DROP:"drop",TOUCHSTART:"touchstart",TOUCHMOVE:"touchmove",TOUCHEND:"touchend",TOUCHCANCEL:"touchcancel",CONTEXTMENU:"contextmenu",ERROR:"error",HELP:"help",LOAD:"load",LOSECAPTURE:"losecapture",READYSTATECHANGE:"readystatechange",RESIZE:"resize",SCROLL:"scroll",UNLOAD:"unload",HASHCHANGE:"hashchange",PAGEHIDE:"pagehide",PAGESHOW:"pageshow",POPSTATE:"popstate",COPY:"copy",PASTE:"paste",CUT:"cut",BEFORECOPY:"beforecopy",BEFORECUT:"beforecut",
BEFOREPASTE:"beforepaste",ONLINE:"online",OFFLINE:"offline",MESSAGE:"message",CONNECT:"connect",TRANSITIONEND:goog.userAgent.WEBKIT?"webkitTransitionEnd":goog.userAgent.OPERA?"oTransitionEnd":"transitionend"};goog.reflect={};goog.reflect.object=function(a,b){return b};goog.reflect.sinkValue=function(a){goog.reflect.sinkValue[" "](a);return a};goog.reflect.sinkValue[" "]=goog.nullFunction;goog.reflect.canAccessProperty=function(a,b){try{return goog.reflect.sinkValue(a[b]),!0}catch(c){}return!1};goog.events.BrowserEvent=function(a,b){a&&this.init(a,b)};goog.inherits(goog.events.BrowserEvent,goog.events.Event);goog.events.BrowserEvent.MouseButton={LEFT:0,MIDDLE:1,RIGHT:2};goog.events.BrowserEvent.IEButtonMap=[1,4,2];goog.events.BrowserEvent.prototype.target=null;goog.events.BrowserEvent.prototype.relatedTarget=null;goog.events.BrowserEvent.prototype.offsetX=0;goog.events.BrowserEvent.prototype.offsetY=0;goog.events.BrowserEvent.prototype.clientX=0;
goog.events.BrowserEvent.prototype.clientY=0;goog.events.BrowserEvent.prototype.screenX=0;goog.events.BrowserEvent.prototype.screenY=0;goog.events.BrowserEvent.prototype.button=0;goog.events.BrowserEvent.prototype.keyCode=0;goog.events.BrowserEvent.prototype.charCode=0;goog.events.BrowserEvent.prototype.ctrlKey=!1;goog.events.BrowserEvent.prototype.altKey=!1;goog.events.BrowserEvent.prototype.shiftKey=!1;goog.events.BrowserEvent.prototype.metaKey=!1;
goog.events.BrowserEvent.prototype.platformModifierKey=!1;goog.events.BrowserEvent.prototype.event_=null;
goog.events.BrowserEvent.prototype.init=function(a,b){var c=this.type=a.type;goog.events.Event.call(this,c);this.target=a.target||a.srcElement;this.currentTarget=b;var d=a.relatedTarget;d?goog.userAgent.GECKO&&(goog.reflect.canAccessProperty(d,"nodeName")||(d=null)):c==goog.events.EventType.MOUSEOVER?d=a.fromElement:c==goog.events.EventType.MOUSEOUT&&(d=a.toElement);this.relatedTarget=d;this.offsetX=goog.userAgent.WEBKIT||void 0!==a.offsetX?a.offsetX:a.layerX;this.offsetY=goog.userAgent.WEBKIT||void 0!==
a.offsetY?a.offsetY:a.layerY;this.clientX=void 0!==a.clientX?a.clientX:a.pageX;this.clientY=void 0!==a.clientY?a.clientY:a.pageY;this.screenX=a.screenX||0;this.screenY=a.screenY||0;this.button=a.button;this.keyCode=a.keyCode||0;this.charCode=a.charCode||("keypress"==c?a.keyCode:0);this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=a.metaKey;this.platformModifierKey=goog.userAgent.MAC?a.metaKey:a.ctrlKey;this.state=a.state;this.event_=a;a.defaultPrevented&&this.preventDefault();
delete this.propagationStopped_};goog.events.BrowserEvent.prototype.isButton=function(a){return goog.events.BrowserFeature.HAS_W3C_BUTTON?this.event_.button==a:"click"==this.type?a==goog.events.BrowserEvent.MouseButton.LEFT:!!(this.event_.button&goog.events.BrowserEvent.IEButtonMap[a])};goog.events.BrowserEvent.prototype.isMouseActionButton=function(){return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT)&&!(goog.userAgent.WEBKIT&&goog.userAgent.MAC&&this.ctrlKey)};
goog.events.BrowserEvent.prototype.stopPropagation=function(){goog.events.BrowserEvent.superClass_.stopPropagation.call(this);this.event_.stopPropagation?this.event_.stopPropagation():this.event_.cancelBubble=!0};
goog.events.BrowserEvent.prototype.preventDefault=function(){goog.events.BrowserEvent.superClass_.preventDefault.call(this);var a=this.event_;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};goog.events.BrowserEvent.prototype.getBrowserEvent=function(){return this.event_};goog.events.BrowserEvent.prototype.disposeInternal=function(){};goog.events.EventWrapper=function(){};goog.events.EventWrapper.prototype.listen=function(){};goog.events.EventWrapper.prototype.unlisten=function(){};goog.events.Listener=function(){goog.events.Listener.ENABLE_MONITORING&&(this.creationStack=Error().stack)};goog.events.Listener.counter_=0;goog.events.Listener.ENABLE_MONITORING=!1;goog.events.Listener.prototype.key=0;goog.events.Listener.prototype.removed=!1;goog.events.Listener.prototype.callOnce=!1;
goog.events.Listener.prototype.init=function(a,b,c,d,e,f){if(goog.isFunction(a))this.isFunctionListener_=!0;else if(a&&a.handleEvent&&goog.isFunction(a.handleEvent))this.isFunctionListener_=!1;else throw Error("Invalid listener argument");this.listener=a;this.proxy=b;this.src=c;this.type=d;this.capture=!!e;this.handler=f;this.callOnce=!1;this.key=++goog.events.Listener.counter_;this.removed=!1};
goog.events.Listener.prototype.handleEvent=function(a){return this.isFunctionListener_?this.listener.call(this.handler||this.src,a):this.listener.handleEvent.call(this.listener,a)};goog.object={};goog.object.forEach=function(a,b,c){for(var d in a)b.call(c,a[d],d,a)};goog.object.filter=function(a,b,c){var d={},e;for(e in a)b.call(c,a[e],e,a)&&(d[e]=a[e]);return d};goog.object.map=function(a,b,c){var d={},e;for(e in a)d[e]=b.call(c,a[e],e,a);return d};goog.object.some=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return!0;return!1};goog.object.every=function(a,b,c){for(var d in a)if(!b.call(c,a[d],d,a))return!1;return!0};
goog.object.getCount=function(a){var b=0,c;for(c in a)b++;return b};goog.object.getAnyKey=function(a){for(var b in a)return b};goog.object.getAnyValue=function(a){for(var b in a)return a[b]};goog.object.contains=function(a,b){return goog.object.containsValue(a,b)};goog.object.getValues=function(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b};goog.object.getKeys=function(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b};
goog.object.getValueByKeys=function(a,b){for(var c=goog.isArrayLike(b),d=c?b:arguments,c=c?0:1;c<d.length&&!(a=a[d[c]],!goog.isDef(a));c++);return a};goog.object.containsKey=function(a,b){return b in a};goog.object.containsValue=function(a,b){for(var c in a)if(a[c]==b)return!0;return!1};goog.object.findKey=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d};goog.object.findValue=function(a,b,c){return(b=goog.object.findKey(a,b,c))&&a[b]};
goog.object.isEmpty=function(a){for(var b in a)return!1;return!0};goog.object.clear=function(a){for(var b in a)delete a[b]};goog.object.remove=function(a,b){var c;(c=b in a)&&delete a[b];return c};goog.object.add=function(a,b,c){if(b in a)throw Error('The object already contains the key "'+b+'"');goog.object.set(a,b,c)};goog.object.get=function(a,b,c){return b in a?a[b]:c};goog.object.set=function(a,b,c){a[b]=c};goog.object.setIfUndefined=function(a,b,c){return b in a?a[b]:a[b]=c};
goog.object.clone=function(a){var b={},c;for(c in a)b[c]=a[c];return b};goog.object.unsafeClone=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if(a.clone)return a.clone();var b="array"==b?[]:{},c;for(c in a)b[c]=goog.object.unsafeClone(a[c]);return b}return a};goog.object.transpose=function(a){var b={},c;for(c in a)b[a[c]]=c;return b};goog.object.PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
goog.object.extend=function(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<goog.object.PROTOTYPE_FIELDS_.length;f++)c=goog.object.PROTOTYPE_FIELDS_[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};
goog.object.create=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.create.apply(null,arguments[0]);if(b%2)throw Error("Uneven number of arguments");for(var c={},d=0;d<b;d+=2)c[arguments[d]]=arguments[d+1];return c};goog.object.createSet=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.createSet.apply(null,arguments[0]);for(var c={},d=0;d<b;d++)c[arguments[d]]=!0;return c};goog.events.listeners_={};goog.events.listenerTree_={};goog.events.sources_={};goog.events.onString_="on";goog.events.onStringMap_={};goog.events.keySeparator_="_";
goog.events.listen=function(a,b,c,d,e){if(b){if(goog.isArray(b)){for(var f=0;f<b.length;f++)goog.events.listen(a,b[f],c,d,e);return null}var d=!!d,g=goog.events.listenerTree_;b in g||(g[b]={count_:0,remaining_:0});g=g[b];d in g||(g[d]={count_:0,remaining_:0},g.count_++);var g=g[d],h=goog.getUid(a),i;g.remaining_++;if(g[h]){i=g[h];for(f=0;f<i.length;f++)if(g=i[f],g.listener==c&&g.handler==e){if(g.removed)break;return i[f].key}}else i=g[h]=[],g.count_++;f=goog.events.getProxy();f.src=a;g=new goog.events.Listener;
g.init(c,f,a,b,d,e);c=g.key;f.key=c;i.push(g);goog.events.listeners_[c]=g;goog.events.sources_[h]||(goog.events.sources_[h]=[]);goog.events.sources_[h].push(g);a.addEventListener?(a==goog.global||!a.customEvent_)&&a.addEventListener(b,f,d):a.attachEvent(goog.events.getOnString_(b),f);return c}throw Error("Invalid event type");};
goog.events.getProxy=function(){var a=goog.events.handleBrowserEvent_,b=goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT?function(c){return a.call(b.src,b.key,c)}:function(c){c=a.call(b.src,b.key,c);if(!c)return c};return b};goog.events.listenOnce=function(a,b,c,d,e){if(goog.isArray(b)){for(var f=0;f<b.length;f++)goog.events.listenOnce(a,b[f],c,d,e);return null}a=goog.events.listen(a,b,c,d,e);goog.events.listeners_[a].callOnce=!0;return a};
goog.events.listenWithWrapper=function(a,b,c,d,e){b.listen(a,c,d,e)};goog.events.unlisten=function(a,b,c,d,e){if(goog.isArray(b)){for(var f=0;f<b.length;f++)goog.events.unlisten(a,b[f],c,d,e);return null}d=!!d;a=goog.events.getListeners_(a,b,d);if(!a)return!1;for(f=0;f<a.length;f++)if(a[f].listener==c&&a[f].capture==d&&a[f].handler==e)return goog.events.unlistenByKey(a[f].key);return!1};
goog.events.unlistenByKey=function(a){if(!goog.events.listeners_[a])return!1;var b=goog.events.listeners_[a];if(b.removed)return!1;var c=b.src,d=b.type,e=b.proxy,f=b.capture;c.removeEventListener?(c==goog.global||!c.customEvent_)&&c.removeEventListener(d,e,f):c.detachEvent&&c.detachEvent(goog.events.getOnString_(d),e);c=goog.getUid(c);goog.events.sources_[c]&&(e=goog.events.sources_[c],goog.array.remove(e,b),0==e.length&&delete goog.events.sources_[c]);b.removed=!0;if(b=goog.events.listenerTree_[d][f][c])b.needsCleanup_=
!0,goog.events.cleanUp_(d,f,c,b);delete goog.events.listeners_[a];return!0};goog.events.unlistenWithWrapper=function(a,b,c,d,e){b.unlisten(a,c,d,e)};
goog.events.cleanUp_=function(a,b,c,d){if(!d.locked_&&d.needsCleanup_){for(var e=0,f=0;e<d.length;e++)d[e].removed?d[e].proxy.src=null:(e!=f&&(d[f]=d[e]),f++);d.length=f;d.needsCleanup_=!1;0==f&&(delete goog.events.listenerTree_[a][b][c],goog.events.listenerTree_[a][b].count_--,0==goog.events.listenerTree_[a][b].count_&&(delete goog.events.listenerTree_[a][b],goog.events.listenerTree_[a].count_--),0==goog.events.listenerTree_[a].count_&&delete goog.events.listenerTree_[a])}};
goog.events.removeAll=function(a,b,c){var d=0,e=null==b,f=null==c,c=!!c;if(null==a)goog.object.forEach(goog.events.sources_,function(a){for(var g=a.length-1;0<=g;g--){var h=a[g];if((e||b==h.type)&&(f||c==h.capture))goog.events.unlistenByKey(h.key),d++}});else if(a=goog.getUid(a),goog.events.sources_[a])for(var a=goog.events.sources_[a],g=a.length-1;0<=g;g--){var h=a[g];if((e||b==h.type)&&(f||c==h.capture))goog.events.unlistenByKey(h.key),d++}return d};
goog.events.getListeners=function(a,b,c){return goog.events.getListeners_(a,b,c)||[]};goog.events.getListeners_=function(a,b,c){var d=goog.events.listenerTree_;return b in d&&(d=d[b],c in d&&(d=d[c],a=goog.getUid(a),d[a]))?d[a]:null};goog.events.getListener=function(a,b,c,d,e){d=!!d;if(a=goog.events.getListeners_(a,b,d))for(b=0;b<a.length;b++)if(!a[b].removed&&a[b].listener==c&&a[b].capture==d&&a[b].handler==e)return a[b];return null};
goog.events.hasListener=function(a,b,c){var a=goog.getUid(a),d=goog.events.sources_[a];if(d){var e=goog.isDef(b),f=goog.isDef(c);return e&&f?(d=goog.events.listenerTree_[b],!!d&&!!d[c]&&a in d[c]):!e&&!f?!0:goog.array.some(d,function(a){return e&&a.type==b||f&&a.capture==c})}return!1};goog.events.expose=function(a){var b=[],c;for(c in a)a[c]&&a[c].id?b.push(c+" = "+a[c]+" ("+a[c].id+")"):b.push(c+" = "+a[c]);return b.join("\n")};
goog.events.getOnString_=function(a){return a in goog.events.onStringMap_?goog.events.onStringMap_[a]:goog.events.onStringMap_[a]=goog.events.onString_+a};goog.events.fireListeners=function(a,b,c,d){var e=goog.events.listenerTree_;return b in e&&(e=e[b],c in e)?goog.events.fireListeners_(e[c],a,b,c,d):!0};
goog.events.fireListeners_=function(a,b,c,d,e){var f=1,b=goog.getUid(b);if(a[b]){a.remaining_--;a=a[b];a.locked_?a.locked_++:a.locked_=1;try{for(var g=a.length,h=0;h<g;h++){var i=a[h];i&&!i.removed&&(f&=!1!==goog.events.fireListener(i,e))}}finally{a.locked_--,goog.events.cleanUp_(c,d,b,a)}}return Boolean(f)};goog.events.fireListener=function(a,b){a.callOnce&&goog.events.unlistenByKey(a.key);return a.handleEvent(b)};goog.events.getTotalListenerCount=function(){return goog.object.getCount(goog.events.listeners_)};
goog.events.dispatchEvent=function(a,b){var c=b.type||b,d=goog.events.listenerTree_;if(!(c in d))return!0;if(goog.isString(b))b=new goog.events.Event(b,a);else if(b instanceof goog.events.Event)b.target=b.target||a;else{var e=b,b=new goog.events.Event(c,a);goog.object.extend(b,e)}var e=1,f,d=d[c],c=!0 in d,g;if(c){f=[];for(g=a;g;g=g.getParentEventTarget())f.push(g);g=d[!0];g.remaining_=g.count_;for(var h=f.length-1;!b.propagationStopped_&&0<=h&&g.remaining_;h--)b.currentTarget=f[h],e&=goog.events.fireListeners_(g,
f[h],b.type,!0,b)&&!1!=b.returnValue_}if(!1 in d)if(g=d[!1],g.remaining_=g.count_,c)for(h=0;!b.propagationStopped_&&h<f.length&&g.remaining_;h++)b.currentTarget=f[h],e&=goog.events.fireListeners_(g,f[h],b.type,!1,b)&&!1!=b.returnValue_;else for(d=a;!b.propagationStopped_&&d&&g.remaining_;d=d.getParentEventTarget())b.currentTarget=d,e&=goog.events.fireListeners_(g,d,b.type,!1,b)&&!1!=b.returnValue_;return Boolean(e)};
goog.events.protectBrowserEventEntryPoint=function(a){goog.events.handleBrowserEvent_=a.protectEntryPoint(goog.events.handleBrowserEvent_)};
goog.events.handleBrowserEvent_=function(a,b){if(!goog.events.listeners_[a])return!0;var c=goog.events.listeners_[a],d=c.type,e=goog.events.listenerTree_;if(!(d in e))return!0;var e=e[d],f,g;if(!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT){f=b||goog.getObjectByName("window.event");var h=!0 in e,i=!1 in e;if(h){if(goog.events.isMarkedIeEvent_(f))return!0;goog.events.markIeEvent_(f)}var j=new goog.events.BrowserEvent;j.init(f,this);f=!0;try{if(h){for(var k=[],m=j.currentTarget;m;m=m.parentNode)k.push(m);
g=e[!0];g.remaining_=g.count_;for(var l=k.length-1;!j.propagationStopped_&&0<=l&&g.remaining_;l--)j.currentTarget=k[l],f&=goog.events.fireListeners_(g,k[l],d,!0,j);if(i){g=e[!1];g.remaining_=g.count_;for(l=0;!j.propagationStopped_&&l<k.length&&g.remaining_;l++)j.currentTarget=k[l],f&=goog.events.fireListeners_(g,k[l],d,!1,j)}}else f=goog.events.fireListener(c,j)}finally{k&&(k.length=0)}return f}d=new goog.events.BrowserEvent(b,this);return f=goog.events.fireListener(c,d)};
goog.events.markIeEvent_=function(a){var b=!1;if(0==a.keyCode)try{a.keyCode=-1;return}catch(c){b=!0}if(b||void 0==a.returnValue)a.returnValue=!0};goog.events.isMarkedIeEvent_=function(a){return 0>a.keyCode||void 0!=a.returnValue};goog.events.uniqueIdCounter_=0;goog.events.getUniqueId=function(a){return a+"_"+goog.events.uniqueIdCounter_++};goog.debug.entryPointRegistry.register(function(a){goog.events.handleBrowserEvent_=a(goog.events.handleBrowserEvent_)});goog.events.EventTarget=function(){goog.Disposable.call(this)};goog.inherits(goog.events.EventTarget,goog.Disposable);goog.events.EventTarget.prototype.customEvent_=!0;goog.events.EventTarget.prototype.parentEventTarget_=null;goog.events.EventTarget.prototype.getParentEventTarget=function(){return this.parentEventTarget_};goog.events.EventTarget.prototype.setParentEventTarget=function(a){this.parentEventTarget_=a};
goog.events.EventTarget.prototype.addEventListener=function(a,b,c,d){goog.events.listen(this,a,b,c,d)};goog.events.EventTarget.prototype.removeEventListener=function(a,b,c,d){goog.events.unlisten(this,a,b,c,d)};goog.events.EventTarget.prototype.dispatchEvent=function(a){return goog.events.dispatchEvent(this,a)};goog.events.EventTarget.prototype.disposeInternal=function(){goog.events.EventTarget.superClass_.disposeInternal.call(this);goog.events.removeAll(this);this.parentEventTarget_=null};crow.Graph=function(){this.nodes=[];this.map={};this.version="0";this.validator=new goog.events.EventTarget;this.height=this.width=0;this.addNode=function(a){a._initialize();if(a.getX&&a.getY){var b=a.getX(),c=a.getY();b+1>this.width&&(this.width=b+1);c+1>this.height&&(this.height=c+1)}this.nodes.push(a);this.map[a.id]=a};this.removeNode=function(a,b,c){if("number"===typeof a){delete this.map[""+a+"_"+b];for(var d=0;d<this.nodes.length;d++){var e=this.nodes[d];if(e.x==a&&e.y==b){this.nodes.splice(d,
1);break}}c&&this.invalidate(a,b)}else delete this.map[a.id]};this.getNode=function(a,b,c){var d;if("function"===typeof a)for(var e=0;e<this.nodes.length;e++){var f=this.nodes[e];if(a.call(f)){d=f;break}}else{if("string"===typeof a)return this.map[a];if("number"!==typeof a)throw Error("x coordinate not provided");if("number"!==typeof b)throw Error("y coordinate not provided");d=this.map[""+a+"_"+b]}if(d)return d;if(c&&"number"===typeof a)return d=new crow.BaseNode([a,b]),d.isBlank=!0,d};this.getNodes=
function(a){switch(typeof a){case "function":return this.getNodes({filter:a});case "object":var b=a.start||this.nodes[0],c=crow.Graph._lookupAlgorithm(a.algorithm||"linear");if(!(c.prototype instanceof crow.algorithm.SearchAlgorithm))throw Error("only compatible with SearchAlgorithms");return(new c(this)).search(b,{filter:a.filter});case "undefined":return this.nodes;default:throw Error("unsupported object "+a.toString());}};this.findGoal=function(a){return crow.Graph.findGoal(a,this)};this.invalidate=
function(a,b,c,d){if(0==c||0==d)throw Error("dx and dy can't be 0");c&&d?this.validator.dispatchEvent({type:"invalidateRegion",x:a,y:b,dx:c,dy:d}):this.validator.dispatchEvent({type:"invalidatePoint",x:a,y:b})}};
crow.Graph.findGoal=function(a,b){crow.Algorithm.initializeDataStructures();var c=a.start||b&&b.nodes[0];if(!c)throw Error("To go somewhere you must know where you start...perhaps you meant to provide a start node?");var d=a.goal,e=crow.Graph._lookupAlgorithm(a.algorithm)||crow.AlgorithmResolver.getAlgorithm();if(!(e.prototype instanceof crow.algorithm.ShortestPathAlgorithm))throw Error("only compatible with ShortestPathAlgorithms");a.graph=b;return(new e(b)).findPath(c,d,a)};
crow.Graph.algorithm={};crow.Graph.defaultAlgorithm={};crow.Graph.fromTilePlane=function(a,b){if(!window.Effect||!window.Effect.Port)throw Error("EffectGames-specific extensions don't work anywhere else");if(!a)throw Error("tplane is required");if("function"!==typeof b)throw Error("callback not provided or not a function");for(var c=new crow.Graph,d=0,e=a.getMaxTileX();d<e;d++)for(var f=0,g=a.getMaxTileY();f<g;f++){var h=a.lookupTile(d,f),i=a.lookupTile(d,f,!0);(h=b(h,i))&&c.addNode(h)}return c};
crow.Graph.fromArray=function(a,b){crow.assert(a instanceof Array,crow.assert.InvalidArgumentType("Array"));for(var c=new crow.Graph,d,e=0,f=0;f<a.length;f++){d=0;for(var g=a[f],h=0;h<g.length;h++){var i=g.charAt(h);(i=b(d,e,i))&&c.addNode(i);d++}e++}return c};crow.Graph.registerAlgorithm=function(a){var b=a.alias;if(!b)throw Error("No alias found for algorithm");crow.Graph.algorithm[b]=a};
crow.Graph._lookupAlgorithm=function(a){var b=typeof a;if("string"===b){if(b=crow.Graph.algorithm[a])return b;throw Error("Algorithm `"+a+"` not found");}if("object"===b||"undefined"===b)if(b=crow.AlgorithmResolver.getAlgorithm(a))return b;return null};crow.GraphUtil={distance:{euclidean:function(a,b){return Math.sqrt(Math.pow(a,2)+Math.pow(b,2))},manhattan:function(a,b){return Math.abs(a)+Math.abs(b)},chebyshev:function(a,b){return Math.max(Math.abs(a),Math.abs(b))},one:function(){return 1}}};
crow.GraphUtil.distance.pythagoras=crow.GraphUtil.distance.euclidean;crow.GraphUtil.distance.maximum=crow.GraphUtil.distance.chebyshev;crow.GraphUtil.distance.manhattan8=crow.GraphUtil.distance.chebyshev;crow.AlgorithmResolver=new function(){this.getAlgorithm=function(a){return this.getAlgorithms(a).dequeue()};this.getAlgorithms=function(a){a||(a={});"undefined"===typeof a.heuristics_allowed&&(a.heuristics_allowed=!0);var b=crow.Graph.algorithm,c=new crow.structs.BucketPriorityQueue(crow.structs.BucketPriorityQueue.REVERSE_KEY_COMPARATOR),d;for(d in b){var e=b[d],f=e.attributes;if(f){var g=0,g="undefined"!==typeof a.min_speed&&a.min_speed>f.min_speed?g-Infinity:g+f.min_speed;if(a.moving_start&&!f.moving_start||
a.moving_goal&&!f.moving_goal||a.unstable_graph&&!f.unstable_graph||!a.heuristics_allowed&&f.heuristics_allowed||a.goal_is_node&&!f.goal_is_node||a.goal_is_callback&&!f.goal_is_callback)g-=Infinity;-Infinity<g&&c.enqueue(g,e)}}return c}};crow.algorithm={};crow.algorithm.ShortestPathAlgorithm=function(){};crow.algorithm.ShortestPathAlgorithm.prototype=new crow.Algorithm;crow.algorithm.ShortestPathAlgorithm.prototype.findPath=function(){this.wrapperNode=new crow.Algorithm.NodeMap};crow.Node=function(a){a||(a=""+Math.random());this.id=a};crow.Node.prototype.distanceAlgorithm=crow.GraphUtil.distance.manhattan;crow.Node.prototype.distanceToGoal=function(){throw Error("This method (either distanceToGoal or distanceToNeighbor) was called, but is not implemented.  You must override this method in your own class to determine the distance between nodes.");};crow.Node.prototype.distanceToNeighbor=function(){throw Error("distanceToNeighbor must be overridden");};
crow.Node.prototype.getNeighbors=function(){throw Error("This method (getNeighbors) was called, but is not implemented.  You need to implement it so that the algorithm knows how to find the nodes reachable from the current node.");};crow.GridNode=function(a){crow.Node.apply(this);a&&(this.x=a[0],this.y=a[1]);this._initialized=this.isBlank=!1};crow.GridNode.prototype=new crow.Node;
crow.GridNode.prototype._initialize=function(){if(!this._initialized){this._initialized=!0;var a=this.getX(),b=this.getY();if("number"!==typeof a)throw Error("Node must have a valid x coord");if("number"!==typeof b)throw Error("Node must have a valid y coord");a=Math.floor(a);b=Math.floor(b);this.x=a;this.y=b;this.generateId();delete this.getX;delete this.getY;this.distanceToNeighbor==crow.Node.prototype.distanceToNeighbor&&(this.distanceToNeighbor=this.distanceToGoal)}};
crow.GridNode.prototype.getX=function(){return this.x};crow.GridNode.prototype.getY=function(){return this.y};crow.GridNode.prototype.distanceToGoal=function(a){return this.distanceAlgorithm(this.x-a.x,this.y-a.y)};crow.GridNode.prototype.generateId=function(){return this.id=this.x+"_"+this.y};
crow.GridNode.prototype.getNeighbors=function(a,b,c){var d=this.x,e=this.y,f=[];f.push(a.getNode(d+1,e));b&&f.push(a.getNode(d+1,e+1));f.push(a.getNode(d,e+1));b&&f.push(a.getNode(d-1,e+1));f.push(a.getNode(d-1,e));b&&f.push(a.getNode(d-1,e-1));f.push(a.getNode(d,e-1));b&&f.push(a.getNode(d+1,e-1));a=[];for(b=0;b<f.length;b++)(d=f[b])?a.push(d):c&&a.push(null);return a};crow.BaseNode=crow.GridNode;crow.algorithm.Path=function(a){this.nodes=a.nodes;this.start=a.start;this.end=this.goal=a.goal;this.length=a.length;this.found=a.found;this.actor=this.graph=this.algorithm=null;this._baked=!0;!1===a.baked&&(this._baked=!1,this.algorithm=a.algorithm,this.graph=a.graph,this.actor=a.actor,this.graph&&(this.graph.validator.addEventListener("invalidatePoint",this._invalidatePoint,null,this),this.graph.validator.addEventListener("invalidateRegion",this._invalidateRegion,null,this)))};
crow.algorithm.Path.prototype.copyTo=function(a){for(var b in this)a[b]=this[b]};crow.algorithm.Path.prototype._invalidatePoint=function(a){this._baked||this.algorithm._invalidatePoint(this,a)};crow.algorithm.Path.prototype._invalidateRegion=function(a){this._baked||this.algorithm._invalidateRegion(this,a)};
crow.algorithm.Path.prototype.advanceTo=function(a){crow.assert("number"===typeof a||a instanceof crow.BaseNode,crow.assert.InvalidArgumentType("number or crow.BaseNode"));if("number"===typeof a)return crow.assert(0<=a&&a<this.nodes.length,crow.assert.IndexOutBounds(a)),this.advanceTo(this.nodes[a]);var b=a.x,c=a.y,d,e=!1;for(d=0;d<this.nodes.length;d++){var f=this.nodes[d];if(f.x===b&&f.y===c){e=!0;break}}e?(this.start=a,this.found=!1,this.algorithm.moveStart&&this.algorithm.moveStart(this,a)):(this.nodes=
[a],this.found=!1,this.end=null)};crow.algorithm.Path.prototype.moveTarget=function(a){if(!this.algorithm.klass.attributes.moving_goal)throw Error(crow.assert.IllegalMethodCall("moveGoal","This method is intended only to be used with algorithms that support moving targets."));this.goal=a;this.found=!1;this.algorithm.moveTarget&&this.algorithm.moveTarget(this,a)};crow.algorithm.Path.prototype.getNextNode=function(){return this.nodes[1]};
crow.algorithm.Path.prototype.continueCalculating=function(a){if(this._baked)throw Error("Can't continue calculating a baked path.  Either pass {baked: false} to findGoal, or don't call .bake() on this path yet.");return this.found?!0:this.algorithm.continueCalculating(this,a)};
crow.algorithm.Path.prototype.bake=function(){this._baked=!0;this.graph&&(this.graph.validator.removeEventListener("invalidatePoint",this._invalidatePoint),this.graph.validator.removeEventListener("invalidateRegion",this._invalidateRegion),this.graph=null);this.actor=this.algorithm=null};crow.algorithm.AStarAlgorithm={};
(function(){crow.algorithm.AStarAlgorithm=function(a){this.klass=crow.algorithm.AStarAlgorithm;this.graph=a};crow.algorithm.AStarAlgorithm.prototype=new crow.algorithm.ShortestPathAlgorithm;crow.algorithm.AStarAlgorithm.prototype.findPath=function(a,b,c){crow.algorithm.ShortestPathAlgorithm.prototype.findPath.apply(this,arguments);if("function"===typeof b)throw Error("A* doesn't support using a callback to determine the goal");this._wrapperNode=new crow.Algorithm.NodeMap;c||(c={});var d=c.actor;this.start=
a;this.goal=b;this.opts=c;a=this._getWrapperNode(a);this.openSet=new crow.structs.BucketPriorityQueue;this.openSet.enqueue(0,a);a.g=0;a.h=a.innerNode.distanceToGoal(b,d);for(var e=!1,f;f=this.openSet.dequeue();){if(f.innerNode===b){e=!0;break}else if(f.expanded)continue;f.expanded=!0;for(var g=f.innerNode.getNeighbors(this.graph),h=0;h<g.length;h++){var i=this._getWrapperNode(g[h]);if(!i.expanded){var j=f.g+f.innerNode.distanceToNeighbor(i.innerNode,d);if(Infinity!=j&&(!this.openSet.contains(i)||
j<i.g)){i.parent=f;i.g=j;var k=i.innerNode.distanceToGoal(b,d);i.f=j+k;this.openSet.enqueue(i.f,i)}}}}f=[];d={nodes:f,start:a.innerNode,goal:b,length:null,recalculate:this.recalculate,algorithm:this,graph:c.graph,baked:c.baked||"undefined"===typeof c.baked&&!c.limit,actor:d};if(e){e=this._getWrapperNode(b);f.unshift(e.innerNode);for(g=e.parent;g;)f.unshift(g.innerNode),g=g.parent;d.end=e.innerNode;d.length=e.g;d.found=!0;return new crow.algorithm.Path(d)}d.end=null;d.length=Infinity;d.found=!1;return new crow.algorithm.Path(d)};
crow.algorithm.AStarAlgorithm.WrapperNode=function(a){this.innerNode=a;this.expanded=!1;this.parent=null;this.g=Infinity;this.f=this.h=null};crow.algorithm.AStarAlgorithm.prototype._getWrapperNode=crow.Algorithm.wrapperNodeGetterTemplate(crow.algorithm.AStarAlgorithm.WrapperNode);crow.algorithm.AStarAlgorithm.attributes={min_speed:2,moving_start:!1,moving_goal:!1,unstable_graph:!1,heuristics_allowed:!0,goal_is_node:!0,goal_is_callback:!1};crow.algorithm.AStarAlgorithm.alias="a*";crow.Graph.registerAlgorithm(crow.algorithm.AStarAlgorithm)})();crow.algorithm.BasicTraversalAlgorithm={};
(function(){crow.algorithm.BasicTraversalAlgorithm=function(a){this.klass=crow.algorithm.BasicTraversalAlgorithm;this.graph=a};crow.algorithm.BasicTraversalAlgorithm.prototype=new crow.algorithm.ShortestPathAlgorithm;crow.algorithm.BasicTraversalAlgorithm.prototype.findPath=function(a,b,c){crow.algorithm.ShortestPathAlgorithm.prototype.findPath.apply(this,arguments);"undefined"==typeof c&&(c={});a=this._getWrapperNode(a);a.distance=0;this.actor=c.actor;for(var d=c.filter,e=!1,f=[a],g=[],h;h=this.getNext(f);){h.pending=
!1;h.expanded=!0;g.push(h.innerNode);if(h.innerNode==b){e=!0;break}var i=h.innerNode.getNeighbors(this.graph);c.random&&(i=i.shuffle());for(var j=0;j<i.length;j++){var k=this._getWrapperNode(i[j]);if(!k.expanded&&!k.pending&&Infinity>h.innerNode.distanceToNeighbor(k.innerNode,this.actor)&&(!d||d.call(this,k)))this.addNext(f,k),k.pending=!0,k.parent=h,k.distance=h.distance+1}}this.start=a;this.goal=b;this.list=g;return this.resolveResults(e)};crow.algorithm.BasicTraversalAlgorithm.prototype.getNext=
function(){throw Error("must implement");};crow.algorithm.BasicTraversalAlgorithm.prototype.addNext=function(a,b){a.push(b)};crow.algorithm.BasicTraversalAlgorithm.prototype.resolveResults=function(a){var b=[],c={nodes:b,start:this.start.innerNode,goal:this.goal,algorithm:this,graph:this.graph,baked:!0,actor:this.actor,found:a};if(a){a=this._getWrapperNode(this.goal);b.unshift(a.innerNode);for(var d=a.parent;d;)b.unshift(d.innerNode),d=d.parent;c.end=a.innerNode;c.length=a.distance}else c.end=null,
c.length=Infinity;b=new crow.algorithm.Path(c);b.allNodes=this.list;return b};crow.algorithm.BasicTraversalAlgorithm.WrapperNode=function(a){this.innerNode=a;this.pending=this.expanded=!1;this.parent=null;this.distance=Infinity};crow.algorithm.BasicTraversalAlgorithm.prototype._getWrapperNode=crow.Algorithm.wrapperNodeGetterTemplate(crow.algorithm.BasicTraversalAlgorithm.WrapperNode)})();crow.algorithm.BFSAlgorithm=function(a){this.klass=crow.algorithm.BFSAlgorithm;this.graph=a};crow.algorithm.BFSAlgorithm.prototype=new crow.algorithm.BasicTraversalAlgorithm;crow.algorithm.BFSAlgorithm.prototype.getNext=function(a){return a.shift()};crow.algorithm.BFSAlgorithm.alias="bfs";crow.Graph.registerAlgorithm(crow.algorithm.BFSAlgorithm);crow.algorithm.SearchAlgorithm=function(){};crow.algorithm.SearchAlgorithm.prototype=new crow.Algorithm;crow.algorithm.SearchAlgorithm.prototype.search=function(){this.wrapperNode=new crow.Algorithm.NodeMap};crow.algorithm.BFSBasicAlgorithm=function(a){this.klass=crow.algorithm.BFSBasicAlgorithm;this.graph=a};crow.algorithm.BFSBasicAlgorithm.prototype=new crow.algorithm.SearchAlgorithm;crow.algorithm.BFSBasicAlgorithm.prototype.search=function(a,b){return(new crow.algorithm.BFSAlgorithm(this.graph)).findPath(a,null,b).allNodes};crow.algorithm.BFSBasicAlgorithm.alias="bfs_basic";crow.Graph.registerAlgorithm(crow.algorithm.BFSBasicAlgorithm);crow.algorithm.DFSAlgorithm=function(a){this.klass=crow.algorithm.DFSAlgorithm;this.graph=a};crow.algorithm.DFSAlgorithm.prototype=new crow.algorithm.BasicTraversalAlgorithm;crow.algorithm.DFSAlgorithm.prototype.getNext=function(a){return a.pop()};crow.algorithm.DFSAlgorithm.alias="dfs";crow.Graph.registerAlgorithm(crow.algorithm.DFSAlgorithm);crow.algorithm.DijkstraAlgorithm=function(a){this.klass=crow.algorithm.DijkstraAlgorithm;this.graph=a};crow.algorithm.DijkstraAlgorithm.prototype=new crow.algorithm.ShortestPathAlgorithm;
crow.algorithm.DijkstraAlgorithm.prototype.findPath=function(a,b,c){crow.algorithm.ShortestPathAlgorithm.prototype.findPath.apply(this,arguments);this.visitedList=[];this.start=a;this.goal=b;this.opts=c||{};if(c.limit)throw Error("Dijkstra's doesn't support the `limit` option.");this.actor=c.actor;this._getWrapperNode(a).distance=0;var d,e;"function"===typeof b?(this.mainLoop(a),d=this.determineClosestEndNode(b),e=!!d):(e=this.mainLoop(a,b),d=this._getWrapperNode(b));var f=[];if(Infinity>d.distance){f.unshift(d.innerNode);
for(var g=d.previous;g;)f.unshift(g.innerNode),g=g.previous}return new crow.algorithm.Path({nodes:f,start:a,goal:b,end:e?d.innerNode:null,length:e?d.distance:Infinity,found:e,algorithm:this,graph:c.graph,baked:c.baked||"undefined"===typeof c.baked&&!c.limit,actor:this.actor})};crow.algorithm.DijkstraAlgorithm.prototype.determineClosestEndNode=function(a){for(var b,c=Infinity,d=0;d<this.visitedList.length;d++){var e=this.visitedList[d];if(a.call(e.innerNode)){var f=e.distance;f<c&&(b=e,c=f)}}return b};
crow.algorithm.DijkstraAlgorithm.prototype.mainLoop=function(a,b){for(var c=new crow.Algorithm.PriorityQueue,a=this._getWrapperNode(a);null!=a;){for(var d=a.innerNode.getNeighbors(this.graph),e=0;e<d.length;e++){var f=this._getWrapperNode(d[e]);if(!f.visited){var g=a.distance+a.innerNode.distanceToNeighbor(f.innerNode,this.actor),h=f.distance;g<h&&(f.distance=g,f.previous=a,h=g);Infinity>h&&c.enqueue(h,f)}}a.visited=!0;this.visitedList.push(a);if(a.innerNode===b)return!0;a=c.dequeue()}return!1};
crow.algorithm.DijkstraAlgorithm.WrapperNode=function(a){this.innerNode=a;this.visited=!1;this.previous=null;this.distance=Infinity};crow.algorithm.DijkstraAlgorithm.prototype._getWrapperNode=crow.Algorithm.wrapperNodeGetterTemplate(crow.algorithm.DijkstraAlgorithm.WrapperNode);crow.algorithm.DijkstraAlgorithm.attributes={min_speed:-2,moving_start:!1,moving_goal:!1,unstable_graph:!1,heuristics_allowed:!1,goal_is_node:!0,goal_is_callback:!0};crow.algorithm.DijkstraAlgorithm.alias="dijkstra";crow.Graph.registerAlgorithm(crow.algorithm.DijkstraAlgorithm);crow.algorithm.FRAStarAlgorithm=function(a){this.klass=crow.algorithm.FRAStarAlgorithm;this.graph=a};crow.algorithm.FRAStarAlgorithm.prototype=new crow.algorithm.ShortestPathAlgorithm;crow.algorithm.FRAStarAlgorithm.prototype._invalidatePoint=function(a,b){crow.Algorithm.prototype._invalidatePoint.apply(this,arguments);this.reset()};
crow.algorithm.FRAStarAlgorithm.prototype.reset=function(){this.wrapperNode=new crow.Algorithm.NodeMap;this.start=this._getWrapperNode(this.start.innerNode);this.goal=this._getWrapperNode(this.goal.innerNode);this.iteration=1;this.start.initialize();this.start.g=0;this.evaluatedList=[];this.openSet=new crow.structs.BucketPriorityQueue;this.openSet.enqueue(0,this.start);this.state=1};crow.algorithm.FRAStarAlgorithm.prototype.ComputePriority=function(a){return a.g+a.innerNode.distanceToGoal(this.goal.innerNode)};
crow.algorithm.FRAStarAlgorithm.prototype.TestClosedList=function(a){return a==this.start||!(!a.expanded||!a.parent)};
crow.algorithm.FRAStarAlgorithm.prototype.ComputeShortestPath=function(){for(;node=this.openSet.dequeue();)if(!node.expanded){node.expanded=!0;for(var a=node.innerNode.getNeighbors(this.graph,this.neighbors),b=0;b<a.length;b++){var c=this._getWrapperNode(a[b]);if(!this.TestClosedList(c)){c.initialize();var d=node.g+node.innerNode.distanceToNeighbor(c.innerNode);d<c.g&&(c.g=d,c.parent=node,this.openSet.enqueue(this.ComputePriority(c),c))}}if(node==this.goal)return!0}return!1};
crow.algorithm.FRAStarAlgorithm.prototype.UpdateParent=function(a){var b=this.cell,c=b.innerNode.getNeighbors(this.graph,this.diagonals);a||(c=c.reverse());for(var d=b.parent,a=-1,e=0;e<c.length;e++)if(c[e]==d){a=e;break}if(0<=a)for(e=0;e<c.length;e++)if(d=this._getWrapperNode(c[(e+a)%c.length]),d.g==b.g+b.innerNode.distanceToNeighbor(d.innerNode)&&this.TestClosedList(d))return d.parent=b,this.cell=d,!0;return!1};
crow.algorithm.FRAStarAlgorithm.prototype.Step2=function(){for(this.cell=this.start;this.UpdateParent(!1););for(this.cell=this.start;this.UpdateParent(!0););};
crow.algorithm.FRAStarAlgorithm.prototype.Step3=function(){this.start.parent=null;for(var a=this.start,b=this.previousStart,c=new crow.algorithm.BFSBasicAlgorithm(this.graph),d=this._getWrapperNode,e=this,c=c.search(this.previousStart.innerNode,{filter:function(c){c=d.call(e,c).ancestors();return 0<=c.indexOf(b)&&0>c.indexOf(a)}}),f=0;f<c.length;f++){var g=this._getWrapperNode(c[f]);g.parent=null;this.openSet.remove(g)}};
crow.algorithm.FRAStarAlgorithm.prototype.FindPerimeter=function(a,b){var c=[b],d=a.innerNode.getNeighbors(this.graph,this.diagonals,!0),e;for(e=0;e<d.length;e++){var f=d[e];if(f==b.innerNode)break}for(var f=a,g=0;g<d.length;g++){var h=(e+g)%d.length;if(f=d[h])if(f=this._getWrapperNode(f),this.TestClosedList(f))if(f==a)break;else d=f.innerNode.getNeighbors(this.graph,this.diagonals,!0),e=h+3,g=-1;else c[c.length-1]!=f&&c.push(f)}return c};
crow.algorithm.FRAStarAlgorithm.prototype.Step5=function(){for(var a=this.FindPerimeter(this.start,this.anchor),b=0;b<a.length;b++){var c=a[b];this.openSet.enqueue(this.ComputePriority(c),c)}var d=this;this.openSet.each(function(a){a.initialize()});var e=[];this.openSet.each(function(a){for(var b=a.innerNode.getNeighbors(d.graph,d.diagonals),c=0;c<b.length;c++){var i=d._getWrapperNode(b[c]),j=i.g+i.innerNode.distanceToNeighbor(a.innerNode);d.TestClosedList(i)&&a.g>j&&(a.g=j,a.parent=i,e.push(a))}});
for(b=0;b<e.length;b++)a=e[b],this.openSet.enqueue(this.ComputePriority(a),a)};crow.algorithm.FRAStarAlgorithm.prototype.findPath=function(a,b,c){c||(c={});crow.algorithm.ShortestPathAlgorithm.prototype.findPath.apply(this,arguments);a=this._getWrapperNode(a);b=this._getWrapperNode(b);this.start=a;this.goal=b;this.opts=c;this.reset();var d=this.resolveResults(this.opts,!1);this.continueCalculating(d);return d};
crow.algorithm.FRAStarAlgorithm.prototype.resolveResults=function(a,b){a||(a={});var c;c=b?{nodes:this.goal.ancestors(!0).concat(this.goal.innerNode),start:this.start.innerNode,goal:this.goal.innerNode,found:!0,length:this.goal.g,algorithm:this,graph:a.graph,baked:a.baked||"undefined"===typeof a.baked,actor:a.actor}:{nodes:[],start:this.start.innerNode,goal:this.goal.innerNode,found:!1,length:Infinity,algorithm:this,graph:a.graph,baked:a.baked||"undefined"===typeof a.baked,actor:a.actor};return new crow.algorithm.Path(c)};
crow.algorithm.FRAStarAlgorithm.prototype.updateStart=function(a){for(var b=!1,c=0;c<a.nodes.length;c++)if(a.nodes[c]==this.start.innerNode){a.nodes.splice(0,c);b=!0;break}if(b){for(c=b=0;c<a.nodes.length-1;c++)b+=a.nodes[c].distanceToNeighbor(a.nodes[c+1]);a.length=b}else throw Error("Present (start) position not found on path!  FRA* only works if this agent follows the path towards the target.");};
crow.algorithm.FRAStarAlgorithm.prototype.continueCalculating=function(a){this.start=this._getWrapperNode(this.start);this.goal=this._getWrapperNode(this.goal);this.previousStart&&(this.previousStart=this._getWrapperNode(this.previousStart));this.previousGoal&&(this.previousGoal=this._getWrapperNode(this.previousGoal));for(;;)switch(this.state){case 1:if(this.start==this.goal)this.state=!0;else{var b=this.ComputeShortestPath(),c=this.resolveResults(null,b);a.found=b;a.nodes=c.nodes;a.length=this.goal.g;
b?(this.openListIncomplete=!1,this.state=3):this.state=!1}break;case 3:this.state=this.TestClosedList(this.goal)?4:5;break;case 4:if(this.start!=this.goal)for(b=0;b<a.nodes.length;b++)if(a.nodes[b]==this.goal.innerNode)return this.updateStart(a),!0;this.start==this.goal?this.state=!0:(this.newTarget&&(this.previousGoal=this.goal,this.goal=this._getWrapperNode(this.newTarget),this.newTarget=null),this.previousStart||(this.previousStart=this.start),this.start!=this.previousStart&&(this.Step2(),this.anchor=
this.start.parent,this.Step3(),this.openListIncomplete=!0),this.state=3);break;case 5:this.openListIncomplete&&(this.iteration++,this.Step5());this.state=1;break;case !0:return a.found=!0,a.nodes=[a.goal],a.length=0,!0;case !1:return a.found=!1,a.nodes=[],a.length=Infinity,!1}};crow.algorithm.FRAStarAlgorithm.prototype.moveStart=function(a,b){this.previousStart=this.start;this.start=b};crow.algorithm.FRAStarAlgorithm.prototype.moveTarget=function(a,b){this.previousGoal=this.goal;this.goal=b};
crow.algorithm.FRAStarAlgorithm.WrapperNode=function(a){this.innerNode=a;this.generatedIteration=0;this.expanded=!1;this.parent=this.g=null};crow.algorithm.FRAStarAlgorithm.prototype._getWrapperNode=crow.Algorithm.wrapperNodeGetterTemplate(crow.algorithm.FRAStarAlgorithm.WrapperNode);crow.algorithm.FRAStarAlgorithm.WrapperNode.prototype.initialize=function(){var a=this.algorithm.iteration;this.generatedIteration!=a&&(this.g=Infinity,this.generatedIteration=a,this.expanded=!1)};
crow.algorithm.FRAStarAlgorithm.WrapperNode.prototype.ancestors=function(a){for(var b=[],c=this.parent;c;)b.unshift(a?c.innerNode:c),c=c.parent;return b};crow.algorithm.FRAStarAlgorithm.attributes={min_speed:2,moving_start:!0,moving_goal:!0,unstable_graph:!1,heuristics_allowed:!0,goal_is_node:!0,goal_is_callback:!1};crow.algorithm.FRAStarAlgorithm.alias="fra*";crow.Graph.registerAlgorithm(crow.algorithm.FRAStarAlgorithm);crow.algorithm.LinearAlgorithm=function(a){this.klass=crow.algorithm.LinearAlgorithm;this.graph=a};crow.algorithm.LinearAlgorithm.prototype=new crow.algorithm.SearchAlgorithm;crow.algorithm.LinearAlgorithm.prototype.search=function(a,b){b||(b={});var c,d=this.graph.getNodes();if(b.filter){c=[];for(var e=0;e<d.length;e++){var f=d[e];b.filter.call(f)&&c.push(f)}}else c=d;return c};crow.algorithm.LinearAlgorithm.alias="linear";crow.Graph.registerAlgorithm(crow.algorithm.LinearAlgorithm);crow.structs.NDArray=function(a){this.arr=[];this.dimensions=a};crow.structs.NDArray.prototype.add=function(a){if(arguments.length-1!=this.dimensions)throw Error(crow.assert.IncorrectArgumentCount(arguments.length,this.dimensions+1));for(var b=this.arr,c=b,d=arguments.length,e=1;e<d-1;e++)c=b[arguments[e]],"undefined"===typeof c&&(c=b[arguments[e]]=[]),b=c;c[arguments[d-1]]=a};
crow.structs.NDArray.prototype.get=function(){if(arguments.length!=this.dimensions)throw new crow.assert.IncorrectArgumentCount(arguments.length,this.dimensions);for(var a=this.arr,b=0;b<arguments.length&&"undefined"!==typeof a;b++)a=a[arguments[b]];return a};crow.structs.NDArray.prototype.each=function(a){for(var b=0;b<this.arr.length;b++){var c=this.arr[b];"undefined"!==typeof c&&this._each(a,c,[b])}};
crow.structs.NDArray.prototype._each=function(a,b,c){if(b instanceof Array&&c.length<=this.dimensions)for(var d=0;d<b.length;d++){var e=c.slice(0).concat(d),f=b[d];"undefined"!==typeof f&&this._each(a,f,e)}else c.unshift(b),a.apply(this,c)};crow.algorithm.LPAStarAlgorithm=function(a){this.klass=crow.algorithm.LPAStarAlgorithm;this.graph=a};crow.algorithm.LPAStarAlgorithm.prototype=new crow.algorithm.ShortestPathAlgorithm;crow.algorithm.LPAStarAlgorithm.prototype._CalculateKey=function(a){var b=Math.min(a.g,a.rhs);return[b+a.innerNode.distanceToGoal(this.goal.innerNode),b]};
crow.algorithm.LPAStarAlgorithm.prototype._UpdateVertex=function(a){if(a!=this.start){for(var b=a.innerNode.getNeighbors(this.graph,this.diagonals),c=Infinity,d=0;d<b.length;d++){var e=this._getWrapperNode(b[d]),e=e.g+a.innerNode.distanceToNeighbor(e.innerNode);e<c&&(c=e)}a.rhs=c}this.U.remove(a);a.g!=a.rhs&&this.U.enqueue(this._CalculateKey(a),a)};crow.algorithm.LPAStarAlgorithm.prototype.keyComp=function(a,b){return a[0]<b[0]||a[0]==b[0]&&a[1]<b[1]?-1:a[0]==b[0]&&a[1]==b[1]?0:1};
crow.algorithm.LPAStarAlgorithm.prototype.updateNeighbors=function(a){for(var a=a.innerNode.getNeighbors(this.graph,this.diagonals),b=0;b<a.length;b++)this._UpdateVertex(this._getWrapperNode(a[b]))};crow.algorithm.LPAStarAlgorithm.prototype.debugGraph=function(){};
crow.algorithm.LPAStarAlgorithm.prototype.findPath=function(a,b,c){if("function"===typeof b)throw Error("LPA* doesn't support using a callback to determine the goal");c||(c={});this._wrapperNode=new crow.Algorithm.NodeMap;this.start=this._getWrapperNode(a);this.goal=this._getWrapperNode(b);this.diagonals=c.diagonals;this.U=new crow.structs.BucketPriorityQueue(this.keyComp);this.start.rhs=0;this.U.enqueue(this._CalculateKey(this.start),this.start);this.mainLoop();a=this.resolveResults();return new crow.algorithm.Path({nodes:a.nodes,
start:this.start.innerNode,goal:this.goal.innerNode,found:a.found,length:a.length,recalculate:this.recalculate,algorithm:this,baked:c.baked||"undefined"===typeof c.baked&&!c.limit,graph:c.graph})};crow.algorithm.LPAStarAlgorithm.prototype.mainLoop=function(){for(;this.U.length&&(0>this.keyComp(this.U.peekKey(),this._CalculateKey(this.goal))||this.goal.rhs!=this.goal.g);){var a=this.U.dequeue();a.g>a.rhs?(a.g=a.rhs,this.updateNeighbors(a)):(a.g=Infinity,this.updateNeighbors(a),this._UpdateVertex(a))}};
crow.algorithm.LPAStarAlgorithm.prototype.resolveResults=function(){var a=[],b=this.goal,c=0,d=0;for(this.graph&&(failSafeMaximum=this.graph.width*this.graph.height);b!=this.start&&b;){a.unshift(b.innerNode);for(var e=b.innerNode.getNeighbors(this.graph,this.diagonals),f=Infinity,g=null,h=0,i=0,j=0;j<e.length;j++){var k=this._getWrapperNode(e[j]),h=b.innerNode.distanceToNeighbor(k.innerNode),m=k.g+h;m<f&&(f=m,g=k,i=h)}(b=g)&&(c+=i);d++;if(Infinity<=d)throw Error("resolveResults won't terminate");
}(b=b==this.start)||(a=[]);a.unshift(this.start.innerNode);return{nodes:a,length:c,found:b}};crow.algorithm.LPAStarAlgorithm.prototype.recalculate=function(){var a=this.algorithm;return a.findPath(a.start,a.goal,a.opts)};
crow.algorithm.LPAStarAlgorithm.prototype._invalidatePoint=function(a,b){var c=b.x,d=b.y;a.invalidatedPoints||(a.invalidatedPoints=new crow.structs.NDArray(2));a.invalidatedPoints.add(!0,c,d);c=a.graph.getNode(c,d,!0).getNeighbors(a.graph,a.algorithm.diagonals);for(d=0;d<c.length;d++){var e=c[d];a.invalidatedPoints.add(!0,e.x,e.y)}a.found=!1};
crow.algorithm.LPAStarAlgorithm.prototype.continueCalculating=function(a){if(a.invalidatedPoints){var b=this,c=this._getWrapperNode;a.invalidatedPoints.each(function(a,d,g){(a=b.graph.getNode(d,g))&&b._UpdateVertex(c.call(b,a))});this.mainLoop();a.invalidatedPoints=new crow.structs.NDArray(2);var d=this.resolveResults();a.nodes=d.nodes;a.length=d.length;a.found=d.found}return a.found};
crow.algorithm.LPAStarAlgorithm.prototype._getWrapperNode=function(a){var b=this._wrapperNode.get(a);if(b)return b;b=new crow.algorithm.LPAStarAlgorithm.WrapperNode(a);this._wrapperNode.set(a,b);return b};crow.algorithm.LPAStarAlgorithm.WrapperNode=function(a){this.innerNode=a;this.g=this.rhs=Infinity};crow.algorithm.LPAStarAlgorithm.attributes={min_speed:0,moving_start:!1,moving_goal:!1,unstable_graph:!0,heuristics_allowed:!0,goal_is_node:!0,goal_is_callback:!1};
crow.algorithm.LPAStarAlgorithm.alias="lpa*";crow.Graph.registerAlgorithm(crow.algorithm.LPAStarAlgorithm);crow.ConnectedNode=function(a){crow.Node.apply(this,arguments);this.connections=[];this.connectionDistances={}};crow.ConnectedNode.prototype=new crow.Node;crow.ConnectedNode.prototype.connectTo=function(a,b,c){"undefined"==typeof b&&(b=1);this.connections.push(a);this.connectionDistances[a.id]=b;"false"!==typeof c&&a instanceof crow.ConnectedNode&&(a.connections.push(this),a.connectionDistances[this.id]=b)};crow.ConnectedNode.prototype.getNeighbors=function(){return this.connections};
crow.ConnectedNode.prototype.distanceToNeighbor=function(a){return this.connectionDistances[a.id]||Infinity};crow.All={};
/* jshint ignore:end */
var blocks = {};

$(function() {
    initBlocks();

    $('body').removeClass('_loading');
});

/**
 * Initialize all blocks on page
 */
function initBlocks() {
    for (var key in blocks) {
        if (blocks[key]) {
            if ($('.' + key).length && blocks[key].init) {
                blocks[key].init();
            }
        }
    }
}

/**
 * Load image
 *
 * @param {String} url
 * @param {Function} callback
 */
var loadImage = function(url, callback) {
    var img = new Image();

    img.onload = img.onerror = function(evt) {
        img.onload = img.onerror = null;
        callback.call(this, evt.type == 'load', img, url);
    };

    img.src = url;
};


function logObject(obj) {
    //console.log(JSON.stringify(obj, null, 4));
}

/**
 * Numerals string helper
 */
function numeralsString(num, s1, s2, s3) {
    var mod = num % 10;

    if (num === undefined) {
        return [];
    }

    return [num, mod == 1 ? s1 : mod > 1 && mod < 5 ? s2 : s3];
}
var metro = [
    {
        "line": "Сокольническая линия",
        "stations": [
            "Бульвар Рокоссовского",
            "Черкизовская",
            "Преображенская площадь",
            "Сокольники",
            "Красносельская",
            "Комсомольская",
            "Красные ворота",
            "Чистые пруды",
            "Лубянка",
            "Охотный ряд",
            "Библиотека имени Ленина",
            "Кропоткинская",
            "Парк культуры",
            "Фрунзенская",
            "Спортивная",
            "Воробьёвы горы",
            "Университет",
            "Проспект Вернадского",
            "Юго-Западная",
            "Тропарёво",
            "Румянцево",
            "Саларьево"
        ],
        "color": "cf2028"
    },
    {
        "line": "Замоскворецкая линия",
        "stations": [
            "Алма-Атинская",
            "Красногвардейская",
            "Домодедовская",
            "Орехово",
            "Царицыно",
            "Кантемировская",
            "Каширская",
            "Коломенская",
            "Технопарк",
            "Автозаводская",
            "Павелецкая",
            "Новокузнецкая",
            "Театральная",
            "Тверская",
            "Маяковская",
            "Белорусская",
            "Динамо",
            "Аэропорт",
            "Сокол",
            "Войковская",
            "Водный стадион",
            "Речной вокзал"
        ],
        "color": "13703a"
    },
    {
        "line": "Арбатско-Покровская линия",
        "stations": [
            "Щёлковская",
            "Первомайская",
            "Измайловская",
            "Партизанская",
            "Семёновская",
            "Электрозаводская",
            "Бауманская",
            "Курская",
            "Площадь Революции",
            "Арбатская",
            "Смоленская",
            "Киевская",
            "Парк Победы",
            "Славянский бульвар",
            "Кунцевская",
            "Молодёжная",
            "Крылатское",
            "Строгино",
            "Мякинино",
            "Волоколамская",
            "Митино",
            "Пятницкое шоссе"
        ],
        "color": "283981"
    },
    {
        "line": "Филёвская линия",
        "stations": [
            "Кунцевская",
            "Пионерская",
            "Филевский парк",
            "Багратионовская",
            "Фили",
            "Кутузовская",
            "Студенческая",
            "Киевская",
            "Смоленская",
            "Арбатская",
            "Александровский сад",
            "Выставочная",
            "Международная"
        ],
        "color": "19a2dc"
    },
    {
        "line": "Кольцевая линия",
        "stations": [
            "Парк культуры",
            "Октябрьская",
            "Добрынинская",
            "Павелецкая",
            "Таганская",
            "Курская",
            "Комсомольская",
            "Проспект Мира",
            "Новослободская",
            "Белорусская",
            "Краснопресненская",
            "Киевская"
        ],
        "color": "8a3127"
    },
    {
        "line": "Калужско-Рижская линия",
        "stations": [
            "Медведково",
            "Бабушкинская",
            "Свиблово",
            "Ботанический сад",
            "ВДНХ",
            "Алексеевская",
            "Рижская",
            "Проспект Мира",
            "Сухаревская",
            "Тургеневская",
            "Китай-город",
            "Третьяковская",
            "Октябрьская",
            "Шаболовская",
            "Ленинский проспект",
            "Академическая",
            "Профсоюзная",
            "Новые Черёмушки",
            "Калужская",
            "Беляево",
            "Коньково",
            "Тёплый стан",
            "Ясенево",
            "Новоясеневская"
        ],
        "color": "f78e38"
    },
    {
        "line": "Таганско-Краснопресненская линия",
        "stations": [
            "Планерная",
            "Сходненская",
            "Тушинская",
            "Спартак",
            "Щукинская",
            "Октябрьское поле",
            "Полежаевская",
            "Беговая",
            "Улица 1905 года",
            "Баррикадная",
            "Пушкинская",
            "Кузнецкий мост",
            "Китай-город",
            "Таганская",
            "Пролетарская",
            "Волгоградский проспект",
            "Текстильщики",
            "Кузьминки",
            "Рязанский проспект",
            "Выхино",
            "Лермонтовский проспект",
            "Жулебино",
            "Котельники"
        ],
        "color": "a35d94"
    },
    {
        "line": "Калининская линия",
        "stations": [
            "Новокосино",
            "Новогиреево",
            "Перово",
            "Шоссе Энтузиастов",
            "Авиамоторная",
            "Площадь Ильича",
            "Марксистская",
            "Третьяковская",
            "Парк Победы",
            "Деловой центр",
      "Минская",
      "Ломоносовский проспект",
      "Раменки",
        ],
        "color": "fde34f"
    },
    {
        "line": "Серпуховско-Тимирязевская линия",
        "stations": [
            "Алтуфьево",
            "Бибирево",
            "Отрадное",
            "Владыкино",
            "Петровско-Разумовская",
            "Тимирязевская",
            "Дмитровская",
            "Савёловская",
            "Менделеевская",
            "Цветной бульвар",
            "Чеховская",
            "Боровицкая",
            "Полянка",
            "Серпуховская",
            "Тульская",
            "Нагатинская",
            "Нагорная",
            "Нахимовский проспект",
            "Севастопольская",
            "Чертановская",
            "Южная",
            "Пражская",
            "Улица академика Янгеля",
            "Аннино",
            "Бульвар Дмитрия Донского"
        ],
        "color": "abaeba"
    },
    {
        "line": "Люблинско-Дмитровская линия",
        "stations": [
            "Марьина роща",
            "Достоевская",
            "Трубная",
            "Сретенский бульвар",
            "Чкаловская",
            "Римская",
            "Крестьянская застава",
            "Дубровка",
            "Кожуховская",
            "Печатники",
            "Волжская",
            "Люблино",
            "Братиславская",
            "Марьино",
            "Борисово",
            "Шипиловская",
            "Зябликово"
        ],
        "color": "aad16e"
    },
    {
        "line": "Каховская линия",
        "stations": [
            "Каширская",
            "Варшавская",
            "Каховская"
        ],
        "color": "1cb2a7"
    },
    {
        "line": "Бутовская линия",
        "stations": [
            "Битцевский парк",
            "Лесопарковая",
            "Улица Старокачаловская",
            "Улица Скобелевская",
            "Бульвар адмирала Ушакова",
            "Улица Горчакова",
            "Бунинская аллея"
        ],
        "color": "8ec9ea"
    },
        {
        "line": "Некрасовская линия",
        "stations": [
            "Косино",
            "Улица Дмитриевского",
            "Лухмановская",
            "Некрасовка",
        ],
        "color": "d68ab1"
    }
];

var metroCost = [
  {
  "fromId": "lineD1_28",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 0
    },
    {
      "id": "lineD1_27",
      "cost": 23
    },
    {
      "id": "lineD1_26",
      "cost": 23
    },
    {
      "id": "lineD1_25",
      "cost": 23
    },
    {
      "id": "lineD1_24",
      "cost": 23
    },
    {
      "id": "lineD1_23",
      "cost": 23
    },
    {
      "id": "lineD1_22",
      "cost": 23
    },
    {
      "id": "lineD1_21",
      "cost": 23
    },
    {
      "id": "lineD1_20",
      "cost": 23
    },
    {
      "id": "lineD1_19",
      "cost": 46
    },
    {
      "id": "lineD1_18",
      "cost": 46
    },
    {
      "id": "lineD1_17",
      "cost": 69
    },
    {
      "id": "lineD1_16",
      "cost": 92
    },
    {
      "id": "lineD1_15",
      "cost": 115
    },
    {
      "id": "lineD1_14",
      "cost": 115
    },
    {
      "id": "lineD1_13",
      "cost": 138
    },
    {
      "id": "lineD1_12",
      "cost": 138
    },
    {
      "id": "lineD1_11",
      "cost": 138
    },
    {
      "id": "lineD1_10",
      "cost": 138
    },
    {
      "id": "lineD1_8",
      "cost": 138
    },
    {
      "id": "lineD1_7",
      "cost": 138
    },
    {
      "id": "lineD1_6",
      "cost": 161
    },
    {
      "id": "lineD1_5",
      "cost": 161
    },
    {
      "id": "lineD1_4",
      "cost": 161
    },
    {
      "id": "lineD1_3",
      "cost": 161
    },
    {
      "id": "lineD1_2",
      "cost": 161
    },
    {
      "id": "lineD1_1",
      "cost": 184
    }
  ]
},
{
  "fromId": "lineD1_27",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 23
    },
    {
      "id": "lineD1_27",
      "cost": 0
    },
    {
      "id": "lineD1_26",
      "cost": 23
    },
    {
      "id": "lineD1_25",
      "cost": 23
    },
    {
      "id": "lineD1_24",
      "cost": 23
    },
    {
      "id": "lineD1_23",
      "cost": 23
    },
    {
      "id": "lineD1_22",
      "cost": 23
    },
    {
      "id": "lineD1_21",
      "cost": 23
    },
    {
      "id": "lineD1_20",
      "cost": 23
    },
    {
      "id": "lineD1_19",
      "cost": 46
    },
    {
      "id": "lineD1_18",
      "cost": 46
    },
    {
      "id": "lineD1_17",
      "cost": 69
    },
    {
      "id": "lineD1_16",
      "cost": 92
    },
    {
      "id": "lineD1_15",
      "cost": 115
    },
    {
      "id": "lineD1_14",
      "cost": 115
    },
    {
      "id": "lineD1_13",
      "cost": 138
    },
    {
      "id": "lineD1_12",
      "cost": 138
    },
    {
      "id": "lineD1_11",
      "cost": 138
    },
    {
      "id": "lineD1_10",
      "cost": 138
    },
    {
      "id": "lineD1_8",
      "cost": 138
    },
    {
      "id": "lineD1_7",
      "cost": 138
    },
    {
      "id": "lineD1_6",
      "cost": 161
    },
    {
      "id": "lineD1_5",
      "cost": 161
    },
    {
      "id": "lineD1_4",
      "cost": 161
    },
    {
      "id": "lineD1_3",
      "cost": 161
    },
    {
      "id": "lineD1_2",
      "cost": 161
    },
    {
      "id": "lineD1_1",
      "cost": 184
    }
  ]
},
{
  "fromId": "lineD1_26",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 23
    },
    {
      "id": "lineD1_27",
      "cost": 23
    },
    {
      "id": "lineD1_26",
      "cost": 0
    },
    {
      "id": "lineD1_25",
      "cost": 23
    },
    {
      "id": "lineD1_24",
      "cost": 23
    },
    {
      "id": "lineD1_23",
      "cost": 23
    },
    {
      "id": "lineD1_22",
      "cost": 23
    },
    {
      "id": "lineD1_21",
      "cost": 23
    },
    {
      "id": "lineD1_20",
      "cost": 23
    },
    {
      "id": "lineD1_19",
      "cost": 46
    },
    {
      "id": "lineD1_18",
      "cost": 46
    },
    {
      "id": "lineD1_17",
      "cost": 69
    },
    {
      "id": "lineD1_16",
      "cost": 92
    },
    {
      "id": "lineD1_15",
      "cost": 115
    },
    {
      "id": "lineD1_14",
      "cost": 115
    },
    {
      "id": "lineD1_13",
      "cost": 138
    },
    {
      "id": "lineD1_12",
      "cost": 138
    },
    {
      "id": "lineD1_11",
      "cost": 138
    },
    {
      "id": "lineD1_10",
      "cost": 138
    },
    {
      "id": "lineD1_8",
      "cost": 138
    },
    {
      "id": "lineD1_7",
      "cost": 138
    },
    {
      "id": "lineD1_6",
      "cost": 161
    },
    {
      "id": "lineD1_5",
      "cost": 161
    },
    {
      "id": "lineD1_4",
      "cost": 161
    },
    {
      "id": "lineD1_3",
      "cost": 161
    },
    {
      "id": "lineD1_2",
      "cost": 161
    },
    {
      "id": "lineD1_1",
      "cost": 184
    }
  ]
},
{
  "fromId": "lineD1_25",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 23
    },
    {
      "id": "lineD1_27",
      "cost": 23
    },
    {
      "id": "lineD1_26",
      "cost": 23
    },
    {
      "id": "lineD1_25",
      "cost": 0
    },
    {
      "id": "lineD1_24",
      "cost": 23
    },
    {
      "id": "lineD1_23",
      "cost": 23
    },
    {
      "id": "lineD1_22",
      "cost": 23
    },
    {
      "id": "lineD1_21",
      "cost": 23
    },
    {
      "id": "lineD1_20",
      "cost": 23
    },
    {
      "id": "lineD1_19",
      "cost": 46
    },
    {
      "id": "lineD1_18",
      "cost": 46
    },
    {
      "id": "lineD1_17",
      "cost": 69
    },
    {
      "id": "lineD1_16",
      "cost": 92
    },
    {
      "id": "lineD1_15",
      "cost": 115
    },
    {
      "id": "lineD1_14",
      "cost": 115
    },
    {
      "id": "lineD1_13",
      "cost": 138
    },
    {
      "id": "lineD1_12",
      "cost": 138
    },
    {
      "id": "lineD1_11",
      "cost": 138
    },
    {
      "id": "lineD1_10",
      "cost": 138
    },
    {
      "id": "lineD1_8",
      "cost": 138
    },
    {
      "id": "lineD1_7",
      "cost": 138
    },
    {
      "id": "lineD1_6",
      "cost": 161
    },
    {
      "id": "lineD1_5",
      "cost": 161
    },
    {
      "id": "lineD1_4",
      "cost": 161
    },
    {
      "id": "lineD1_3",
      "cost": 161
    },
    {
      "id": "lineD1_2",
      "cost": 161
    },
    {
      "id": "lineD1_1",
      "cost": 184
    }
  ]
},
{
  "fromId": "lineD1_24",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 23
    },
    {
      "id": "lineD1_27",
      "cost": 23
    },
    {
      "id": "lineD1_26",
      "cost": 23
    },
    {
      "id": "lineD1_25",
      "cost": 23
    },
    {
      "id": "lineD1_24",
      "cost": 0
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 138
    },
    {
      "id": "lineD1_5",
      "cost": 138
    },
    {
      "id": "lineD1_4",
      "cost": 138
    },
    {
      "id": "lineD1_3",
      "cost": 138
    },
    {
      "id": "lineD1_2",
      "cost": 138
    },
    {
      "id": "lineD1_1",
      "cost": 161
    }
  ]
},
{
  "fromId": "lineD1_23",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 23
    },
    {
      "id": "lineD1_27",
      "cost": 23
    },
    {
      "id": "lineD1_26",
      "cost": 23
    },
    {
      "id": "lineD1_25",
      "cost": 23
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 0
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 138
    },
    {
      "id": "lineD1_5",
      "cost": 138
    },
    {
      "id": "lineD1_4",
      "cost": 138
    },
    {
      "id": "lineD1_3",
      "cost": 138
    },
    {
      "id": "lineD1_2",
      "cost": 138
    },
    {
      "id": "lineD1_1",
      "cost": 161
    }
  ]
},
{
  "fromId": "lineD1_22",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 23
    },
    {
      "id": "lineD1_27",
      "cost": 23
    },
    {
      "id": "lineD1_26",
      "cost": 23
    },
    {
      "id": "lineD1_25",
      "cost": 23
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 0
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 138
    },
    {
      "id": "lineD1_5",
      "cost": 138
    },
    {
      "id": "lineD1_4",
      "cost": 138
    },
    {
      "id": "lineD1_3",
      "cost": 138
    },
    {
      "id": "lineD1_2",
      "cost": 138
    },
    {
      "id": "lineD1_1",
      "cost": 161
    }
  ]
},
{
  "fromId": "lineD1_21",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 23
    },
    {
      "id": "lineD1_27",
      "cost": 23
    },
    {
      "id": "lineD1_26",
      "cost": 23
    },
    {
      "id": "lineD1_25",
      "cost": 23
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 0
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 138
    },
    {
      "id": "lineD1_5",
      "cost": 138
    },
    {
      "id": "lineD1_4",
      "cost": 138
    },
    {
      "id": "lineD1_3",
      "cost": 138
    },
    {
      "id": "lineD1_2",
      "cost": 138
    },
    {
      "id": "lineD1_1",
      "cost": 161
    }
  ]
},
{
  "fromId": "lineD1_20",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 23
    },
    {
      "id": "lineD1_27",
      "cost": 23
    },
    {
      "id": "lineD1_26",
      "cost": 23
    },
    {
      "id": "lineD1_25",
      "cost": 23
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 0
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 138
    },
    {
      "id": "lineD1_5",
      "cost": 138
    },
    {
      "id": "lineD1_4",
      "cost": 138
    },
    {
      "id": "lineD1_3",
      "cost": 138
    },
    {
      "id": "lineD1_2",
      "cost": 138
    },
    {
      "id": "lineD1_1",
      "cost": 161
    }
  ]
},
{
  "fromId": "lineD1_19",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 46
    },
    {
      "id": "lineD1_27",
      "cost": 46
    },
    {
      "id": "lineD1_26",
      "cost": 46
    },
    {
      "id": "lineD1_25",
      "cost": 46
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 0
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 115
    },
    {
      "id": "lineD1_5",
      "cost": 115
    },
    {
      "id": "lineD1_4",
      "cost": 115
    },
    {
      "id": "lineD1_3",
      "cost": 115
    },
    {
      "id": "lineD1_2",
      "cost": 115
    },
    {
      "id": "lineD1_1",
      "cost": 138
    }
  ]
},
{
  "fromId": "lineD1_18",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 46
    },
    {
      "id": "lineD1_27",
      "cost": 46
    },
    {
      "id": "lineD1_26",
      "cost": 46
    },
    {
      "id": "lineD1_25",
      "cost": 46
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 0
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 115
    },
    {
      "id": "lineD1_5",
      "cost": 115
    },
    {
      "id": "lineD1_4",
      "cost": 115
    },
    {
      "id": "lineD1_3",
      "cost": 115
    },
    {
      "id": "lineD1_2",
      "cost": 115
    },
    {
      "id": "lineD1_1",
      "cost": 138
    }
  ]
},
{
  "fromId": "lineD1_17",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 69
    },
    {
      "id": "lineD1_27",
      "cost": 69
    },
    {
      "id": "lineD1_26",
      "cost": 69
    },
    {
      "id": "lineD1_25",
      "cost": 69
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 0
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 92
    },
    {
      "id": "lineD1_5",
      "cost": 92
    },
    {
      "id": "lineD1_4",
      "cost": 92
    },
    {
      "id": "lineD1_3",
      "cost": 92
    },
    {
      "id": "lineD1_2",
      "cost": 92
    },
    {
      "id": "lineD1_1",
      "cost": 115
    }
  ]
},
{
  "fromId": "lineD1_16",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 92
    },
    {
      "id": "lineD1_27",
      "cost": 92
    },
    {
      "id": "lineD1_26",
      "cost": 92
    },
    {
      "id": "lineD1_25",
      "cost": 92
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 0
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 69
    },
    {
      "id": "lineD1_5",
      "cost": 69
    },
    {
      "id": "lineD1_4",
      "cost": 69
    },
    {
      "id": "lineD1_3",
      "cost": 69
    },
    {
      "id": "lineD1_2",
      "cost": 69
    },
    {
      "id": "lineD1_1",
      "cost": 92
    }
  ]
},
{
  "fromId": "lineD1_15",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 115
    },
    {
      "id": "lineD1_27",
      "cost": 115
    },
    {
      "id": "lineD1_26",
      "cost": 115
    },
    {
      "id": "lineD1_25",
      "cost": 115
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 0
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 46
    },
    {
      "id": "lineD1_5",
      "cost": 46
    },
    {
      "id": "lineD1_4",
      "cost": 46
    },
    {
      "id": "lineD1_3",
      "cost": 46
    },
    {
      "id": "lineD1_2",
      "cost": 46
    },
    {
      "id": "lineD1_1",
      "cost": 69
    }
  ]
},
{
  "fromId": "lineD1_14",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 115
    },
    {
      "id": "lineD1_27",
      "cost": 115
    },
    {
      "id": "lineD1_26",
      "cost": 115
    },
    {
      "id": "lineD1_25",
      "cost": 115
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 0
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 46
    },
    {
      "id": "lineD1_5",
      "cost": 46
    },
    {
      "id": "lineD1_4",
      "cost": 46
    },
    {
      "id": "lineD1_3",
      "cost": 46
    },
    {
      "id": "lineD1_2",
      "cost": 46
    },
    {
      "id": "lineD1_1",
      "cost": 69
    }
  ]
},
{
  "fromId": "lineD1_13",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 138
    },
    {
      "id": "lineD1_27",
      "cost": 138
    },
    {
      "id": "lineD1_26",
      "cost": 138
    },
    {
      "id": "lineD1_25",
      "cost": 138
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 0
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 46
    },
    {
      "id": "lineD1_5",
      "cost": 46
    },
    {
      "id": "lineD1_4",
      "cost": 46
    },
    {
      "id": "lineD1_3",
      "cost": 46
    },
    {
      "id": "lineD1_2",
      "cost": 46
    },
    {
      "id": "lineD1_1",
      "cost": 69
    }
  ]
},
{
  "fromId": "lineD1_12",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 138
    },
    {
      "id": "lineD1_27",
      "cost": 138
    },
    {
      "id": "lineD1_26",
      "cost": 138
    },
    {
      "id": "lineD1_25",
      "cost": 138
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 0
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 23
    },
    {
      "id": "lineD1_5",
      "cost": 23
    },
    {
      "id": "lineD1_4",
      "cost": 23
    },
    {
      "id": "lineD1_3",
      "cost": 23
    },
    {
      "id": "lineD1_2",
      "cost": 23
    },
    {
      "id": "lineD1_1",
      "cost": 46
    }
  ]
},
{
  "fromId": "lineD1_11",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 138
    },
    {
      "id": "lineD1_27",
      "cost": 138
    },
    {
      "id": "lineD1_26",
      "cost": 138
    },
    {
      "id": "lineD1_25",
      "cost": 138
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 0
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 23
    },
    {
      "id": "lineD1_5",
      "cost": 23
    },
    {
      "id": "lineD1_4",
      "cost": 23
    },
    {
      "id": "lineD1_3",
      "cost": 23
    },
    {
      "id": "lineD1_2",
      "cost": 23
    },
    {
      "id": "lineD1_1",
      "cost": 46
    }
  ]
},
{
  "fromId": "lineD1_10",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 138
    },
    {
      "id": "lineD1_27",
      "cost": 138
    },
    {
      "id": "lineD1_26",
      "cost": 138
    },
    {
      "id": "lineD1_25",
      "cost": 138
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 0
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 23
    },
    {
      "id": "lineD1_5",
      "cost": 23
    },
    {
      "id": "lineD1_4",
      "cost": 23
    },
    {
      "id": "lineD1_3",
      "cost": 23
    },
    {
      "id": "lineD1_2",
      "cost": 23
    },
    {
      "id": "lineD1_1",
      "cost": 46
    }
  ]
},
{
  "fromId": "lineD1_8",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 138
    },
    {
      "id": "lineD1_27",
      "cost": 138
    },
    {
      "id": "lineD1_26",
      "cost": 138
    },
    {
      "id": "lineD1_25",
      "cost": 138
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 0
    },
    {
      "id": "lineD1_7",
      "cost": 36
    },
    {
      "id": "lineD1_6",
      "cost": 23
    },
    {
      "id": "lineD1_5",
      "cost": 23
    },
    {
      "id": "lineD1_4",
      "cost": 23
    },
    {
      "id": "lineD1_3",
      "cost": 23
    },
    {
      "id": "lineD1_2",
      "cost": 23
    },
    {
      "id": "lineD1_1",
      "cost": 46
    }
  ]
},
{
  "fromId": "lineD1_7",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 138
    },
    {
      "id": "lineD1_27",
      "cost": 138
    },
    {
      "id": "lineD1_26",
      "cost": 138
    },
    {
      "id": "lineD1_25",
      "cost": 138
    },
    {
      "id": "lineD1_24",
      "cost": 36
    },
    {
      "id": "lineD1_23",
      "cost": 36
    },
    {
      "id": "lineD1_22",
      "cost": 36
    },
    {
      "id": "lineD1_21",
      "cost": 36
    },
    {
      "id": "lineD1_20",
      "cost": 36
    },
    {
      "id": "lineD1_19",
      "cost": 36
    },
    {
      "id": "lineD1_18",
      "cost": 36
    },
    {
      "id": "lineD1_17",
      "cost": 36
    },
    {
      "id": "lineD1_16",
      "cost": 36
    },
    {
      "id": "lineD1_15",
      "cost": 36
    },
    {
      "id": "lineD1_14",
      "cost": 36
    },
    {
      "id": "lineD1_13",
      "cost": 36
    },
    {
      "id": "lineD1_12",
      "cost": 36
    },
    {
      "id": "lineD1_11",
      "cost": 36
    },
    {
      "id": "lineD1_10",
      "cost": 36
    },
    {
      "id": "lineD1_8",
      "cost": 36
    },
    {
      "id": "lineD1_7",
      "cost": 0
    },
    {
      "id": "lineD1_6",
      "cost": 23
    },
    {
      "id": "lineD1_5",
      "cost": 23
    },
    {
      "id": "lineD1_4",
      "cost": 23
    },
    {
      "id": "lineD1_3",
      "cost": 23
    },
    {
      "id": "lineD1_2",
      "cost": 23
    },
    {
      "id": "lineD1_1",
      "cost": 46
    }
  ]
},
{
  "fromId": "lineD1_6",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 161
    },
    {
      "id": "lineD1_27",
      "cost": 161
    },
    {
      "id": "lineD1_26",
      "cost": 161
    },
    {
      "id": "lineD1_25",
      "cost": 161
    },
    {
      "id": "lineD1_24",
      "cost": 138
    },
    {
      "id": "lineD1_23",
      "cost": 138
    },
    {
      "id": "lineD1_22",
      "cost": 138
    },
    {
      "id": "lineD1_21",
      "cost": 138
    },
    {
      "id": "lineD1_20",
      "cost": 138
    },
    {
      "id": "lineD1_19",
      "cost": 115
    },
    {
      "id": "lineD1_18",
      "cost": 115
    },
    {
      "id": "lineD1_17",
      "cost": 92
    },
    {
      "id": "lineD1_16",
      "cost": 69
    },
    {
      "id": "lineD1_15",
      "cost": 46
    },
    {
      "id": "lineD1_14",
      "cost": 46
    },
    {
      "id": "lineD1_13",
      "cost": 46
    },
    {
      "id": "lineD1_12",
      "cost": 23
    },
    {
      "id": "lineD1_11",
      "cost": 23
    },
    {
      "id": "lineD1_10",
      "cost": 23
    },
    {
      "id": "lineD1_8",
      "cost": 23
    },
    {
      "id": "lineD1_7",
      "cost": 23
    },
    {
      "id": "lineD1_6",
      "cost": 0
    },
    {
      "id": "lineD1_5",
      "cost": 23
    },
    {
      "id": "lineD1_4",
      "cost": 23
    },
    {
      "id": "lineD1_3",
      "cost": 23
    },
    {
      "id": "lineD1_2",
      "cost": 23
    },
    {
      "id": "lineD1_1",
      "cost": 23
    }
  ]
},
{
  "fromId": "lineD1_5",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 161
    },
    {
      "id": "lineD1_27",
      "cost": 161
    },
    {
      "id": "lineD1_26",
      "cost": 161
    },
    {
      "id": "lineD1_25",
      "cost": 161
    },
    {
      "id": "lineD1_24",
      "cost": 138
    },
    {
      "id": "lineD1_23",
      "cost": 138
    },
    {
      "id": "lineD1_22",
      "cost": 138
    },
    {
      "id": "lineD1_21",
      "cost": 138
    },
    {
      "id": "lineD1_20",
      "cost": 138
    },
    {
      "id": "lineD1_19",
      "cost": 115
    },
    {
      "id": "lineD1_18",
      "cost": 115
    },
    {
      "id": "lineD1_17",
      "cost": 92
    },
    {
      "id": "lineD1_16",
      "cost": 69
    },
    {
      "id": "lineD1_15",
      "cost": 46
    },
    {
      "id": "lineD1_14",
      "cost": 46
    },
    {
      "id": "lineD1_13",
      "cost": 46
    },
    {
      "id": "lineD1_12",
      "cost": 23
    },
    {
      "id": "lineD1_11",
      "cost": 23
    },
    {
      "id": "lineD1_10",
      "cost": 23
    },
    {
      "id": "lineD1_8",
      "cost": 23
    },
    {
      "id": "lineD1_7",
      "cost": 23
    },
    {
      "id": "lineD1_6",
      "cost": 23
    },
    {
      "id": "lineD1_5",
      "cost": 0
    },
    {
      "id": "lineD1_4",
      "cost": 23
    },
    {
      "id": "lineD1_3",
      "cost": 23
    },
    {
      "id": "lineD1_2",
      "cost": 23
    },
    {
      "id": "lineD1_1",
      "cost": 23
    }
  ]
},
{
  "fromId": "lineD1_4",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 161
    },
    {
      "id": "lineD1_27",
      "cost": 161
    },
    {
      "id": "lineD1_26",
      "cost": 161
    },
    {
      "id": "lineD1_25",
      "cost": 161
    },
    {
      "id": "lineD1_24",
      "cost": 138
    },
    {
      "id": "lineD1_23",
      "cost": 138
    },
    {
      "id": "lineD1_22",
      "cost": 138
    },
    {
      "id": "lineD1_21",
      "cost": 138
    },
    {
      "id": "lineD1_20",
      "cost": 138
    },
    {
      "id": "lineD1_19",
      "cost": 115
    },
    {
      "id": "lineD1_18",
      "cost": 115
    },
    {
      "id": "lineD1_17",
      "cost": 92
    },
    {
      "id": "lineD1_16",
      "cost": 69
    },
    {
      "id": "lineD1_15",
      "cost": 46
    },
    {
      "id": "lineD1_14",
      "cost": 46
    },
    {
      "id": "lineD1_13",
      "cost": 46
    },
    {
      "id": "lineD1_12",
      "cost": 23
    },
    {
      "id": "lineD1_11",
      "cost": 23
    },
    {
      "id": "lineD1_10",
      "cost": 23
    },
    {
      "id": "lineD1_8",
      "cost": 23
    },
    {
      "id": "lineD1_7",
      "cost": 23
    },
    {
      "id": "lineD1_6",
      "cost": 23
    },
    {
      "id": "lineD1_5",
      "cost": 23
    },
    {
      "id": "lineD1_4",
      "cost": 0
    },
    {
      "id": "lineD1_3",
      "cost": 23
    },
    {
      "id": "lineD1_2",
      "cost": 23
    },
    {
      "id": "lineD1_1",
      "cost": 23
    }
  ]
},
{
  "fromId": "lineD1_3",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 161
    },
    {
      "id": "lineD1_27",
      "cost": 161
    },
    {
      "id": "lineD1_26",
      "cost": 161
    },
    {
      "id": "lineD1_25",
      "cost": 161
    },
    {
      "id": "lineD1_24",
      "cost": 138
    },
    {
      "id": "lineD1_23",
      "cost": 138
    },
    {
      "id": "lineD1_22",
      "cost": 138
    },
    {
      "id": "lineD1_21",
      "cost": 138
    },
    {
      "id": "lineD1_20",
      "cost": 138
    },
    {
      "id": "lineD1_19",
      "cost": 115
    },
    {
      "id": "lineD1_18",
      "cost": 115
    },
    {
      "id": "lineD1_17",
      "cost": 92
    },
    {
      "id": "lineD1_16",
      "cost": 69
    },
    {
      "id": "lineD1_15",
      "cost": 46
    },
    {
      "id": "lineD1_14",
      "cost": 46
    },
    {
      "id": "lineD1_13",
      "cost": 46
    },
    {
      "id": "lineD1_12",
      "cost": 23
    },
    {
      "id": "lineD1_11",
      "cost": 23
    },
    {
      "id": "lineD1_10",
      "cost": 23
    },
    {
      "id": "lineD1_8",
      "cost": 23
    },
    {
      "id": "lineD1_7",
      "cost": 23
    },
    {
      "id": "lineD1_6",
      "cost": 23
    },
    {
      "id": "lineD1_5",
      "cost": 23
    },
    {
      "id": "lineD1_4",
      "cost": 23
    },
    {
      "id": "lineD1_3",
      "cost": 0
    },
    {
      "id": "lineD1_2",
      "cost": 23
    },
    {
      "id": "lineD1_1",
      "cost": 23
    }
  ]
},
{
  "fromId": "lineD1_2",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 161
    },
    {
      "id": "lineD1_27",
      "cost": 161
    },
    {
      "id": "lineD1_26",
      "cost": 161
    },
    {
      "id": "lineD1_25",
      "cost": 161
    },
    {
      "id": "lineD1_24",
      "cost": 138
    },
    {
      "id": "lineD1_23",
      "cost": 138
    },
    {
      "id": "lineD1_22",
      "cost": 138
    },
    {
      "id": "lineD1_21",
      "cost": 138
    },
    {
      "id": "lineD1_20",
      "cost": 138
    },
    {
      "id": "lineD1_19",
      "cost": 115
    },
    {
      "id": "lineD1_18",
      "cost": 115
    },
    {
      "id": "lineD1_17",
      "cost": 92
    },
    {
      "id": "lineD1_16",
      "cost": 69
    },
    {
      "id": "lineD1_15",
      "cost": 46
    },
    {
      "id": "lineD1_14",
      "cost": 46
    },
    {
      "id": "lineD1_13",
      "cost": 46
    },
    {
      "id": "lineD1_12",
      "cost": 23
    },
    {
      "id": "lineD1_11",
      "cost": 23
    },
    {
      "id": "lineD1_10",
      "cost": 23
    },
    {
      "id": "lineD1_8",
      "cost": 23
    },
    {
      "id": "lineD1_7",
      "cost": 23
    },
    {
      "id": "lineD1_6",
      "cost": 23
    },
    {
      "id": "lineD1_5",
      "cost": 23
    },
    {
      "id": "lineD1_4",
      "cost": 23
    },
    {
      "id": "lineD1_3",
      "cost": 23
    },
    {
      "id": "lineD1_2",
      "cost": 0
    },
    {
      "id": "lineD1_1",
      "cost": 23
    }
  ]
},
{
  "fromId": "lineD1_1",
  "toIds": [
    {
      "id": "lineD1_28",
      "cost": 184
    },
    {
      "id": "lineD1_27",
      "cost": 184
    },
    {
      "id": "lineD1_26",
      "cost": 184
    },
    {
      "id": "lineD1_25",
      "cost": 184
    },
    {
      "id": "lineD1_24",
      "cost": 161
    },
    {
      "id": "lineD1_23",
      "cost": 161
    },
    {
      "id": "lineD1_22",
      "cost": 161
    },
    {
      "id": "lineD1_21",
      "cost": 161
    },
    {
      "id": "lineD1_20",
      "cost": 161
    },
    {
      "id": "lineD1_19",
      "cost": 138
    },
    {
      "id": "lineD1_18",
      "cost": 138
    },
    {
      "id": "lineD1_17",
      "cost": 115
    },
    {
      "id": "lineD1_16",
      "cost": 92
    },
    {
      "id": "lineD1_15",
      "cost": 69
    },
    {
      "id": "lineD1_14",
      "cost": 69
    },
    {
      "id": "lineD1_13",
      "cost": 69
    },
    {
      "id": "lineD1_12",
      "cost": 46
    },
    {
      "id": "lineD1_11",
      "cost": 46
    },
    {
      "id": "lineD1_10",
      "cost": 46
    },
    {
      "id": "lineD1_8",
      "cost": 46
    },
    {
      "id": "lineD1_7",
      "cost": 46
    },
    {
      "id": "lineD1_6",
      "cost": 23
    },
    {
      "id": "lineD1_5",
      "cost": 23
    },
    {
      "id": "lineD1_4",
      "cost": 23
    },
    {
      "id": "lineD1_3",
      "cost": 23
    },
    {
      "id": "lineD1_2",
      "cost": 23
    },
    {
      "id": "lineD1_1",
      "cost": 0
    }
  ]},
    {
      "fromId": "lineD2_1",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 0
        },
        {
          "id": "lineD2_2",
          "cost": 23
        },
        {
          "id": "lineD2_3",
          "cost": 23
        },
        {
          "id": "lineD2_4",
          "cost": 23
        },
        {
          "id": "lineD2_5",
          "cost": 23
        },
        {
          "id": "lineD2_6",
          "cost": 23
        },
        {
          "id": "lineD2_7",
          "cost": 23
        },
        {
          "id": "lineD2_8",
          "cost": 46
        },
        {
          "id": "lineD2_9",
          "cost": 46
        },
        {
          "id": "lineD2_10",
          "cost": 46
        },
        {
          "id": "lineD2_11",
          "cost": 46
        },
        {
          "id": "lineD2_12",
          "cost": 46
        },
        {
          "id": "lineD2_13",
          "cost": 46
        },
        {
          "id": "lineD2_14",
          "cost": 69
        },
        {
          "id": "lineD2_15",
          "cost": 69
        },
        {
          "id": "lineD2_16",
          "cost": 69
        },
        {
          "id": "lineD2_17",
          "cost": 69
        },
        {
          "id": "lineD2_18",
          "cost": 69
        },
        {
          "id": "lineD2_19",
          "cost": 92
        },
        {
          "id": "lineD2_20",
          "cost": 92
        },
        {
          "id": "lineD2_21",
          "cost": 115
        },
        {
          "id": "lineD2_22",
          "cost": 138
        },
        {
          "id": "lineD2_23",
          "cost": 138
        },
        {
          "id": "lineD2_24",
          "cost": 138
        },
        {
          "id": "lineD2_25",
          "cost": 138
        },
        {
          "id": "lineD2_26",
          "cost": 138
        },
        {
          "id": "lineD2_27",
          "cost": 161
        },
        {
          "id": "lineD2_28",
          "cost": 161
        },
        {
          "id": "lineD2_29",
          "cost": 161
        },
        {
          "id": "lineD2_30",
          "cost": 161
        },
        {
          "id": "lineD2_31",
          "cost": 161
        },
        {
          "id": "lineD2_32",
          "cost": 184
        },
        {
          "id": "lineD2_33",
          "cost": 184
        },
        {
          "id": "lineD2_34",
          "cost": 184
        },
        {
          "id": "lineD2_35",
          "cost": 184
        },
        {
          "id": "lineD2_36",
          "cost": 207
        },
        {
          "id": "lineD2_37",
          "cost": 207
        },
        {
          "id": "lineD2_38",
          "cost": 207
        }
      ]
    },
    {
      "fromId": "lineD2_2",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 23
        },
        {
          "id": "lineD2_2",
          "cost": 0
        },
        {
          "id": "lineD2_3",
          "cost": 23
        },
        {
          "id": "lineD2_4",
          "cost": 23
        },
        {
          "id": "lineD2_5",
          "cost": 23
        },
        {
          "id": "lineD2_6",
          "cost": 23
        },
        {
          "id": "lineD2_7",
          "cost": 23
        },
        {
          "id": "lineD2_8",
          "cost": 46
        },
        {
          "id": "lineD2_9",
          "cost": 46
        },
        {
          "id": "lineD2_10",
          "cost": 46
        },
        {
          "id": "lineD2_11",
          "cost": 46
        },
        {
          "id": "lineD2_12",
          "cost": 46
        },
        {
          "id": "lineD2_13",
          "cost": 46
        },
        {
          "id": "lineD2_14",
          "cost": 69
        },
        {
          "id": "lineD2_15",
          "cost": 69
        },
        {
          "id": "lineD2_16",
          "cost": 69
        },
        {
          "id": "lineD2_17",
          "cost": 69
        },
        {
          "id": "lineD2_18",
          "cost": 69
        },
        {
          "id": "lineD2_19",
          "cost": 92
        },
        {
          "id": "lineD2_20",
          "cost": 92
        },
        {
          "id": "lineD2_21",
          "cost": 115
        },
        {
          "id": "lineD2_22",
          "cost": 138
        },
        {
          "id": "lineD2_23",
          "cost": 138
        },
        {
          "id": "lineD2_24",
          "cost": 138
        },
        {
          "id": "lineD2_25",
          "cost": 138
        },
        {
          "id": "lineD2_26",
          "cost": 138
        },
        {
          "id": "lineD2_27",
          "cost": 161
        },
        {
          "id": "lineD2_28",
          "cost": 161
        },
        {
          "id": "lineD2_29",
          "cost": 161
        },
        {
          "id": "lineD2_30",
          "cost": 161
        },
        {
          "id": "lineD2_31",
          "cost": 161
        },
        {
          "id": "lineD2_32",
          "cost": 184
        },
        {
          "id": "lineD2_33",
          "cost": 184
        },
        {
          "id": "lineD2_34",
          "cost": 184
        },
        {
          "id": "lineD2_35",
          "cost": 184
        },
        {
          "id": "lineD2_36",
          "cost": 207
        },
        {
          "id": "lineD2_37",
          "cost": 207
        },
        {
          "id": "lineD2_38",
          "cost": 207
        }
      ]
    },
    {
      "fromId": "lineD2_3",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 23
        },
        {
          "id": "lineD2_2",
          "cost": 23
        },
        {
          "id": "lineD2_3",
          "cost": 0
        },
        {
          "id": "lineD2_4",
          "cost": 23
        },
        {
          "id": "lineD2_5",
          "cost": 23
        },
        {
          "id": "lineD2_6",
          "cost": 23
        },
        {
          "id": "lineD2_7",
          "cost": 23
        },
        {
          "id": "lineD2_8",
          "cost": 46
        },
        {
          "id": "lineD2_9",
          "cost": 46
        },
        {
          "id": "lineD2_10",
          "cost": 46
        },
        {
          "id": "lineD2_11",
          "cost": 46
        },
        {
          "id": "lineD2_12",
          "cost": 46
        },
        {
          "id": "lineD2_13",
          "cost": 46
        },
        {
          "id": "lineD2_14",
          "cost": 69
        },
        {
          "id": "lineD2_15",
          "cost": 69
        },
        {
          "id": "lineD2_16",
          "cost": 69
        },
        {
          "id": "lineD2_17",
          "cost": 69
        },
        {
          "id": "lineD2_18",
          "cost": 69
        },
        {
          "id": "lineD2_19",
          "cost": 92
        },
        {
          "id": "lineD2_20",
          "cost": 92
        },
        {
          "id": "lineD2_21",
          "cost": 115
        },
        {
          "id": "lineD2_22",
          "cost": 138
        },
        {
          "id": "lineD2_23",
          "cost": 138
        },
        {
          "id": "lineD2_24",
          "cost": 138
        },
        {
          "id": "lineD2_25",
          "cost": 138
        },
        {
          "id": "lineD2_26",
          "cost": 138
        },
        {
          "id": "lineD2_27",
          "cost": 161
        },
        {
          "id": "lineD2_28",
          "cost": 161
        },
        {
          "id": "lineD2_29",
          "cost": 161
        },
        {
          "id": "lineD2_30",
          "cost": 161
        },
        {
          "id": "lineD2_31",
          "cost": 161
        },
        {
          "id": "lineD2_32",
          "cost": 184
        },
        {
          "id": "lineD2_33",
          "cost": 184
        },
        {
          "id": "lineD2_34",
          "cost": 184
        },
        {
          "id": "lineD2_35",
          "cost": 184
        },
        {
          "id": "lineD2_36",
          "cost": 207
        },
        {
          "id": "lineD2_37",
          "cost": 207
        },
        {
          "id": "lineD2_38",
          "cost": 207
        }
      ]
    },
    {
      "fromId": "lineD2_4",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 23
        },
        {
          "id": "lineD2_2",
          "cost": 23
        },
        {
          "id": "lineD2_3",
          "cost": 23
        },
        {
          "id": "lineD2_4",
          "cost": 0
        },
        {
          "id": "lineD2_5",
          "cost": 23
        },
        {
          "id": "lineD2_6",
          "cost": 23
        },
        {
          "id": "lineD2_7",
          "cost": 23
        },
        {
          "id": "lineD2_8",
          "cost": 23
        },
        {
          "id": "lineD2_9",
          "cost": 23
        },
        {
          "id": "lineD2_10",
          "cost": 23
        },
        {
          "id": "lineD2_11",
          "cost": 23
        },
        {
          "id": "lineD2_12",
          "cost": 23
        },
        {
          "id": "lineD2_13",
          "cost": 23
        },
        {
          "id": "lineD2_14",
          "cost": 46
        },
        {
          "id": "lineD2_15",
          "cost": 46
        },
        {
          "id": "lineD2_16",
          "cost": 46
        },
        {
          "id": "lineD2_17",
          "cost": 46
        },
        {
          "id": "lineD2_18",
          "cost": 46
        },
        {
          "id": "lineD2_19",
          "cost": 69
        },
        {
          "id": "lineD2_20",
          "cost": 69
        },
        {
          "id": "lineD2_21",
          "cost": 92
        },
        {
          "id": "lineD2_22",
          "cost": 115
        },
        {
          "id": "lineD2_23",
          "cost": 115
        },
        {
          "id": "lineD2_24",
          "cost": 115
        },
        {
          "id": "lineD2_25",
          "cost": 115
        },
        {
          "id": "lineD2_26",
          "cost": 115
        },
        {
          "id": "lineD2_27",
          "cost": 138
        },
        {
          "id": "lineD2_28",
          "cost": 138
        },
        {
          "id": "lineD2_29",
          "cost": 138
        },
        {
          "id": "lineD2_30",
          "cost": 138
        },
        {
          "id": "lineD2_31",
          "cost": 138
        },
        {
          "id": "lineD2_32",
          "cost": 161
        },
        {
          "id": "lineD2_33",
          "cost": 161
        },
        {
          "id": "lineD2_34",
          "cost": 161
        },
        {
          "id": "lineD2_35",
          "cost": 161
        },
        {
          "id": "lineD2_36",
          "cost": 184
        },
        {
          "id": "lineD2_37",
          "cost": 184
        },
        {
          "id": "lineD2_38",
          "cost": 184
        }
      ]
    },
    {
      "fromId": "lineD2_5",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 23
        },
        {
          "id": "lineD2_2",
          "cost": 23
        },
        {
          "id": "lineD2_3",
          "cost": 23
        },
        {
          "id": "lineD2_4",
          "cost": 23
        },
        {
          "id": "lineD2_5",
          "cost": 0
        },
        {
          "id": "lineD2_6",
          "cost": 23
        },
        {
          "id": "lineD2_7",
          "cost": 23
        },
        {
          "id": "lineD2_8",
          "cost": 23
        },
        {
          "id": "lineD2_9",
          "cost": 23
        },
        {
          "id": "lineD2_10",
          "cost": 23
        },
        {
          "id": "lineD2_11",
          "cost": 23
        },
        {
          "id": "lineD2_12",
          "cost": 23
        },
        {
          "id": "lineD2_13",
          "cost": 23
        },
        {
          "id": "lineD2_14",
          "cost": 46
        },
        {
          "id": "lineD2_15",
          "cost": 46
        },
        {
          "id": "lineD2_16",
          "cost": 46
        },
        {
          "id": "lineD2_17",
          "cost": 46
        },
        {
          "id": "lineD2_18",
          "cost": 46
        },
        {
          "id": "lineD2_19",
          "cost": 69
        },
        {
          "id": "lineD2_20",
          "cost": 69
        },
        {
          "id": "lineD2_21",
          "cost": 92
        },
        {
          "id": "lineD2_22",
          "cost": 115
        },
        {
          "id": "lineD2_23",
          "cost": 115
        },
        {
          "id": "lineD2_24",
          "cost": 115
        },
        {
          "id": "lineD2_25",
          "cost": 115
        },
        {
          "id": "lineD2_26",
          "cost": 115
        },
        {
          "id": "lineD2_27",
          "cost": 138
        },
        {
          "id": "lineD2_28",
          "cost": 138
        },
        {
          "id": "lineD2_29",
          "cost": 138
        },
        {
          "id": "lineD2_30",
          "cost": 138
        },
        {
          "id": "lineD2_31",
          "cost": 138
        },
        {
          "id": "lineD2_32",
          "cost": 161
        },
        {
          "id": "lineD2_33",
          "cost": 161
        },
        {
          "id": "lineD2_34",
          "cost": 161
        },
        {
          "id": "lineD2_35",
          "cost": 161
        },
        {
          "id": "lineD2_36",
          "cost": 184
        },
        {
          "id": "lineD2_37",
          "cost": 184
        },
        {
          "id": "lineD2_38",
          "cost": 184
        }
      ]
    },
    {
      "fromId": "lineD2_6",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 23
        },
        {
          "id": "lineD2_2",
          "cost": 23
        },
        {
          "id": "lineD2_3",
          "cost": 23
        },
        {
          "id": "lineD2_4",
          "cost": 23
        },
        {
          "id": "lineD2_5",
          "cost": 23
        },
        {
          "id": "lineD2_6",
          "cost": 0
        },
        {
          "id": "lineD2_7",
          "cost": 23
        },
        {
          "id": "lineD2_8",
          "cost": 23
        },
        {
          "id": "lineD2_9",
          "cost": 23
        },
        {
          "id": "lineD2_10",
          "cost": 23
        },
        {
          "id": "lineD2_11",
          "cost": 23
        },
        {
          "id": "lineD2_12",
          "cost": 23
        },
        {
          "id": "lineD2_13",
          "cost": 23
        },
        {
          "id": "lineD2_14",
          "cost": 46
        },
        {
          "id": "lineD2_15",
          "cost": 46
        },
        {
          "id": "lineD2_16",
          "cost": 46
        },
        {
          "id": "lineD2_17",
          "cost": 46
        },
        {
          "id": "lineD2_18",
          "cost": 46
        },
        {
          "id": "lineD2_19",
          "cost": 69
        },
        {
          "id": "lineD2_20",
          "cost": 69
        },
        {
          "id": "lineD2_21",
          "cost": 92
        },
        {
          "id": "lineD2_22",
          "cost": 115
        },
        {
          "id": "lineD2_23",
          "cost": 115
        },
        {
          "id": "lineD2_24",
          "cost": 115
        },
        {
          "id": "lineD2_25",
          "cost": 115
        },
        {
          "id": "lineD2_26",
          "cost": 115
        },
        {
          "id": "lineD2_27",
          "cost": 138
        },
        {
          "id": "lineD2_28",
          "cost": 138
        },
        {
          "id": "lineD2_29",
          "cost": 138
        },
        {
          "id": "lineD2_30",
          "cost": 138
        },
        {
          "id": "lineD2_31",
          "cost": 138
        },
        {
          "id": "lineD2_32",
          "cost": 161
        },
        {
          "id": "lineD2_33",
          "cost": 161
        },
        {
          "id": "lineD2_34",
          "cost": 161
        },
        {
          "id": "lineD2_35",
          "cost": 161
        },
        {
          "id": "lineD2_36",
          "cost": 184
        },
        {
          "id": "lineD2_37",
          "cost": 184
        },
        {
          "id": "lineD2_38",
          "cost": 184
        }
      ]
    },
    {
      "fromId": "lineD2_7",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 23
        },
        {
          "id": "lineD2_2",
          "cost": 23
        },
        {
          "id": "lineD2_3",
          "cost": 23
        },
        {
          "id": "lineD2_4",
          "cost": 23
        },
        {
          "id": "lineD2_5",
          "cost": 23
        },
        {
          "id": "lineD2_6",
          "cost": 23
        },
        {
          "id": "lineD2_7",
          "cost": 0
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 138
        },
        {
          "id": "lineD2_36",
          "cost": 161
        },
        {
          "id": "lineD2_37",
          "cost": 161
        },
        {
          "id": "lineD2_38",
          "cost": 161
        }
      ]
    },
    {
      "fromId": "lineD2_8",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 46
        },
        {
          "id": "lineD2_2",
          "cost": 46
        },
        {
          "id": "lineD2_3",
          "cost": 46
        },
        {
          "id": "lineD2_4",
          "cost": 23
        },
        {
          "id": "lineD2_5",
          "cost": 23
        },
        {
          "id": "lineD2_6",
          "cost": 23
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 0
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 138
        },
        {
          "id": "lineD2_36",
          "cost": 161
        },
        {
          "id": "lineD2_37",
          "cost": 161
        },
        {
          "id": "lineD2_38",
          "cost": 161
        }
      ]
    },
    {
      "fromId": "lineD2_9",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 46
        },
        {
          "id": "lineD2_2",
          "cost": 46
        },
        {
          "id": "lineD2_3",
          "cost": 46
        },
        {
          "id": "lineD2_4",
          "cost": 23
        },
        {
          "id": "lineD2_5",
          "cost": 23
        },
        {
          "id": "lineD2_6",
          "cost": 23
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 0
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 138
        },
        {
          "id": "lineD2_36",
          "cost": 161
        },
        {
          "id": "lineD2_37",
          "cost": 161
        },
        {
          "id": "lineD2_38",
          "cost": 161
        }
      ]
    },
    {
      "fromId": "lineD2_10",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 46
        },
        {
          "id": "lineD2_2",
          "cost": 46
        },
        {
          "id": "lineD2_3",
          "cost": 46
        },
        {
          "id": "lineD2_4",
          "cost": 23
        },
        {
          "id": "lineD2_5",
          "cost": 23
        },
        {
          "id": "lineD2_6",
          "cost": 23
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 0
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 138
        },
        {
          "id": "lineD2_36",
          "cost": 161
        },
        {
          "id": "lineD2_37",
          "cost": 161
        },
        {
          "id": "lineD2_38",
          "cost": 161
        }
      ]
    },
    {
      "fromId": "lineD2_11",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 46
        },
        {
          "id": "lineD2_2",
          "cost": 46
        },
        {
          "id": "lineD2_3",
          "cost": 46
        },
        {
          "id": "lineD2_4",
          "cost": 23
        },
        {
          "id": "lineD2_5",
          "cost": 23
        },
        {
          "id": "lineD2_6",
          "cost": 23
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 0
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 138
        },
        {
          "id": "lineD2_36",
          "cost": 161
        },
        {
          "id": "lineD2_37",
          "cost": 161
        },
        {
          "id": "lineD2_38",
          "cost": 161
        }
      ]
    },
    {
      "fromId": "lineD2_12",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 46
        },
        {
          "id": "lineD2_2",
          "cost": 46
        },
        {
          "id": "lineD2_3",
          "cost": 46
        },
        {
          "id": "lineD2_4",
          "cost": 23
        },
        {
          "id": "lineD2_5",
          "cost": 23
        },
        {
          "id": "lineD2_6",
          "cost": 23
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 0
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 138
        },
        {
          "id": "lineD2_36",
          "cost": 161
        },
        {
          "id": "lineD2_37",
          "cost": 161
        },
        {
          "id": "lineD2_38",
          "cost": 161
        }
      ]
    },
    {
      "fromId": "lineD2_13",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 46
        },
        {
          "id": "lineD2_2",
          "cost": 46
        },
        {
          "id": "lineD2_3",
          "cost": 46
        },
        {
          "id": "lineD2_4",
          "cost": 23
        },
        {
          "id": "lineD2_5",
          "cost": 23
        },
        {
          "id": "lineD2_6",
          "cost": 23
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 0
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 138
        },
        {
          "id": "lineD2_36",
          "cost": 161
        },
        {
          "id": "lineD2_37",
          "cost": 161
        },
        {
          "id": "lineD2_38",
          "cost": 161
        }
      ]
    },
    {
      "fromId": "lineD2_14",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 69
        },
        {
          "id": "lineD2_2",
          "cost": 69
        },
        {
          "id": "lineD2_3",
          "cost": 69
        },
        {
          "id": "lineD2_4",
          "cost": 46
        },
        {
          "id": "lineD2_5",
          "cost": 46
        },
        {
          "id": "lineD2_6",
          "cost": 46
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 0
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 115
        },
        {
          "id": "lineD2_36",
          "cost": 138
        },
        {
          "id": "lineD2_37",
          "cost": 138
        },
        {
          "id": "lineD2_38",
          "cost": 138
        }
      ]
    },
    {
      "fromId": "lineD2_15",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 69
        },
        {
          "id": "lineD2_2",
          "cost": 69
        },
        {
          "id": "lineD2_3",
          "cost": 69
        },
        {
          "id": "lineD2_4",
          "cost": 46
        },
        {
          "id": "lineD2_5",
          "cost": 46
        },
        {
          "id": "lineD2_6",
          "cost": 46
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 0
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 115
        },
        {
          "id": "lineD2_36",
          "cost": 138
        },
        {
          "id": "lineD2_37",
          "cost": 138
        },
        {
          "id": "lineD2_38",
          "cost": 138
        }
      ]
    },
    {
      "fromId": "lineD2_16",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 69
        },
        {
          "id": "lineD2_2",
          "cost": 69
        },
        {
          "id": "lineD2_3",
          "cost": 69
        },
        {
          "id": "lineD2_4",
          "cost": 46
        },
        {
          "id": "lineD2_5",
          "cost": 46
        },
        {
          "id": "lineD2_6",
          "cost": 46
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 0
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 115
        },
        {
          "id": "lineD2_36",
          "cost": 138
        },
        {
          "id": "lineD2_37",
          "cost": 138
        },
        {
          "id": "lineD2_38",
          "cost": 138
        }
      ]
    },
    {
      "fromId": "lineD2_17",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 69
        },
        {
          "id": "lineD2_2",
          "cost": 69
        },
        {
          "id": "lineD2_3",
          "cost": 69
        },
        {
          "id": "lineD2_4",
          "cost": 46
        },
        {
          "id": "lineD2_5",
          "cost": 46
        },
        {
          "id": "lineD2_6",
          "cost": 46
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 0
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 115
        },
        {
          "id": "lineD2_36",
          "cost": 138
        },
        {
          "id": "lineD2_37",
          "cost": 138
        },
        {
          "id": "lineD2_38",
          "cost": 138
        }
      ]
    },
    {
      "fromId": "lineD2_18",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 69
        },
        {
          "id": "lineD2_2",
          "cost": 69
        },
        {
          "id": "lineD2_3",
          "cost": 69
        },
        {
          "id": "lineD2_4",
          "cost": 46
        },
        {
          "id": "lineD2_5",
          "cost": 46
        },
        {
          "id": "lineD2_6",
          "cost": 46
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 0
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 92
        },
        {
          "id": "lineD2_36",
          "cost": 115
        },
        {
          "id": "lineD2_37",
          "cost": 115
        },
        {
          "id": "lineD2_38",
          "cost": 115
        }
      ]
    },
    {
      "fromId": "lineD2_19",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 92
        },
        {
          "id": "lineD2_2",
          "cost": 92
        },
        {
          "id": "lineD2_3",
          "cost": 92
        },
        {
          "id": "lineD2_4",
          "cost": 69
        },
        {
          "id": "lineD2_5",
          "cost": 69
        },
        {
          "id": "lineD2_6",
          "cost": 69
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 0
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 69
        },
        {
          "id": "lineD2_36",
          "cost": 92
        },
        {
          "id": "lineD2_37",
          "cost": 92
        },
        {
          "id": "lineD2_38",
          "cost": 92
        }
      ]
    },
    {
      "fromId": "lineD2_20",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 92
        },
        {
          "id": "lineD2_2",
          "cost": 92
        },
        {
          "id": "lineD2_3",
          "cost": 92
        },
        {
          "id": "lineD2_4",
          "cost": 69
        },
        {
          "id": "lineD2_5",
          "cost": 69
        },
        {
          "id": "lineD2_6",
          "cost": 69
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 0
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 69
        },
        {
          "id": "lineD2_36",
          "cost": 92
        },
        {
          "id": "lineD2_37",
          "cost": 92
        },
        {
          "id": "lineD2_38",
          "cost": 92
        }
      ]
    },
    {
      "fromId": "lineD2_21",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 115
        },
        {
          "id": "lineD2_2",
          "cost": 115
        },
        {
          "id": "lineD2_3",
          "cost": 115
        },
        {
          "id": "lineD2_4",
          "cost": 92
        },
        {
          "id": "lineD2_5",
          "cost": 92
        },
        {
          "id": "lineD2_6",
          "cost": 92
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 0
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 46
        },
        {
          "id": "lineD2_36",
          "cost": 69
        },
        {
          "id": "lineD2_37",
          "cost": 69
        },
        {
          "id": "lineD2_38",
          "cost": 69
        }
      ]
    },
    {
      "fromId": "lineD2_22",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 138
        },
        {
          "id": "lineD2_2",
          "cost": 138
        },
        {
          "id": "lineD2_3",
          "cost": 138
        },
        {
          "id": "lineD2_4",
          "cost": 115
        },
        {
          "id": "lineD2_5",
          "cost": 115
        },
        {
          "id": "lineD2_6",
          "cost": 115
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 0
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 46
        },
        {
          "id": "lineD2_36",
          "cost": 69
        },
        {
          "id": "lineD2_37",
          "cost": 69
        },
        {
          "id": "lineD2_38",
          "cost": 69
        }
      ]
    },
    {
      "fromId": "lineD2_23",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 138
        },
        {
          "id": "lineD2_2",
          "cost": 138
        },
        {
          "id": "lineD2_3",
          "cost": 138
        },
        {
          "id": "lineD2_4",
          "cost": 115
        },
        {
          "id": "lineD2_5",
          "cost": 115
        },
        {
          "id": "lineD2_6",
          "cost": 115
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 0
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 46
        },
        {
          "id": "lineD2_36",
          "cost": 69
        },
        {
          "id": "lineD2_37",
          "cost": 69
        },
        {
          "id": "lineD2_38",
          "cost": 69
        }
      ]
    },
    {
      "fromId": "lineD2_24",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 138
        },
        {
          "id": "lineD2_2",
          "cost": 138
        },
        {
          "id": "lineD2_3",
          "cost": 138
        },
        {
          "id": "lineD2_4",
          "cost": 115
        },
        {
          "id": "lineD2_5",
          "cost": 115
        },
        {
          "id": "lineD2_6",
          "cost": 115
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 0
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 46
        },
        {
          "id": "lineD2_36",
          "cost": 69
        },
        {
          "id": "lineD2_37",
          "cost": 69
        },
        {
          "id": "lineD2_38",
          "cost": 69
        }
      ]
    },
    {
      "fromId": "lineD2_25",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 138
        },
        {
          "id": "lineD2_2",
          "cost": 138
        },
        {
          "id": "lineD2_3",
          "cost": 138
        },
        {
          "id": "lineD2_4",
          "cost": 115
        },
        {
          "id": "lineD2_5",
          "cost": 115
        },
        {
          "id": "lineD2_6",
          "cost": 115
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 0
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 46
        },
        {
          "id": "lineD2_36",
          "cost": 69
        },
        {
          "id": "lineD2_37",
          "cost": 69
        },
        {
          "id": "lineD2_38",
          "cost": 69
        }
      ]
    },
    {
      "fromId": "lineD2_26",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 138
        },
        {
          "id": "lineD2_2",
          "cost": 138
        },
        {
          "id": "lineD2_3",
          "cost": 138
        },
        {
          "id": "lineD2_4",
          "cost": 115
        },
        {
          "id": "lineD2_5",
          "cost": 115
        },
        {
          "id": "lineD2_6",
          "cost": 115
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 0
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 46
        },
        {
          "id": "lineD2_36",
          "cost": 69
        },
        {
          "id": "lineD2_37",
          "cost": 69
        },
        {
          "id": "lineD2_38",
          "cost": 69
        }
      ]
    },
    {
      "fromId": "lineD2_27",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 161
        },
        {
          "id": "lineD2_2",
          "cost": 161
        },
        {
          "id": "lineD2_3",
          "cost": 161
        },
        {
          "id": "lineD2_4",
          "cost": 138
        },
        {
          "id": "lineD2_5",
          "cost": 138
        },
        {
          "id": "lineD2_6",
          "cost": 138
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 0
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 46
        },
        {
          "id": "lineD2_36",
          "cost": 69
        },
        {
          "id": "lineD2_37",
          "cost": 69
        },
        {
          "id": "lineD2_38",
          "cost": 69
        }
      ]
    },
    {
      "fromId": "lineD2_28",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 161
        },
        {
          "id": "lineD2_2",
          "cost": 161
        },
        {
          "id": "lineD2_3",
          "cost": 161
        },
        {
          "id": "lineD2_4",
          "cost": 138
        },
        {
          "id": "lineD2_5",
          "cost": 138
        },
        {
          "id": "lineD2_6",
          "cost": 138
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 0
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 23
        },
        {
          "id": "lineD2_36",
          "cost": 46
        },
        {
          "id": "lineD2_37",
          "cost": 46
        },
        {
          "id": "lineD2_38",
          "cost": 46
        }
      ]
    },
    {
      "fromId": "lineD2_29",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 161
        },
        {
          "id": "lineD2_2",
          "cost": 161
        },
        {
          "id": "lineD2_3",
          "cost": 161
        },
        {
          "id": "lineD2_4",
          "cost": 138
        },
        {
          "id": "lineD2_5",
          "cost": 138
        },
        {
          "id": "lineD2_6",
          "cost": 138
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 0
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 23
        },
        {
          "id": "lineD2_36",
          "cost": 46
        },
        {
          "id": "lineD2_37",
          "cost": 46
        },
        {
          "id": "lineD2_38",
          "cost": 46
        }
      ]
    },
    {
      "fromId": "lineD2_30",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 161
        },
        {
          "id": "lineD2_2",
          "cost": 161
        },
        {
          "id": "lineD2_3",
          "cost": 161
        },
        {
          "id": "lineD2_4",
          "cost": 138
        },
        {
          "id": "lineD2_5",
          "cost": 138
        },
        {
          "id": "lineD2_6",
          "cost": 138
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 0
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 23
        },
        {
          "id": "lineD2_36",
          "cost": 46
        },
        {
          "id": "lineD2_37",
          "cost": 46
        },
        {
          "id": "lineD2_38",
          "cost": 46
        }
      ]
    },
    {
      "fromId": "lineD2_31",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 161
        },
        {
          "id": "lineD2_2",
          "cost": 161
        },
        {
          "id": "lineD2_3",
          "cost": 161
        },
        {
          "id": "lineD2_4",
          "cost": 138
        },
        {
          "id": "lineD2_5",
          "cost": 138
        },
        {
          "id": "lineD2_6",
          "cost": 138
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 0
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 23
        },
        {
          "id": "lineD2_36",
          "cost": 46
        },
        {
          "id": "lineD2_37",
          "cost": 46
        },
        {
          "id": "lineD2_38",
          "cost": 46
        }
      ]
    },
    {
      "fromId": "lineD2_32",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 184
        },
        {
          "id": "lineD2_2",
          "cost": 184
        },
        {
          "id": "lineD2_3",
          "cost": 184
        },
        {
          "id": "lineD2_4",
          "cost": 161
        },
        {
          "id": "lineD2_5",
          "cost": 161
        },
        {
          "id": "lineD2_6",
          "cost": 161
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 0
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 23
        },
        {
          "id": "lineD2_36",
          "cost": 23
        },
        {
          "id": "lineD2_37",
          "cost": 23
        },
        {
          "id": "lineD2_38",
          "cost": 23
        }
      ]
    },
    {
      "fromId": "lineD2_33",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 184
        },
        {
          "id": "lineD2_2",
          "cost": 184
        },
        {
          "id": "lineD2_3",
          "cost": 184
        },
        {
          "id": "lineD2_4",
          "cost": 161
        },
        {
          "id": "lineD2_5",
          "cost": 161
        },
        {
          "id": "lineD2_6",
          "cost": 161
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 0
        },
        {
          "id": "lineD2_34",
          "cost": 36
        },
        {
          "id": "lineD2_35",
          "cost": 23
        },
        {
          "id": "lineD2_36",
          "cost": 23
        },
        {
          "id": "lineD2_37",
          "cost": 23
        },
        {
          "id": "lineD2_38",
          "cost": 23
        }
      ]
    },
    {
      "fromId": "lineD2_34",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 184
        },
        {
          "id": "lineD2_2",
          "cost": 184
        },
        {
          "id": "lineD2_3",
          "cost": 184
        },
        {
          "id": "lineD2_4",
          "cost": 161
        },
        {
          "id": "lineD2_5",
          "cost": 161
        },
        {
          "id": "lineD2_6",
          "cost": 161
        },
        {
          "id": "lineD2_7",
          "cost": 36
        },
        {
          "id": "lineD2_8",
          "cost": 36
        },
        {
          "id": "lineD2_9",
          "cost": 36
        },
        {
          "id": "lineD2_10",
          "cost": 36
        },
        {
          "id": "lineD2_11",
          "cost": 36
        },
        {
          "id": "lineD2_12",
          "cost": 36
        },
        {
          "id": "lineD2_13",
          "cost": 36
        },
        {
          "id": "lineD2_14",
          "cost": 36
        },
        {
          "id": "lineD2_15",
          "cost": 36
        },
        {
          "id": "lineD2_16",
          "cost": 36
        },
        {
          "id": "lineD2_17",
          "cost": 36
        },
        {
          "id": "lineD2_18",
          "cost": 36
        },
        {
          "id": "lineD2_19",
          "cost": 36
        },
        {
          "id": "lineD2_20",
          "cost": 36
        },
        {
          "id": "lineD2_21",
          "cost": 36
        },
        {
          "id": "lineD2_22",
          "cost": 36
        },
        {
          "id": "lineD2_23",
          "cost": 36
        },
        {
          "id": "lineD2_24",
          "cost": 36
        },
        {
          "id": "lineD2_25",
          "cost": 36
        },
        {
          "id": "lineD2_26",
          "cost": 36
        },
        {
          "id": "lineD2_27",
          "cost": 36
        },
        {
          "id": "lineD2_28",
          "cost": 36
        },
        {
          "id": "lineD2_29",
          "cost": 36
        },
        {
          "id": "lineD2_30",
          "cost": 36
        },
        {
          "id": "lineD2_31",
          "cost": 36
        },
        {
          "id": "lineD2_32",
          "cost": 36
        },
        {
          "id": "lineD2_33",
          "cost": 36
        },
        {
          "id": "lineD2_34",
          "cost": 0
        },
        {
          "id": "lineD2_35",
          "cost": 23
        },
        {
          "id": "lineD2_36",
          "cost": 23
        },
        {
          "id": "lineD2_37",
          "cost": 23
        },
        {
          "id": "lineD2_38",
          "cost": 23
        }
      ]
    },
    {
      "fromId": "lineD2_35",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 184
        },
        {
          "id": "lineD2_2",
          "cost": 184
        },
        {
          "id": "lineD2_3",
          "cost": 184
        },
        {
          "id": "lineD2_4",
          "cost": 161
        },
        {
          "id": "lineD2_5",
          "cost": 161
        },
        {
          "id": "lineD2_6",
          "cost": 161
        },
        {
          "id": "lineD2_7",
          "cost": 138
        },
        {
          "id": "lineD2_8",
          "cost": 138
        },
        {
          "id": "lineD2_9",
          "cost": 138
        },
        {
          "id": "lineD2_10",
          "cost": 138
        },
        {
          "id": "lineD2_11",
          "cost": 138
        },
        {
          "id": "lineD2_12",
          "cost": 138
        },
        {
          "id": "lineD2_13",
          "cost": 138
        },
        {
          "id": "lineD2_14",
          "cost": 115
        },
        {
          "id": "lineD2_15",
          "cost": 115
        },
        {
          "id": "lineD2_16",
          "cost": 115
        },
        {
          "id": "lineD2_17",
          "cost": 115
        },
        {
          "id": "lineD2_18",
          "cost": 92
        },
        {
          "id": "lineD2_19",
          "cost": 69
        },
        {
          "id": "lineD2_20",
          "cost": 69
        },
        {
          "id": "lineD2_21",
          "cost": 46
        },
        {
          "id": "lineD2_22",
          "cost": 46
        },
        {
          "id": "lineD2_23",
          "cost": 46
        },
        {
          "id": "lineD2_24",
          "cost": 46
        },
        {
          "id": "lineD2_25",
          "cost": 46
        },
        {
          "id": "lineD2_26",
          "cost": 46
        },
        {
          "id": "lineD2_27",
          "cost": 46
        },
        {
          "id": "lineD2_28",
          "cost": 23
        },
        {
          "id": "lineD2_29",
          "cost": 23
        },
        {
          "id": "lineD2_30",
          "cost": 23
        },
        {
          "id": "lineD2_31",
          "cost": 23
        },
        {
          "id": "lineD2_32",
          "cost": 23
        },
        {
          "id": "lineD2_33",
          "cost": 23
        },
        {
          "id": "lineD2_34",
          "cost": 23
        },
        {
          "id": "lineD2_35",
          "cost": 0
        },
        {
          "id": "lineD2_36",
          "cost": 23
        },
        {
          "id": "lineD2_37",
          "cost": 23
        },
        {
          "id": "lineD2_38",
          "cost": 23
        }
      ]
    },
    {
      "fromId": "lineD2_36",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 207
        },
        {
          "id": "lineD2_2",
          "cost": 207
        },
        {
          "id": "lineD2_3",
          "cost": 207
        },
        {
          "id": "lineD2_4",
          "cost": 184
        },
        {
          "id": "lineD2_5",
          "cost": 184
        },
        {
          "id": "lineD2_6",
          "cost": 184
        },
        {
          "id": "lineD2_7",
          "cost": 161
        },
        {
          "id": "lineD2_8",
          "cost": 161
        },
        {
          "id": "lineD2_9",
          "cost": 161
        },
        {
          "id": "lineD2_10",
          "cost": 161
        },
        {
          "id": "lineD2_11",
          "cost": 161
        },
        {
          "id": "lineD2_12",
          "cost": 161
        },
        {
          "id": "lineD2_13",
          "cost": 161
        },
        {
          "id": "lineD2_14",
          "cost": 138
        },
        {
          "id": "lineD2_15",
          "cost": 138
        },
        {
          "id": "lineD2_16",
          "cost": 138
        },
        {
          "id": "lineD2_17",
          "cost": 138
        },
        {
          "id": "lineD2_18",
          "cost": 115
        },
        {
          "id": "lineD2_19",
          "cost": 92
        },
        {
          "id": "lineD2_20",
          "cost": 92
        },
        {
          "id": "lineD2_21",
          "cost": 69
        },
        {
          "id": "lineD2_22",
          "cost": 69
        },
        {
          "id": "lineD2_23",
          "cost": 69
        },
        {
          "id": "lineD2_24",
          "cost": 69
        },
        {
          "id": "lineD2_25",
          "cost": 69
        },
        {
          "id": "lineD2_26",
          "cost": 69
        },
        {
          "id": "lineD2_27",
          "cost": 69
        },
        {
          "id": "lineD2_28",
          "cost": 46
        },
        {
          "id": "lineD2_29",
          "cost": 46
        },
        {
          "id": "lineD2_30",
          "cost": 46
        },
        {
          "id": "lineD2_31",
          "cost": 46
        },
        {
          "id": "lineD2_32",
          "cost": 23
        },
        {
          "id": "lineD2_33",
          "cost": 23
        },
        {
          "id": "lineD2_34",
          "cost": 23
        },
        {
          "id": "lineD2_35",
          "cost": 23
        },
        {
          "id": "lineD2_36",
          "cost": 0
        },
        {
          "id": "lineD2_37",
          "cost": 23
        },
        {
          "id": "lineD2_38",
          "cost": 23
        }
      ]
    },
    {
      "fromId": "lineD2_37",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 207
        },
        {
          "id": "lineD2_2",
          "cost": 207
        },
        {
          "id": "lineD2_3",
          "cost": 207
        },
        {
          "id": "lineD2_4",
          "cost": 184
        },
        {
          "id": "lineD2_5",
          "cost": 184
        },
        {
          "id": "lineD2_6",
          "cost": 184
        },
        {
          "id": "lineD2_7",
          "cost": 161
        },
        {
          "id": "lineD2_8",
          "cost": 161
        },
        {
          "id": "lineD2_9",
          "cost": 161
        },
        {
          "id": "lineD2_10",
          "cost": 161
        },
        {
          "id": "lineD2_11",
          "cost": 161
        },
        {
          "id": "lineD2_12",
          "cost": 161
        },
        {
          "id": "lineD2_13",
          "cost": 161
        },
        {
          "id": "lineD2_14",
          "cost": 138
        },
        {
          "id": "lineD2_15",
          "cost": 138
        },
        {
          "id": "lineD2_16",
          "cost": 138
        },
        {
          "id": "lineD2_17",
          "cost": 138
        },
        {
          "id": "lineD2_18",
          "cost": 115
        },
        {
          "id": "lineD2_19",
          "cost": 92
        },
        {
          "id": "lineD2_20",
          "cost": 92
        },
        {
          "id": "lineD2_21",
          "cost": 69
        },
        {
          "id": "lineD2_22",
          "cost": 69
        },
        {
          "id": "lineD2_23",
          "cost": 69
        },
        {
          "id": "lineD2_24",
          "cost": 69
        },
        {
          "id": "lineD2_25",
          "cost": 69
        },
        {
          "id": "lineD2_26",
          "cost": 69
        },
        {
          "id": "lineD2_27",
          "cost": 69
        },
        {
          "id": "lineD2_28",
          "cost": 46
        },
        {
          "id": "lineD2_29",
          "cost": 46
        },
        {
          "id": "lineD2_30",
          "cost": 46
        },
        {
          "id": "lineD2_31",
          "cost": 46
        },
        {
          "id": "lineD2_32",
          "cost": 23
        },
        {
          "id": "lineD2_33",
          "cost": 23
        },
        {
          "id": "lineD2_34",
          "cost": 23
        },
        {
          "id": "lineD2_35",
          "cost": 23
        },
        {
          "id": "lineD2_36",
          "cost": 23
        },
        {
          "id": "lineD2_37",
          "cost": 0
        },
        {
          "id": "lineD2_38",
          "cost": 23
        }
      ]
    },
    {
      "fromId": "lineD2_38",
      "toIds": [
        {
          "id": "lineD2_1",
          "cost": 207
        },
        {
          "id": "lineD2_2",
          "cost": 207
        },
        {
          "id": "lineD2_3",
          "cost": 207
        },
        {
          "id": "lineD2_4",
          "cost": 184
        },
        {
          "id": "lineD2_5",
          "cost": 184
        },
        {
          "id": "lineD2_6",
          "cost": 184
        },
        {
          "id": "lineD2_7",
          "cost": 161
        },
        {
          "id": "lineD2_8",
          "cost": 161
        },
        {
          "id": "lineD2_9",
          "cost": 161
        },
        {
          "id": "lineD2_10",
          "cost": 161
        },
        {
          "id": "lineD2_11",
          "cost": 161
        },
        {
          "id": "lineD2_12",
          "cost": 161
        },
        {
          "id": "lineD2_13",
          "cost": 161
        },
        {
          "id": "lineD2_14",
          "cost": 138
        },
        {
          "id": "lineD2_15",
          "cost": 138
        },
        {
          "id": "lineD2_16",
          "cost": 138
        },
        {
          "id": "lineD2_17",
          "cost": 138
        },
        {
          "id": "lineD2_18",
          "cost": 115
        },
        {
          "id": "lineD2_19",
          "cost": 92
        },
        {
          "id": "lineD2_20",
          "cost": 92
        },
        {
          "id": "lineD2_21",
          "cost": 69
        },
        {
          "id": "lineD2_22",
          "cost": 69
        },
        {
          "id": "lineD2_23",
          "cost": 69
        },
        {
          "id": "lineD2_24",
          "cost": 69
        },
        {
          "id": "lineD2_25",
          "cost": 69
        },
        {
          "id": "lineD2_26",
          "cost": 69
        },
        {
          "id": "lineD2_27",
          "cost": 69
        },
        {
          "id": "lineD2_28",
          "cost": 46
        },
        {
          "id": "lineD2_29",
          "cost": 46
        },
        {
          "id": "lineD2_30",
          "cost": 46
        },
        {
          "id": "lineD2_31",
          "cost": 46
        },
        {
          "id": "lineD2_32",
          "cost": 23
        },
        {
          "id": "lineD2_33",
          "cost": 23
        },
        {
          "id": "lineD2_34",
          "cost": 23
        },
        {
          "id": "lineD2_35",
          "cost": 23
        },
        {
          "id": "lineD2_36",
          "cost": 23
        },
        {
          "id": "lineD2_37",
          "cost": 23
        },
        {
          "id": "lineD2_38",
          "cost": 0
        }
      ]
    }
  ]

var metroLinesWithIds = [
    {
        "id": "line1",
        "name": "Сокольническая линия",
        "color": "e42518",
        "stations": [
            {
                "name": "Бульвар Рокоссовского",
                "id": "line1_1",
                "top": 312,
                "left": 868
            },
            {
                "name": "Черкизовская",
                "id": "line1_2",
                "top": 340,
                "left": 868
            },
            {
                "name": "Преображенская площадь",
                "id": "line1_3",
                "top": 369,
                "left": 868
            },
            {
                "name": "Сокольники",
                "id": "line1_4",
                "top": 401,
                "left": 868
            },
            {
                "name": "Красносельская",
                "id": "line1_5",
                "top": 426,
                "left": 868
            },
            {
                "name": "Комсомольская",
                "id": "line1_6",
                "top": 472,
                "left": 834
            },
            {
                "name": "Красные ворота",
                "id": "line1_7",
                "top": 514,
                "left": 792
            },
            {
                "name": "Чистые пруды",
                "id": "line1_8",
                "top": 553,
                "left": 752,
                "labelTop": -4,
                "labelLeft": 6
            },
            {
                "name": "Лубянка",
                "id": "line1_9",
                "top": 594,
                "left": 712
            },
            {
                "name": "Охотный Ряд",
                "id": "line1_10",
                "top": 675,
                "left": 631
            },
            {
                "name": "Библиотека им. Ленина",
                "id": "line1_11",
                "top": 752,
                "left": 553
            },
            {
                "name": "Кропоткинская",
                "id": "line1_12",
                "top": 789,
                "left": 502
            },
            {
                "name": "Парк культуры",
                "id": "line1_13",
                "top": 803,
                "left": 420
            },
            {
                "name": "Фрунзенская",
                "id": "line1_14",
                "top": 830,
                "left": 393
            },
            {
                "name": "Спортивная",
                "id": "line1_15",
                "top": 857,
                "left": 366
            },
            {
                "name": "Воробьёвы горы",
                "id": "line1_16",
                "top": 884,
                "left": 339
            },
            {
                "name": "Университет",
                "id": "line1_17",
                "top": 910,
                "left": 313
            },
            {
                "name": "Проспект Вернадского",
                "id": "line1_18",
                "top": 936,
                "left": 287
            },
            {
                "name": "Юго-Западная",
                "id": "line1_19",
                "top": 964,
                "left": 259
            },
            {
                "name": "Тропарёво",
                "id": "line1_20",
                "top": 992,
                "left": 231
            },
            {
                "name": "Румянцево",
                "id": "line1_21",
                "top": 992,
                "left": 231
            },
            {
                "name": "Саларьево",
                "id": "line1_22",
                "top": 992,
                "left": 231
            },
            {
                "name": "Филатов Луг",
                "id": "line1_23",
                "top": 992,
                "left": 231
            },
            {
                "name": "Прокшино",
                "id": "line1_24",
                "top": 992,
                "left": 231
            },
            {
                "name": "Ольховая",
                "id": "line1_25",
                "top": 992,
                "left": 231
            },
            {
                "name": "Коммунарка",
                "id": "line1_26",
                "top": 992,
                "left": 231
            }
        ]
    },
    {
        "id": "line2",
        "name": "Замоскворецкая линия",
        "color": "4baf4f",
        "stations": [
            {
                "name": "Ховрино",
                "id": "line2_1",
                "top": 254,
                "left": 373
            },
            {
                "name": "Беломорская",
                "id": "line2_2",
                "top": 254,
                "left": 373
            },
            {
                "name": "Речной вокзал",
                "id": "line2_3",
                "top": 254,
                "left": 373
            },
            {
                "name": "Водный стадион",
                "id": "line2_4",
                "top": 282,
                "left": 373
            },
            {
                "name": "Войковская",
                "id": "line2_5",
                "top": 311,
                "left": 373
            },
            {
                "name": "Сокол",
                "id": "line2_6",
                "top": 339,
                "left": 373
            },
            {
                "name": "Аэропорт",
                "id": "line2_7",
                "top": 368,
                "left": 373
            },
            {
                "name": "Динамо",
                "id": "line2_8",
                "top": 446,
                "left": 401
            },
            {
                "name": "Белорусская",
                "id": "line2_9",
                "top": 483,
                "left": 438
            },
            {
                "name": "Маяковская",
                "id": "line2_10",
                "top": 554,
                "left": 510
            },
            {
                "name": "Тверская",
                "id": "line2_11",
                "top": 593,
                "left": 548
            },
            {
                "name": "Театральная",
                "id": "line2_12",
                "top": 660,
                "left": 616
            },
            {
                "name": "Новокузнецкая",
                "id": "line2_13",
                "top": 808,
                "left": 744
            },
            {
                "name": "Павелецкая",
                "id": "line2_14",
                "top": 899,
                "left": 744
            },
            {
                "name": "Автозаводская",
                "id": "line2_15",
                "top": 945,
                "left": 743
            },
            {
                "name": "Технопарк",
                "id": "line2_16",
                "top": 945,
                "left": 743
            },
            {
                "name": "Коломенская",
                "id": "line2_17",
                "top": 973,
                "left": 743
            },
            {
                "name": "Каширская",
                "id": "line2_18",
                "top": 1008,
                "left": 743
            },
            {
                "name": "Кантемировская",
                "id": "line2_19",
                "top": 1059,
                "left": 743
            },
            {
                "name": "Царицыно",
                "id": "line2_20",
                "top": 1088,
                "left": 744
            },
            {
                "name": "Орехово",
                "id": "line2_21",
                "top": 1116,
                "left": 744
            },
            {
                "name": "Домодедовская",
                "id": "line2_22",
                "top": 1159,
                "left": 787
            },
            {
                "name": "Красногвардейская",
                "id": "line2_23",
                "top": 1159,
                "left": 881
            },
            {
                "name": "Алма-Атинская",
                "id": "line2_24",
                "top": 1159,
                "left": 881
            }
        ]
    },
    {
        "id": "line3",
        "name": "Арбатско-Покровская линия",
        "color": "0572b9",
        "stations": [
            {
                "name": "Пятницкое шоссе",
                "id": "line3_1",
                "top": 339,
                "left": 127
            },
            {
                "name": "Митино",
                "id": "line3_2",
                "top": 339,
                "left": 127
            },
            {
                "name": "Волоколамская",
                "id": "line3_3",
                "top": 368,
                "left": 126
            },
            {
                "name": "Мякинино",
                "id": "line3_4",
                "top": 397,
                "left": 126
            },
            {
                "name": "Строгино",
                "id": "line3_5",
                "top": 425,
                "left": 126
            },
            {
                "name": "Крылатское",
                "id": "line3_6",
                "top": 453,
                "left": 126
            },
            {
                "name": "Молодёжная",
                "id": "line3_7",
                "top": 482,
                "left": 127
            },
            {
                "name": "Кунцевская",
                "id": "line3_8",
                "top": 511,
                "left": 126
            },
            {
                "name": "Славянский бульвар",
                "id": "line3_9",
                "top": 722,
                "left": 171
            },
            {
                "name": "Парк Победы",
                "id": "line3_10",
                "top": 722,
                "left": 283
            },
            {
                "name": "Киевская",
                "id": "line3_11",
                "top": 722,
                "left": 386
            },
            {
                "name": "Смоленская",
                "id": "line3_12",
                "top": 723,
                "left": 453
            },
            {
                "name": "Арбатская",
                "id": "line3_13",
                "top": 722,
                "left": 523
            },
            {
                "name": "Площадь Революции",
                "id": "line3_14",
                "top": 689,
                "left": 644
            },
            {
                "name": "Курская",
                "id": "line3_15",
                "top": 624,
                "left": 857
            },
            {
                "name": "Бауманская",
                "id": "line3_16",
                "top": 583,
                "left": 912
            },
            {
                "name": "Электрозаводская",
                "id": "line3_17",
                "top": 556,
                "left": 939
            },
            {
                "name": "Семёновская",
                "id": "line3_18",
                "top": 454,
                "left": 991
            },
            {
                "name": "Партизанская",
                "id": "line3_19",
                "top": 425,
                "left": 990
            },
            {
                "name": "Измайловская",
                "id": "line3_20",
                "top": 400,
                "left": 991
            },
            {
                "name": "Первомайская",
                "id": "line3_21",
                "top": 368,
                "left": 991
            },
            {
                "name": "Щёлковская",
                "id": "line3_22",
                "top": 340,
                "left": 991
            }
        ]
    },
    {
        "id": "line4",
        "name": "Филёвская линия",
        "color": "24bcee",
        "stations": [
            {
                "name": "Александровский сад",
                "id": "line4_1",
                "top": 722,
                "left": 553
            },
            {
                "name": "Арбатская",
                "id": "line4_2",
                "top": 707,
                "left": 486
            },
            {
                "name": "Смоленская",
                "id": "line4_3",
                "top": 708,
                "left": 439
            },
            {
                "name": "Киевская",
                "id": "line4_4",
                "top": 708,
                "left": 371
            },
            {
                "name": "Студенческая",
                "id": "line4_7",
                "top": 708,
                "left": 306
            },
            {
                "name": "Кутузовская",
                "id": "line4_8",
                "top": 707,
                "left": 217
            },
            {
                "name": "Фили",
                "id": "line4_9",
                "top": 639,
                "left": 141
            },
            {
                "name": "Багратионовская",
                "id": "line4_10",
                "top": 610,
                "left": 141
            },
            {
                "name": "Филевский парк",
                "id": "line4_11",
                "top": 582,
                "left": 141
            },
            {
                "name": "Пионерская",
                "id": "line4_12",
                "top": 553,
                "left": 141
            },
            {
                "name": "Кунцевская",
                "id": "line4_13",
                "top": 582,
                "left": 141
            },
        ]
    },
     // Хак, чтобы алгоритму было проще
    {
        "id": "line4",
        "name": "Филёвская линия",
        "color": "24bcee",
        "stations": [
            {
                "name": "Выставочная",
                "id": "line4_5",
                "top": 658,
                "left": 276
            },
            {
                "name": "Международная",
                "id": "line4_6",
                "top": 629,
                "left": 276
            }
        ]
    },
    {
        "id": "line5",
        "name": "Кольцевая линия",
        "color": "925233",
        "isCircle": true,
        "stations": [
            {
                "name": "Комсомольская",
                "id": "line5_1",
                "top": 486,
                "left": 819,
                "labelTop": -15,
                "labelLeft": 16
            },
            {
                "name": "Курская",
                "id": "line5_2",
                "top": 625,
                "left": 885,
            },
            {
                "name": "Таганская",
                "id": "line5_3",
                "top": 736,
                "left": 874,
            },
            {
                "name": "Павелецкая",
                "id": "line5_4",
                "top": 879,
                "left": 744,
            },
            {
                "name": "Добрынинская",
                "id": "line5_5",
                "top": 896,
                "left": 590,
            },
            {
                "name": "Октябрьская",
                "id": "line5_6",
                "top": 864,
                "left": 510,
            },
            {
                "name": "Парк культуры",
                "id": "line5_7",
                "top": 789,
                "left": 434,
            },
            {
                "name": "Киевская",
                "id": "line5_8",
                "top": 708,
                "left": 400,
                "labelRight": -6,
                "labelBottom": 5
            },
            {
                "name": "Краснопресненская",
                "id": "line5_9",
                "top": 608,
                "left": 399,
                "labelTop": 4,
                "labelLeft": 2
            },
            {
                "name": "Белорусская",
                "id": "line5_10",
                "top": 497,
                "left": 452,
                "labelTop": -12,
                "labelLeft": 10
            },
            {
                "name": "Новослободская",
                "id": "line5_11",
                "top": 429,
                "left": 542,
                "labelTop": 8,
                "labelLeft": 1
            },
            {
                "name": "Проспект Мира",
                "id": "line5_12",
                "top": 413,
                "left": 686,
                "labelTop": -20,
                "labelLeft": 16
            }
        ]
    },
    {
        "id": "line6",
        "name": "Калужско-Рижская линия",
        "color": "ef7e24",
        "stations": [
            {
                "name": "Медведково",
                "id": "line6_1",
                "top": 168,
                "left": 744
            },
            {
                "name": "Бабушкинская",
                "id": "line6_2",
                "top": 196,
                "left": 744
            },
            {
                "name": "Свиблово",
                "id": "line6_3",
                "top": 225,
                "left": 744
            },
            {
                "name": "Ботанический сад",
                "id": "line6_4",
                "top": 254,
                "left": 744
            },
            {
                "name": "ВДНХ",
                "id": "line6_5",
                "top": 282,
                "left": 744
            },
            {
                "name": "Алексеевская",
                "id": "line6_6",
                "top": 311,
                "left": 744
            },
            {
                "name": "Рижская",
                "id": "line6_7",
                "top": 339,
                "left": 744
            },
            {
                "name": "Проспект Мира",
                "id": "line6_8",
                "top": 398,
                "left": 700
            },
            {
                "name": "Сухаревская",
                "id": "line6_9",
                "top": 458,
                "left": 685
            },
            {
                "name": "Тургеневская",
                "id": "line6_10",
                "top": 553,
                "left": 732
            },
            {
                "name": "Китай-город",
                "id": "line6_11",
                "top": 677,
                "left": 836
            },
            {
                "name": "Третьяковская",
                "id": "line6_12",
                "top": 789,
                "left": 764
            },
            {
                "name": "Октябрьская",
                "id": "line6_13",
                "top": 878,
                "left": 495
            },
            {
                "name": "Шаболовская",
                "id": "line6_14",
                "top": 916,
                "left": 466
            },
            {
                "name": "Ленинский проспект",
                "id": "line6_15",
                "top": 945,
                "left": 465
            },
            {
                "name": "Академическая",
                "id": "line6_16",
                "top": 973,
                "left": 466
            },
            {
                "name": "Профсоюзная",
                "id": "line6_17",
                "top": 1002,
                "left": 466
            },
            {
                "name": "Новые Черёмушки",
                "id": "line6_18",
                "top": 1031,
                "left": 466
            },
            {
                "name": "Калужская",
                "id": "line6_19",
                "top": 1059,
                "left": 465
            },
            {
                "name": "Беляево",
                "id": "line6_20",
                "top": 1088,
                "left": 465
            },
            {
                "name": "Коньково",
                "id": "line6_21",
                "top": 1116,
                "left": 466
            },
            {
                "name": "Тёплый стан",
                "id": "line6_22",
                "top": 1145,
                "left": 466
            },
            {
                "name": "Ясенево",
                "id": "line6_23",
                "top": 1173,
                "left": 466
            },
            {
                "name": "Новоясеневская",
                "id": "line6_24",
                "top": 1216,
                "left": 449
            }
        ]
    },
    {
        "id": "line7",
        "name": "Таганско-Краснопресненская линия",
        "color": "943f90",
        "stations": [
            {
                "name": "Планерная",
                "id": "line7_1",
                "top": 282,
                "left": 249
            },
            {
                "name": "Сходненская",
                "id": "line7_2",
                "top": 311,
                "left": 250
            },
            {
                "name": "Тушинская",
                "id": "line7_3",
                "top": 340,
                "left": 250
            },
            {
                "name": "Спартак",
                "id": "line7_4",
                "top": 340,
                "left": 250
            },
            {
                "name": "Щукинская",
                "id": "line7_5",
                "top": 396,
                "left": 250
            },
            {
                "name": "Октябрьское поле",
                "id": "line7_6",
                "top": 425,
                "left": 250
            },
            {
                "name": "Полежаевская",
                "id": "line7_7",
                "top": 501,
                "left": 292
            },
            {
                "name": "Беговая",
                "id": "line7_8",
                "top": 526,
                "left": 318
            },
            {
                "name": "Улица 1905 года",
                "id": "line7_9",
                "top": 552,
                "left": 346
            },
            {
                "name": "Баррикадная",
                "id": "line7_10",
                "top": 594,
                "left": 384
            },
            {
                "name": "Пушкинская",
                "id": "line7_11",
                "top": 608,
                "left": 563
            },
            {
                "name": "Кузнецкий мост",
                "id": "line7_12",
                "top": 608,
                "left": 725
            },
            {
                "name": "Китай-город",
                "id": "line7_13",
                "top": 662,
                "left": 821
            },
            {
                "name": "Таганская",
                "id": "line7_14",
                "top": 735,
                "left": 853
            },
            {
                "name": "Пролетарская",
                "id": "line7_15",
                "top": 824,
                "left": 942
            },
            {
                "name": "Волгоградский проспект",
                "id": "line7_16",
                "top": 888,
                "left": 991
            },
            {
                "name": "Текстильщики",
                "id": "line7_17",
                "top": 917,
                "left": 991
            },
            {
                "name": "Кузьминки",
                "id": "line7_18",
                "top": 945,
                "left": 991
            },
            {
                "name": "Рязанский проспект",
                "id": "line7_19",
                "top": 974,
                "left": 990
            },
            {
                "name": "Выхино",
                "id": "line7_20",
                "top": 1002,
                "left": 991
            },
            {
                "name": "Лермонтовский проспект",
                "id": "line7_21",
                "top": 1002,
                "left": 991
            },
            {
                "name": "Жулебино",
                "id": "line7_22",
                "top": 1002,
                "left": 991
            },
            {
                "name": "Котельники",
                "id": "line7_23",
                "top": 1072,
                "left": 991
            }
        ]
    },
    {
        "id": "line8",
        "name": "Калининская линия",
        "color": "FFCD1E",
        "stations": [
            {
                "name": "Новокосино",
                "id": "line8_1",
                "top": 583,
                "left": 1059
            },
            {
                "name": "Новогиреево",
                "id": "line8_2",
                "top": 583,
                "left": 1059
            },
            {
                "name": "Перово",
                "id": "line8_3",
                "top": 609,
                "left": 1032
            },
            {
                "name": "Шоссе Энтузиастов",
                "id": "line8_4",
                "top": 637,
                "left": 1005
            },
            {
                "name": "Авиамоторная",
                "id": "line8_5",
                "top": 664,
                "left": 978
            },
            {
                "name": "Площадь Ильича",
                "id": "line8_6",
                "top": 715,
                "left": 927
            },
            {
                "name": "Марксистская",
                "id": "line8_7",
                "top": 715,
                "left": 853
            },
            {
                "name": "Третьяковская",
                "id": "line8_8",
                "top": 789,
                "left": 744
            }
        ]
    },
    {
        "id": "line8A",
        "name": "Солнцевская линия",
        "color": "FFCD1E",
        "stations": [
            {  "name": "Савёловская",
                "id": "line8A_1",
                "top": 460,
                "left": 420
            },
            {  "name": "Петровский парк",
                "id": "line8A_2",
                "top": 460,
                "left": 420
            },
      {  "name": "ЦСКА",
                "id": "line8A_3",
                "top": 460,
                "left": 420
            },
      {  "name": "Хорошёвская",
                "id": "line8A_4",
                "top": 460,
                "left": 420
            },
      {  "name": "Шелепиха",
                "id": "line8A_5",
                "top": 460,
                "left": 420
            },
            {
                "name": "Парк Победы",
                "id": "line8A_6",
                "top": 789,
                "left": 744
            },
      {
                "name": "Минская",
                "id": "line8A_7",
                "top": 789,
                "left": 744
            },
      {
                "name": "Ломоносовский проспект",
                "id": "line8A_8",
                "top": 789,
                "left": 744
            },
      {
                "name": "Раменки",
                "id": "line8A_9",
                "top": 789,
                "left": 744
            },
      {
                "name": "Мичуринский проспект",
                "id": "line8A_10",
                "top": 789,
                "left": 744
            },
      {
                "name": "Озёрная",
                "id": "line8A_11",
                "top": 789,
                "left": 744
            },
      {
                "name": "Говорово",
                "id": "line8A_12",
                "top": 789,
                "left": 744
            },
      {
                "name": "Солнцево",
                "id": "line8A_13",
                "top": 789,
                "left": 744
            },
      {
                "name": "Боровское шоссе",
                "id": "line8A_14",
                "top": 789,
                "left": 744
            },
      {
                "name": "Новопеределкино",
                "id": "line8A_15",
                "top": 789,
                "left": 744
            },
      {
                "name": "Рассказовка",
                "id": "line8A_16",
                "top": 789,
                "left": 744
            }
        ]
    },
    {
        "id": "line9",
        "name": "Серпуховско-Тимирязевская линия",
        "color": "adacac",
        "stations": [
            {
                "name": "Алтуфьево",
                "id": "line9_1",
                "top": 140,
                "left": 496
            },
            {
                "name": "Бибирево",
                "id": "line9_2",
                "top": 168,
                "left": 496
            },
            {
                "name": "Отрадное",
                "id": "line9_3",
                "top": 197,
                "left": 497
            },
            {
                "name": "Владыкино",
                "id": "line9_4",
                "top": 225,
                "left": 497
            },
            {
                "name": "Петровско-Разумовская",
                "id": "line9_5",
                "top": 253,
                "left": 497
            },
            {
                "name": "Тимирязевская",
                "id": "line9_6",
                "top": 282,
                "left": 496
            },
            {
                "name": "Дмитровская",
                "id": "line9_7",
                "top": 310,
                "left": 496
            },
            {
                "name": "Савёловская",
                "id": "line9_8",
                "top": 339,
                "left": 497
            },
            {
                "name": "Менделеевская",
                "id": "line9_9",
                "top": 415,
                "left": 527
            },
            {
                "name": "Цветной бульвар",
                "id": "line9_10",
                "top": 508,
                "left": 620
            },
            {
                "name": "Чеховская",
                "id": "line9_11",
                "top": 593,
                "left": 577
            },
            {
                "name": "Боровицкая",
                "id": "line9_12",
                "top": 752,
                "left": 523
            },
            {
                "name": "Полянка",
                "id": "line9_13",
                "top": 845,
                "left": 589
            },
            {
                "name": "Серпуховская",
                "id": "line9_14",
                "top": 916,
                "left": 589
            },
            {
                "name": "Тульская",
                "id": "line9_15",
                "top": 945,
                "left": 589
            },
            {
                "name": "Нагатинская",
                "id": "line9_16",
                "top": 973,
                "left": 589
            },
            {
                "name": "Нагорная",
                "id": "line9_17",
                "top": 1002,
                "left": 589
            },
            {
                "name": "Нахимовский проспект",
                "id": "line9_18",
                "top": 1030,
                "left": 589
            },
            {
                "name": "Севастопольская",
                "id": "line9_19",
                "top": 1082,
                "left": 589
            },
            {
                "name": "Чертановская",
                "id": "line9_20",
                "top": 1116,
                "left": 589
            },
            {
                "name": "Южная",
                "id": "line9_21",
                "top": 1145,
                "left": 589
            },
            {
                "name": "Пражская",
                "id": "line9_22",
                "top": 1173,
                "left": 589
            },
            {
                "name": "Улица академика Янгеля",
                "id": "line9_23",
                "top": 1202,
                "left": 589
            },
            {
                "name": "Аннино",
                "id": "line9_24",
                "top": 1230,
                "left": 589
            },
            {
                "name": "Бульвар Дмитрия Донского",
                "id": "line9_25",
                "top": 1259,
                "left": 590
            }
        ]
    },
     {
        "id": "line10",
        "name": "Люблинско-Дмитровская линия",
        "color": "BED12E",
        "stations": [
            {
                "name": "Селигерская",
                "id": "line10_1",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Верхние Лихоборы",
                "id": "line10_2",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Окружная",
                "id": "line10_3",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Петровско-Разумовская",
                "id": "line10_4",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Фонвизинская",
                "id": "line10_5",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Бутырская",
                "id": "line10_6",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Марьина роща",
                "id": "line10_7",
                "top": 339,
                "left": 620
            },
            {
                "name": "Достоевская",
                "id": "line10_8",
                "top": 368,
                "left": 620
            },
            {
                "name": "Трубная",
                "id": "line10_9",
                "top": 487,
                "left": 620
            },
            {
                "name": "Сретенский бульвар",
                "id": "line10_10",
                "top": 533,
                "left": 732
            },
            {
                "name": "Чкаловская",
                "id": "line10_11",
                "top": 639,
                "left": 871
            },
            {
                "name": "Римская",
                "id": "line10_12",
                "top": 715,
                "left": 947
            },
            {
                "name": "Крестьянская застава",
                "id": "line10_13",
                "top": 809,
                "left": 956
            },
            {
                "name": "Дубровка",
                "id": "line10_14",
                "top": 854,
                "left": 911
            },
            {
                "name": "Кожуховская",
                "id": "line10_15",
                "top": 881,
                "left": 884
            },
            {
                "name": "Печатники",
                "id": "line10_16",
                "top": 945,
                "left": 867
            },
            {
                "name": "Волжская",
                "id": "line10_17",
                "top": 973,
                "left": 867
            },
            {
                "name": "Люблино",
                "id": "line10_18",
                "top": 1002,
                "left": 867
            },
            {
                "name": "Братиславская",
                "id": "line10_19",
                "top": 1030,
                "left": 867
            },
            {
                "name": "Марьино",
                "id": "line10_20",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Борисово",
                "id": "line10_21",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Шипиловская",
                "id": "line10_22",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Зябликово",
                "id": "line10_23",
                "top": 1059,
                "left": 867
            }
        ]
    },
    {
        "id": "line11",
        "name": "Большая Кольцевая линия",
        "color": "89CDCF",
        "stations": [
            {
                "name": "Савёловская",
                "id": "line11_1",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Петровский парк",
                "id": "line11_2",
                "top": 1059,
                "left": 867
            },
            {
                "name": "ЦСКА",
                "id": "line11_3",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Хорошёвская",
                "id": "line11_4",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Шелепиха",
                "id": "line11_5",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Деловой центр",
                "id": "line11_6",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Улица Народного Ополчения",
                "id": "line11_7",
                "close": true,
                "top": 339,
                "left": 620
            },
            {
                "name": "Карамышевская",
                "id": "line11_8",
                "close": true,
                "top": 368,
                "left": 620
            },
            {
                "name": "Мнёвники",
                "id": "line11_9",
                "close": true,
                "top": 487,
                "left": 620
            },
            {
                "name": "Кунцевская",
                "id": "line11_10",
                "close": true,
                "top": 533,
                "left": 732
            },
            {
                "name": "Давыдково",
                "id": "line11_11",
                "close": true,
                "top": 639,
                "left": 871
            },
            {
                "name": "Аминьевское шоссе",
                "id": "line11_12",
                "close": true,
                "top": 715,
                "left": 947
            },
            {
                "name": "Мичуринский проспект",
                "id": "line11_13",
                "close": true,
                "top": 809,
                "left": 956
            },
            {
                "name": "Проспект Вернадского",
                "id": "line11_14",
                "close": true,
                "top": 854,
                "left": 911
            },
            {
                "name": "Улица Новаторов",
                "id": "line11_15",
                "close": true,
                "top": 881,
                "left": 884
            },
            {
                "name": "Калужская",
                "id": "line11_16",
                "close": true,
                "top": 945,
                "left": 867
            },
            {
                "name": "Зюзино",
                "id": "line11_17",
                "close": true,
                "top": 973,
                "left": 867
            },
            {
                "name": "Каховская",
                "id": "line11_18",
                "close": true,
                "top": 1002,
                "left": 867
            },
            {
                "name": "Варшавская",
                "id": "line11_19",
                "close": true,
                "top": 1030,
                "left": 867
            },
/*            {
                "name": "Каширская",
                "id": "line11_20",
                "top": 1059,
                "left": 867
            },*/
            {
                "name": "Кленовый бульвар",
                "id": "line11_21",
                "close": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Нагатинский затон",
                "id": "line11_22",
                "close": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Печатники",
                "id": "line11_23",
                "close": true,
                "top": 1059,
                "left": 867
            },
                        {
                "name": "Текстильщики",
                "id": "line11_24",
                "close": true,
                "top": 1002,
                "left": 867
            },
            {
                "name": "Нижегородская",
                "id": "line11_25",
                "close": true,
                "top": 1030,
                "left": 867
            },
            {
                "name": "Авиамоторная",
                "id": "line11_26",
                "close": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Лефортово",
                "id": "line11_27",
                "close": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Электрозаводская",
                "id": "line11_28",
                "close": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Сокольники",
                "id": "line11_29",
                "close": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Рижская",
                "id": "line11_30",
                "close": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Марьина Роща",
                "id": "line11_31",
                "close": true,
                "top": 1059,
                "left": 867
            }
        ]
    },
     {
        "id": "line11A",
        "name": "Каховская линия",
        "color": "89CDCF",
        "stations": [
            {
                "name": "Каширская",
                "id": "line11A_1",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Варшавская",
                "id": "line11A_2",
                "top": 1030,
                "left": 867
            }
        ]
    },
    {
        "id": "line12",
        "name": "Бутовская линия",
        "color": "BAC8E8",
        "stations": [
            {
                "name": "Битцевский парк",
                "id": "line12_1",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Лесопарковая",
                "id": "line12_2",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Улица Старокачаловская",
                "id": "line12_3",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Улица Скобелевская",
                "id": "line12_4",
                "top": 1330,
                "left": 489
            },
            {
                "name": "Бульвар адмирала Ушакова",
                "id": "line12_5",
                "top": 1330,
                "left": 430
            },
            {
                "name": "Улица Горчакова",
                "id": "line12_6",
                "top": 1330,
                "left": 375
            },
            {
                "name": "Бунинская аллея",
                "id": "line12_7",
                "top": 1330,
                "left": 318
            }
        ]
    },
    {   "id": "line13",
        "name": "Монорельс",
        "color": "0A72B9",
        "stations": [
            {
                "name": "Ул. Сергея Эйзенштейна",
                "id": "line13_1",
                "top": 1330,
                "left": 375
            },
            {
                "name": "Выставочный центр",
                "id": "line13_2",
                "top": 1330,
                "left": 430
            },
            {
                "name": "Ул. Академика Королева",
                "id": "line13_3",
                "top": 1330,
                "left": 489
            },
            {
                "name": "Телецентр",
                "id": "line13_4",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Ул. Милашенкова",
                "id": "line13_5",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Тимирязевская",
                "id": "line13_6",
                "top": 1273,
                "left": 575
            },
        ]
    },
    {
        "id": "line14",
        "name": "МЦК",
        "isCircle": true,
        "color": "ffcec6",
        "stations": [
            {
                "name": "Бульвар Рокоссовского",
                "id": "line14_1",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Локомотив",
                "id": "line14_2",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Измайлово",
                "id": "line14_3",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Соколиная Гора",
                "id": "line14_4",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Шоссе Энтузиастов",
                "id": "line14_5",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Андроновка",
                "id": "line14_6",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Нижегородская",
                "id": "line14_7",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Новохохловская",
                "id": "line14_8",
                "top": 1273,
                "left": 575
            },  
            {
                "name": "Угрешская",
                "id": "line14_9",
                "top": 1273,
                "left": 575
            },   
            {
                "name": "Дубровка",
                "id": "line14_10",
                "top": 1273,
                "left": 575
            }, 
            {
                "name": "Автозаводская",
                "id": "line14_11",
                "top": 1273,
                "left": 575
            }, 
            {
                "name": "ЗИЛ",
                "id": "line14_12",
                "top": 1273,
                "left": 575
            }, 
            {
                "name": "Верхние Котлы",
                "id": "line14_13",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Крымская",
                "id": "line14_14",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Площадь Гагарина",
                "id": "line14_15",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Лужники",
                "id": "line14_16",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Кутузовская",
                "id": "line14_17",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Деловой центр",
                "id": "line14_18",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Шелепиха",
                "id": "line14_19",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Хорошево",
                "id": "line14_20",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Зорге",
                "id": "line14_21",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Панфиловская",
                "id": "line14_22",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Стрешнево",
                "id": "line14_23",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Балтийская",
                "id": "line14_24",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Коптево",
                "id": "line14_25",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Лихоборы",
                "id": "line14_26",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Окружная",
                "id": "line14_27",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Владыкино",
                "id": "line14_28",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Ботанический сад",
                "id": "line14_29",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Ростокино",
                "id": "line14_30",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Белокаменная",
                "id": "line14_31",
                "top": 1273,
                "left": 575
            }
        ]
    },
     {   "id": "line15",
        "name": "Некрасовская линия",
        "color": "d68ab1",
        "stations": [
            {
                "name": "Авиамоторная",
                "id": "line15_1",
                "close": true,
                "top": 1273,
                "left": 575
            },
            {
                "name": "Нижегородская",
                "id": "line15_2",
                "close": true,
                "top": 1273,
                "left": 575
            },
            {
                "name": "Стахановская",
                "id": "line15_3",
                "close": true,
                "top": 1273,
                "left": 575
            },
            {
                "name": "Окская",
                "id": "line15_4",
                "close": true,
                "top": 1330,
                "left": 489
            },
            {
                "name": "Юго-Восточная",
                "id": "line15_5",
                "close": true,
                "top": 1330,
                "left": 489
            },
            {
                "name": "Косино",
                "id": "line15_6",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Улица Дмитриевского",
                "id": "line15_7",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Лухмановская",
                "id": "line15_8",
                "top": 1273,
                "left": 575
            },
            {
                "name": "Некрасовка",
                "id": "line15_9",
                "top": 1330,
                "left": 489
            }
        ]
    },
    {
        "id": "lineD1",
        "name": "МЦД-1",
        "isMCD": true,
        "color": "f7a600",
        "stations": [
            {
                "name": "Лобня",
                "id": "lineD1_1",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Шереметьевская",
                "id": "lineD1_2",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Хлебниково",
                "id": "lineD1_3",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Водники",
                "id": "lineD1_4",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Долгопрудная",
                "id": "lineD1_5",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Новодачная",
                "id": "lineD1_6",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Марк",
                "id": "lineD1_7",
                "top": 339,
                "left": 620
            },
            {
                "name": "Лианозово",
                "id": "lineD1_8",
                "top": 368,
                "left": 620
            },
            {
                "name": "Илимская",
                "id": "lineD1_9",
                "close": true,
                "top": 487,
                "left": 620
            },
            {
                "name": "Бескудниково",
                "id": "lineD1_10",
                "top": 533,
                "left": 732
            },
            {
                "name": "Дегунино",
                "id": "lineD1_11",
                "top": 639,
                "left": 871
            },
            {
                "name": "Окружная",
                "id": "lineD1_12",
                "top": 715,
                "left": 947
            },
            {
                "name": "Петровско-Разумовская",
                "id": "lineD1_13",
                "close": true,
                "top": 809,
                "left": 956
            },
            {
                "name": "Тимирязевская",
                "id": "lineD1_14",
                "top": 854,
                "left": 911
            },
            {
                "name": "Дмитровская",
                "id": "lineD1_15",
                "close": true,
                "top": 881,
                "left": 884
            },
            {
                "name": "Савёловская",
                "id": "lineD1_16",
                "top": 945,
                "left": 867
            },
            {
                "name": "Белорусская",
                "id": "lineD1_17",
                "top": 973,
                "left": 867
            },
            {
                "name": "Беговая",
                "id": "lineD1_18",
                "top": 1002,
                "left": 867
            },
            {
                "name": "Тестовская",
                "id": "lineD1_19",
                "top": 1030,
                "left": 867
            },
            {
                "name": "Фили",
                "id": "lineD1_20",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Славянский бульвар",
                "id": "lineD1_21",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Кунцевская",
                "id": "lineD1_22",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Рабочий поселок",
                "id": "lineD1_23",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Сетунь",
                "id": "lineD1_24",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Немчиновка",
                "id": "lineD1_25",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Инновационный центр Сколково",
                "id": "lineD1_26",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Баковка",
                "id": "lineD1_27",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Одинцово",
                "id": "lineD1_28",
                "outside": true,
                "top": 1059,
                "left": 867
            }
        ]
    },
    
     {
        "id": "lineD2",
        "name": "МЦД-2",
        "isMCD": true,
        "color": "e94282",
        "stations": [
            {
                "name": "Нахабино",
                "id": "lineD2_1",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Аникеевка",
                "id": "lineD2_2",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Опалиха",
                "id": "lineD2_3",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Красногорская",
                "id": "lineD2_4",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Павшино",
                "id": "lineD2_5",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Пенягино",
                "id": "lineD2_6",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Волоколамская",
                "id": "lineD2_7",
                "top": 339,
                "left": 620
            },
            {
                "name": "Трикотажная",
                "id": "lineD2_8",
                "top": 368,
                "left": 620
            },
            {
                "name": "Тушинская",
                "id": "lineD2_9",
                "top": 487,
                "left": 620
            },
            {
                "name": "Покровское-Стрешнево",
                "id": "lineD2_10",
                "top": 533,
                "left": 732
            },
            {
                "name": "Стрешнево",
                "id": "lineD2_11",
                "top": 639,
                "left": 871
            },
            {
                "name": "Красный балтиец",
                "id": "lineD2_12",
                "top": 715,
                "left": 947
            },
            {
                "name": "Гражданская",
                "id": "lineD2_13",
                "top": 809,
                "left": 956
            },
            {
                "name": "Дмитровская",
                "id": "lineD2_14",
                "top": 854,
                "left": 911
            },
            {
                "name": "Марьина Роща",
                "id": "lineD2_15",
                "close": true,
                "top": 881,
                "left": 884
            },
            {
                "name": "Рижская",
                "id": "lineD2_16",
                "top": 945,
                "left": 867
            },
            {
                "name": "Каланчёвская",
                "id": "lineD2_17",
                "top": 973,
                "left": 867
            },
            {
                "name": "Курская",
                "id": "lineD2_18",
                "top": 1002,
                "left": 867
            },
            {
                "name": "Москва Товарная",
                "id": "lineD2_19",
                "top": 1030,
                "left": 867
            },
            {
                "name": "Калитники",
                "id": "lineD2_20",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Новохохловская",
                "id": "lineD2_21",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Текстильщики",
                "id": "lineD2_22",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Печатники",
                "id": "lineD2_23",
                "close": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Кубанская",
                "id": "lineD2_24",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Депо",
                "id": "lineD2_25",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Перерва",
                "id": "lineD2_26",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Курьяново",
                "id": "lineD2_27",
                "close": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Москворечье",
                "id": "lineD2_28",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Царицыно",
                "id": "lineD2_29",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Котляково",
                "id": "lineD2_30",
                "close": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Покровское",
                "id": "lineD2_31",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Красный строитель",
                "id": "lineD2_32",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Битца",
                "id": "lineD2_33",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Бутово",
                "id": "lineD2_34",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Щербинка",
                "id": "lineD2_35",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Остафьево",
                "id": "lineD2_36",
                "top": 1059,
                "left": 867
            },
            {
                "name": "Силикатная",
                "id": "lineD2_37",
                "outside": true,
                "top": 1059,
                "left": 867
            },
            {
                "name": "Подольск",
                "id": "lineD2_38",
                "outside": true,
                "top": 1059,
                "left": 867
            }
        ]
    },
];

var metroStationsConnections = [
    
   // Сокольническая линия — красная ветка
     

    // Внутренние перегоны
    {
        stations: ["line1_1", "line1_2"],
        inside: true,
        time: 138
    },
    {
        stations: ["line1_2", "line1_3"],
        inside: true,
        time: 233
    },
    {
        stations: ["line1_3", "line1_4"],
        inside: true,
        time: 190
    },
    {
        stations: ["line1_4", "line1_5"],
        inside: true,
        time: 108
    },
    {
        stations: ["line1_5", "line1_6"],
        inside: true,
        time: 100
    },
    {
        stations: ["line1_6", "line1_7"],
        inside: true,
        time: 113
    },
    {
        stations: ["line1_7", "line1_8"],
        inside: true,
        time: 90
    },
    {
        stations: ["line1_8", "line1_9"],
        inside: true,
        time: 113
    },
    {
        stations: ["line1_9", "line1_10"],
        inside: true,
        time: 105
    },
    {
        stations: ["line1_10", "line1_11"],
        inside: true,
        time: 105
    },
    {
        stations: ["line1_11", "line1_12"],
        inside: true,
        time: 100
    },
        {
        stations: ["line1_12", "line1_13"],
        inside: true,
        time: 123
    },
        {
        stations: ["line1_13", "line1_14"],
        inside: true,
        time: 135
    },
    {
        stations: ["line1_14", "line1_15"],
        inside: true,
        time: 98
    },
    {
        stations: ["line1_15", "line1_16"],
        inside: true,
        time: 213
    },
    {
        stations: ["line1_16", "line1_17"],
        inside: true,
        time: 288
    },
        {
        stations: ["line1_17", "line1_18"],
        inside: true,
        time: 170
    },
    {
        stations: ["line1_18", "line1_19"],
        inside: true,
        time: 150
    },
    {
        stations: ["line1_19", "line1_20"],
        inside: true,
        time: 180
    },
    {
        stations: ["line1_20", "line1_21"],
        inside: true,
        time: 195
    },
        {
        stations: ["line1_21", "line1_22"],
        inside: true,
        time: 200
    },
    {
        stations: ["line1_22", "line1_23"],
        inside: true,
        time: 205
    },
    {
        stations: ["line1_23", "line1_24"],
        inside: true,
        time: 175
    },
        {
        stations: ["line1_24", "line1_25"],
        inside: true,
        time: 183
    },
    {
        stations: ["line1_25", "line1_26"],
        inside: true,
        time: 93
    },
    
     /*
      Замоскворецкая линия — зеленая ветка
     */

    // Внутренние перегоны
    {
        stations: ["line2_1", "line2_2"],
        inside: true,
        time: 133
    },
    {
        stations: ["line2_2", "line2_3"],
        inside: true,
        time: 118
    },
    {
        stations: ["line2_3", "line2_4"],
        inside: true,
        time: 148
    },
    {
        stations: ["line2_4", "line2_5"],
        inside: true,
        time: 193
    },
    {
        stations: ["line2_5", "line2_6"],
        inside: true,
        time: 173
    },
    {
        stations: ["line2_6", "line2_7"],
        inside: true,
        time: 133
    },
    {
        stations: ["line2_7", "line2_8"],
        inside: true,
        time: 173
    },
    {
        stations: ["line2_8", "line2_9"],
        inside: true,
        time: 175
    },
    {
        stations: ["line2_9", "line2_10"],
        inside: true,
        time: 120
    },
    {
        stations: ["line2_10", "line2_11"],
        inside: true,
        time: 105
    },
    {
        stations: ["line2_11", "line2_12"],
        inside: true,
        time: 123
    },
    {
        stations: ["line2_12", "line2_13"],
        inside: true,
        time: 160
    },
    {
        stations: ["line2_13", "line2_14"],
        inside: true,
        time: 138
    },
    {
        stations: ["line2_14", "line2_15"],
        inside: true,
        time: 213
    },
    {
        stations: ["line2_15", "line2_16"],
        inside: true,
        time: 150
    },
    {
        stations: ["line2_16", "line2_17"],
        inside: true,
        time: 150
    },
    {
        stations: ["line2_17", "line2_18"],
        inside: true,
        time: 230
    },
    {
        stations: ["line2_18", "line2_19"],
        inside: true,
        time: 200
    },
    {
        stations: ["line2_19", "line2_20"],
        inside: true,
        time: 150
    },
    {
        stations: ["line2_20", "line2_21"],
        inside: true,
        time: 170
    },
    {
        stations: ["line2_21", "line2_22"],
        inside: true,
        time: 148
    },
    {
        stations: ["line2_22", "line2_23"],
        inside: true,
        time: 138
    },
    {
        stations: ["line2_23", "line2_24"],
        inside: true,
        time: 240
    },

    /*
      Арбатско-Покровская линия — синяя ветка
     */

    // Внутренние пересадки
    {
        stations: ["line3_1", "line3_2"],
        inside: true,
        time: 180
    },
    {
        stations: ["line3_2", "line3_3"],
        inside: true,
        time: 180
    },
    {
        stations: ["line3_3", "line3_4"],
        inside: true,
        time: 120
    },
    {
        stations: ["line3_4", "line3_5"],
        inside: true,
        time: 210
    },
    {
        stations: ["line3_5", "line3_6"],
        inside: true,
        time: 513
    },
    {
        stations: ["line3_6", "line3_7"],
        inside: true,
        time: 178
    },
    {
        stations: ["line3_7", "line3_8"],
        inside: true,
        time: 203
    },
    {
        stations: ["line3_8", "line3_9"],
        inside: true,
        time: 131
    },
    {
        stations: ["line3_9", "line3_10"],
        inside: true,
        time: 270
    },
    {
        stations: ["line3_10", "line3_11"],
        inside: true,
        time: 268
    },
    {
        stations: ["line3_11", "line3_12"],
        inside: true,
        time: 115
    },
    {
        stations: ["line3_12", "line3_13"],
        inside: true,
        time: 143
    },
    {
        stations: ["line3_13", "line3_14"],
        inside: true,
        time: 123
    },
    {
        stations: ["line3_14", "line3_15"],
        inside: true,
        time: 185
    },
    {
        stations: ["line3_15", "line3_16"],
        inside: true,
        time: 183
    },
    {
        stations: ["line3_16", "line3_17"],
        inside: true,
        time: 153
    },
    {
        stations: ["line3_17", "line3_18"],
        inside: true,
        time: 110
    },
    {
        stations: ["line3_18", "line3_19"],
        inside: true,
        time: 163
    },
    {
        stations: ["line3_19", "line3_20"],
        inside: true,
        time: 195
    },
    {
        stations: ["line3_20", "line3_21"],
        inside: true,
        time: 183
    },
    {
        stations: ["line3_21", "line3_22"],
        inside: true,
        time: 130
    },
    /*
      Филёвская линия линия — голубая ветка
     */

    // Внутренние перегоны
    {
        stations: ["line4_1", "line4_2"],
        inside: true,
        time: 85
    },
    {
        stations: ["line4_2", "line4_3"],
        inside: true,
        time: 130
    },
    {
        stations: ["line4_3", "line4_4"],
        inside: true,
        time: 153
    },
    {
        stations: ["line4_4", "line4_5"],
        inside: true,
        time: 270
    },
    {
        stations: ["line4_5", "line4_6"],
        inside: true,
        time: 98
    },
    {
        stations: ["line4_4", "line4_7"],
        inside: true,
        time: 143
    },
    {
        stations: ["line4_7", "line4_8"],
        inside: true,
        time: 133
    },
    {
        stations: ["line4_8", "line4_9"],
        inside: true,
        time: 158
    },
    {
        stations: ["line4_9", "line4_10"],
        inside: true,
        time: 155
    },
    {
        stations: ["line4_10", "line4_11"],
        inside: true,
        time: 118
    },
    {
        stations: ["line4_11", "line4_12"],
        inside: true,
        time: 130
    },
    {
        stations: ["line4_12", "line4_13"],
        inside: true,
        time: 95
    },
    /*
     Кольцевая линия — коричневая ветка
     */

    // Внутренние перегоны
    {
        stations: ["line5_1", "line5_2"],
        inside: true,
        time: 153
    },
    {
        stations: ["line5_2", "line5_3"],
        inside: true,
        time: 133
    },
    {
        stations: ["line5_3", "line5_4"],
        inside: true,
        time: 115
    },
    {
        stations: ["line5_4", "line5_5"],
        inside: true,
        time: 113
    },
    {
        stations: ["line5_5", "line5_6"],
        inside: true,
        time: 133
    },
    {
        stations: ["line5_6", "line5_7"],
        inside: true,
        time: 145
    },
    {
        stations: ["line5_7", "line5_8"],
        inside: true,
        time: 163
    },
    {
        stations: ["line5_8", "line5_9"],
        inside: true,
        time: 158
    },
    {
        stations: ["line5_9", "line5_10"],
        inside: true,
        time: 145
    },
    {
        stations: ["line5_10", "line5_11"],
        inside: true,
        time: 140
    },
    {
        stations: ["line5_11", "line5_12"],
        inside: true,
        time: 160
    },
    {
        stations: ["line5_12", "line5_1"],
        inside: true,
        time: 170
    },
    /*
     Калужско-Рижская линия — оранжевая ветка
     */

    // Внутренние перегоны
    {
        stations: ["line6_1", "line6_2"],
        inside: true,
        time: 153
    },
    {
        stations: ["line6_2", "line6_3"],
        inside: true,
        time: 158
    },
    {
        stations: ["line6_3", "line6_4"],
        inside: true,
        time: 135
    },
    {
        stations: ["line6_4", "line6_5"],
        inside: true,
        time: 208
    },
    {
        stations: ["line6_5", "line6_6"],
        inside: true,
        time: 135
    },
    {
        stations: ["line6_6", "line6_7"],
        inside: true,
        time: 140
    },
    {
        stations: ["line6_7", "line6_8"],
        inside: true,
        time: 133
    },
    {
        stations: ["line6_8", "line6_9"],
        inside: true,
        time: 113
    },
    {
        stations: ["line6_9", "line6_10"],
        inside: true,
        time: 100
    },
    {
        stations: ["line6_10", "line6_11"],
        inside: true,
        time: 123
    },
    {
        stations: ["line6_11", "line6_12"],
        inside: true,
        time: 168
    },
    {
        stations: ["line6_12", "line6_13"],
        inside: true,
        time: 155
    },
    {
        stations: ["line6_13", "line6_14"],
        inside: true,
        time: 125
    },
    {
        stations: ["line6_14", "line6_15"],
        inside: true,
        time: 183
    },
    {
        stations: ["line6_15", "line6_16"],
        inside: true,
        time: 188
    },
    {
        stations: ["line6_16", "line6_17"],
        inside: true,
        time: 125
    },
    {
        stations: ["line6_17", "line6_18"],
        inside: true,
        time: 105
    },
    {
        stations: ["line6_18", "line6_19"],
        inside: true,
        time: 143
    },
    {
        stations: ["line6_19", "line6_20"],
        inside: true,
        time: 173
    },
    {
        stations: ["line6_20", "line6_21"],
        inside: true,
        time: 130
    },
    {
        stations: ["line6_21", "line6_22"],
        inside: true,
        time: 135
    },
    {
        stations: ["line6_22", "line6_23"],
        inside: true,
        time: 175
    },
    {
        stations: ["line6_23", "line6_24"],
        inside: true,
        time: 133
    },

    /*
     Таганско-Краснопресненская линия — фиолетовая линия
     */

    // Внутренние перегоны
    {
        stations: ["line7_1", "line7_2"],
        inside: true,
        time: 95
    },
    {
        stations: ["line7_2", "line7_3"],
        inside: true,
        time: 185
    },
    {
        stations: ["line7_3", "line7_4"],
        inside: true,
        time: 90
    },
    {
        stations: ["line7_4", "line7_5"],
        inside: true,
        time: 180
    },
    {
        stations: ["line7_5", "line7_6"],
        inside: true,
        time: 183
    },
    {
        stations: ["line7_6", "line7_7"],
        inside: true,
        time: 198
    },
    {
        stations: ["line7_7", "line7_8"],
        inside: true,
        time: 145
    },
    {
        stations: ["line7_8", "line7_9"],
        inside: true,
        time: 128
    },
    {
        stations: ["line7_9", "line7_10"],
        inside: true,
        time: 128
    },
    {
        stations: ["line7_10", "line7_11"],
        inside: true,
        time: 163
    },
    {
        stations: ["line7_11", "line7_12"],
        inside: true,
        time: 118
    },
    {
        stations: ["line7_12", "line7_13"],
        inside: true,
        time: 98
    },
    {
        stations: ["line7_13", "line7_14"],
        inside: true,
        time: 165
    },
    {
        stations: ["line7_14", "line7_15"],
        inside: true,
        time: 140
    },
    {
        stations: ["line7_15", "line7_16"],
        inside: true,
        time: 138
    },
    {
        stations: ["line7_16", "line7_17"],
        inside: true,
        time: 245
    },
    {
        stations: ["line7_17", "line7_18"],
        inside: true,
        time: 178
    },
    {
        stations: ["line7_18", "line7_19"],
        inside: true,
        time: 190
    },
    {
        stations: ["line7_19", "line7_20"],
        inside: true,
        time: 160
    },
    {
        stations: ["line7_20", "line7_21"],
        inside: true,
        time: 240
    },
    {
        stations: ["line7_21", "line7_22"],
        inside: true,
        time: 165
    },
    {
        stations: ["line7_22", "line7_23"],
        inside: true,
        time: 125
    }, 
    /*
    Калининская линия
     */

    // Внутренние перегоны
    {
        stations: ["line8_1", "line8_2"],
        inside: true,
        time: 240
    },
    {
        stations: ["line8_2", "line8_3"],
        inside: true,
        time: 148
    },
    {
        stations: ["line8_3", "line8_4"],
        inside: true,
        time: 228
    },
    {
        stations: ["line8_4", "line8_5"],
        inside: true,
        time: 155
    },
    {
        stations: ["line8_5", "line8_6"],
        inside: true,
        time: 180
    },
    {
        stations: ["line8_6", "line8_7"],
        inside: true,
        time: 170
    },
    {
        stations: ["line8_7", "line8_8"],
        inside: true,
        time: 140
    },
    /*
    Солнцевская линия
     */
    // Внутренние перегоны
    {
        stations: ["line8A_1", "line8A_2"],
        inside: true,
        time: 170
    },
    {
        stations: ["line8A_2", "line8A_3"],
        inside: true,
        time: 130
    },
    {
        stations: ["line8A_3", "line8A_4"],
        inside: true,
        time: 118
    },
    {
        stations: ["line8A_4", "line8A_5"],
        inside: true,
        time: 208
    },
    {
        stations: ["line8A_5", "line8A_6"],
        inside: true,
        time: 280
    },
    {
        stations: ["line8A_6", "line8A_7"],
        inside: true,
        time: 180
    },
    {
        stations: ["line8A_7", "line8A_8"],
        inside: true,
        time: 215
    },
    {
        stations: ["line8A_8", "line8A_9"],
        inside: true,
        time: 120
    },
    {
        stations: ["line8A_9", "line8A_10"],
        inside: true,
        time: 100
    },
    {
        stations: ["line8A_10", "line8A_11"],
        inside: true,
        time: 210
    },
    {
        stations: ["line8A_11", "line8A_12"],
        inside: true,
        time: 165
    },
    {
        stations: ["line8A_12", "line8A_13"],
        inside: true,
        time: 148
    },
    {
        stations: ["line8A_13", "line8A_14"],
        inside: true,
        time: 123
    },
    {
        stations: ["line8A_14", "line8A_15"],
        inside: true,
        time: 100
    },
    {
        stations: ["line8A_15", "line8A_16"],
        inside: true,
        time: 115
    },
     /*
     Серпуховско-Тимирязевская линия
     */

    // Внутренние перегоны
    {
        stations: ["line9_1", "line9_2"],
        inside: true,
        time: 143
    },
    {
        stations: ["line9_2", "line9_3"],
        inside: true,
        time: 160
    },
    {
        stations: ["line9_3", "line9_4"],
        inside: true,
        time: 145
    },
    {
        stations: ["line9_4", "line9_5"],
        inside: true,
        time: 130
    },
    {
        stations: ["line9_5", "line9_6"],
        inside: true,
        time: 168
    },
    {
        stations: ["line9_6", "line9_7"],
        inside: true,
        time: 78
    },
    {
        stations: ["line9_7", "line9_8"],
        inside: true,
        time: 100
    },
    {
        stations: ["line9_8", "line9_9"],
        inside: true,
        time: 95
    },
    {
        stations: ["line9_9", "line9_10"],
        inside: true,
        time: 133
    },
    {
        stations: ["line9_10", "line9_11"],
        inside: true,
        time: 80
    },
    {
        stations: ["line9_11", "line9_12"],
        inside: true,
        time: 125
    },
    {
        stations: ["line9_12", "line9_13"],
        inside: true,
        time: 118
    },
    {
        stations: ["line9_13", "line9_14"],
        inside: true,
        time: 100
    },
    {
        stations: ["line9_14", "line9_15"],
        inside: true,
        time: 163
    },
    {
        stations: ["line9_15", "line9_16"],
        inside: true,
        time: 210
    },
    {
        stations: ["line9_16", "line9_17"],
        inside: true,
        time: 100
    },
    {
        stations: ["line9_17", "line9_18"],
        inside: true,
        time: 85
    },
    {
        stations: ["line9_18", "line9_19"],
        inside: true,
        time: 90
    },
    {
        stations: ["line9_19", "line9_20"],
        inside: true,
        time: 108
    },
    {
        stations: ["line9_20", "line9_21"],
        inside: true,
        time: 148
    },
    {
        stations: ["line9_21", "line9_22"],
        inside: true,
        time: 90
    },
    {
        stations: ["line9_22", "line9_23"],
        inside: true,
        time: 125
    },
    {
        stations: ["line9_23", "line9_24"],
        inside: true,
        time: 95
    },
    {
        stations: ["line9_24", "line9_25"],
        inside: true,
        time: 140
    },
     /*
     Люблинско-Дмитровская линия
     */

    // Внутренние перегоны
  {
        stations: ["line10_1", "line10_2"],
        inside: true,
        time: 115
    },
    {
        stations: ["line10_2", "line10_3"],
        inside: true,
        time: 110
    },
    {
        stations: ["line10_3", "line10_4"],
        inside: true,
        time: 110
    },
    {
        stations: ["line10_4", "line10_5"],
        inside: true,
        time: 180
    },
    {
        stations: ["line10_5", "line10_6"],
        inside: true,
        time: 120
    },
    {
        stations: ["line10_6", "line10_7"],
        inside: true,
        time: 205
    },
    {
        stations: ["line10_7", "line10_8"],
        inside: true,
        time: 180
    },
    {
        stations: ["line10_8", "line10_9"],
        inside: true,
        time: 120
    },
    {
        stations: ["line10_9", "line10_10"],
        inside: true,
        time: 123
    },
    {
        stations: ["line10_10", "line10_11"],
        inside: true,
        time: 155
    },
    {
        stations: ["line10_11", "line10_12"],
        inside: true,
        time: 165
    },
    {
        stations: ["line10_12", "line10_13"],
        inside: true,
        time: 148
    },
    {
        stations: ["line10_13", "line10_14"],
        inside: true,
        time: 128
    },
    {
        stations: ["line10_14", "line10_15"],
        inside: true,
        time: 133
    },
    {
        stations: ["line10_15", "line10_16"],
        inside: true,
        time: 225
    },
    {
        stations: ["line10_16", "line10_17"],
        inside: true,
        time: 155
    },
    {
        stations: ["line10_17", "line10_18"],
        inside: true,
        time: 170
    },
    {
        stations: ["line10_18", "line10_19"],
        inside: true,
        time: 195
    },
    {
        stations: ["line10_19", "line10_20"],
        inside: true,
        time: 105
    },
    {
        stations: ["line10_20", "line10_21"],
        inside: true,
        time: 180
    },
    {
        stations: ["line10_21", "line10_22"],
        inside: true,
        time: 180
    },
    {
        stations: ["line10_22", "line10_23"],
        inside: true,
        time: 180
    },
    /*
     Большая Кольцевая линия
     */

    // Внутренние перегоны
  {
        stations: ["line11_1", "line11_2"],
        inside: true,
        time: 170
    },
    {
        stations: ["line11_2", "line11_3"],
        inside: true,
        time: 130
    },
    {
        stations: ["line11_3", "line11_4"],
        inside: true,
        time: 118
    },
    {
        stations: ["line11_4", "line11_5"],
        inside: true,
        time: 208
    },
    {
        stations: ["line11_5", "line11_6"],
        inside: true,
        time: 160
    },
    /*
    Каховская линия
     */

    // Внутренние перегоны
 /* {
        stations: ["line11A_1", "line11A_2"],
        inside: true,
        time: 175
    }, */
     /*
     Бутовская линия (лёгкое метро)
     */

    // Внутренние перегоны
    {
        stations: ["line12_1", "line12_2"],
        inside: true,
        time: 180
    },
    {
        stations: ["line12_2", "line12_3"],
        inside: true,
        time: 180
    },
    {
        stations: ["line12_3", "line12_4"],
        inside: true,
        time: 300
    },
    {
        stations: ["line12_4", "line12_5"],
        inside: true,
        time: 100
    },
    {
        stations: ["line12_5", "line12_6"],
        inside: true,
        time: 120
    },
    {
        stations: ["line12_6", "line12_7"],
        inside: true,
        time: 130
    },
     /*
    МОНОРЕЛЬС 
     */

    // Внутренние перегоны
    {
        stations: ["line13_1", "line13_2"],
        inside: true,
        time: 150
    },
        {
        stations: ["line13_2", "line13_3"],
        inside: true,
        time: 150
    },
        {
        stations: ["line13_3", "line13_4"],
        inside: true,
        time: 150
    },
        {
        stations: ["line13_4", "line13_5"],
        inside: true,
        time: 150
    },
        {
        stations: ["line13_5", "line13_6"],
        inside: true,
        time: 150
    },
     /*
     МЦК — НОВАЯ ВЕТКА
     */
     {
        stations: ["line14_1", "line14_2"],
        inside: true,
        time: 110
    },
    {
        stations: ["line14_2", "line14_3"],
        inside: true,
        time: 130
    },
    {
        stations: ["line14_3", "line14_4"],
        inside: true,
        time: 205
    },
    {
        stations: ["line14_4", "line14_5"],
        inside: true,
        time: 125
    },
    {
        stations: ["line14_5", "line14_6"],
        inside: true,
        time: 210
    },
    {
        stations: ["line14_6", "line14_7"],
        inside: true,
        time: 120
    },
    {
        stations: ["line14_7", "line14_8"],
        inside: true,
        time: 55
    },
    {
        stations: ["line14_8", "line14_9"],
        inside: true,
        time: 115
    },
    {
        stations: ["line14_9", "line14_10"],
        inside: true,
        time: 140
    },
    {
        stations: ["line14_10", "line14_11"],
        inside: true,
        time: 95
    },
    {
        stations: ["line14_11", "line14_12"],
        inside: true,
        time: 100
    },
    {
        stations: ["line14_12", "line14_13"],
        inside: true,
        time: 95
    },
    {
        stations: ["line14_13", "line14_14"],
        inside: true,
        time: 120
    },
    {
        stations: ["line14_14", "line14_15"],
        inside: true,
        time: 140
    },
    {
        stations: ["line14_15", "line14_16"],
        inside: true,
        time: 130
    },
    {
        stations: ["line14_16", "line14_17"],
        inside: true,
        time: 330
    },
    {
        stations: ["line14_17", "line14_18"],
        inside: true,
        time: 145
    },
    {
        stations: ["line14_18", "line14_19"],
        inside: true,
        time: 100
    },
    {
        stations: ["line14_19", "line14_20"],
        inside: true,
        time: 125
    },
    {
        stations: ["line14_20", "line14_21"],
        inside: true,
        time: 115
    },
    {
        stations: ["line14_21", "line14_22"],
        inside: true,
        time: 145
    },
    {
        stations: ["line14_22", "line14_23"],
        inside: true,
        time: 115
    },
    {
        stations: ["line14_23", "line14_24"],
        inside: true,
        time: 210
    },
    {
        stations: ["line14_24", "line14_25"],
        inside: true,
        time: 135
    },
    {
        stations: ["line14_25", "line14_26"],
        inside: true,
        time: 190
    },
    {
        stations: ["line14_26", "line14_27"],
        inside: true,
        time: 210
    },
    {
        stations: ["line14_27", "line14_28"],
        inside: true,
        time: 175
    },
    {
        stations: ["line14_28", "line14_29"],
        inside: true,
        time: 135
    },
    {
        stations: ["line14_29", "line14_30"],
        inside: true,
        time: 230
    },
    {
        stations: ["line14_30", "line14_31"],
        inside: true,
        time: 165
    },
    {
        stations: ["line14_31", "line14_1"],
        inside: true,
        time: 165
    },
     /*
     Некрасовская линия — розовая линия
     */

    // Внутренние перегоны
    {
        stations: ["line15_6", "line15_7"],
        inside: true,
        time: 205
    },
    {
        stations: ["line15_7", "line15_8"],
        inside: true,
        time: 105
    },
    {
        stations: ["line15_8", "line15_9"],
        inside: true,
        time: 140
    },
      /*
     МЦД-1 — оранжевый
     */

    // Внутренние перегоны
  {
        stations: ["lineD1_1", "lineD1_2"],
        inside: true,
        time: 216
    },
    {
        stations: ["lineD1_2", "lineD1_3"],
        inside: true,
        time: 102
    },
    {
        stations: ["lineD1_3", "lineD1_4"],
        inside: true,
        time: 246
    },
    {
        stations: ["lineD1_4", "lineD1_5"],
        inside: true,
        time: 132
    },
    {
        stations: ["lineD1_5", "lineD1_6"],
        inside: true,
        time: 174
    },
    {
        stations: ["lineD1_6", "lineD1_7"],
        inside: true,
        time: 174
    },
    {
        stations: ["lineD1_7", "lineD1_8"],
        inside: true,
        time: 204
    },
    {
        stations: ["lineD1_8", "lineD1_10"],
        inside: true,
        time: 174
    },
    {
        stations: ["lineD1_10", "lineD1_11"],
        inside: true,
        time: 174
    },
    {
        stations: ["lineD1_11", "lineD1_12"],
        inside: true,
        time: 102
    },
    {
        stations: ["lineD1_12", "lineD1_14"],
        inside: true,
        time: 318
    },
    {
        stations: ["lineD1_14", "lineD1_16"],
        inside: true,
        time: 246
    },
    {
        stations: ["lineD1_16", "lineD1_17"],
        inside: true,
        time: 264
    },
    {
        stations: ["lineD1_17", "lineD1_18"],
        inside: true,
        time: 264
    },
    {
        stations: ["lineD1_18", "lineD1_19"],
        inside: true,
        time: 204
    },
    {
        stations: ["lineD1_19", "lineD1_20"],
        inside: true,
        time: 174
    },
    {
        stations: ["lineD1_20", "lineD1_22"],
        inside: true,
        time: 430
    },
    {
        stations: ["lineD1_22", "lineD1_23"],
        inside: true,
        time: 174
    },
    {
        stations: ["lineD1_23", "lineD1_24"],
        inside: true,
        time: 102
    },
    {
        stations: ["lineD1_24", "lineD1_25"],
        inside: true,
        time: 174
    },
    {
        stations: ["lineD1_25", "lineD1_26"],
        inside: true,
        time: 246
    },
    {
        stations: ["lineD1_26", "lineD1_27"],
        inside: true,
        time: 174
    },
     {
        stations: ["lineD1_27", "lineD1_28"],
        inside: true,
        time: 246
    },
    /*
     МЦД-2 — розовый
     */

    // Внутренние перегоны
  {
        stations: ["lineD2_1", "lineD2_2"],
        inside: true,
        time: 140
    },
    {
        stations: ["lineD2_2", "lineD2_3"],
        inside: true,
        time: 235
    },
    {
        stations: ["lineD2_3", "lineD2_4"],
        inside: true,
        time: 235
    },
    {
        stations: ["lineD2_4", "lineD2_5"],
        inside: true,
        time: 305
    },
    {
        stations: ["lineD2_5", "lineD2_6"],
        inside: true,
        time: 165
    },
    {
        stations: ["lineD2_6", "lineD2_7"],
        inside: true,
        time: 135
    },
    {
        stations: ["lineD2_7", "lineD2_8"],
        inside: true,
        time: 100
    },
    {
        stations: ["lineD2_8", "lineD2_9"],
        inside: true,
        time: 235
    },
    {
        stations: ["lineD2_9", "lineD2_10"],
        inside: true,
        time: 180
    },
    {
        stations: ["lineD2_10", "lineD2_11"],
        inside: true,
        time: 170
    },
    {
        stations: ["lineD2_11", "lineD2_12"],
        inside: true,
        time: 170
    },
    {
        stations: ["lineD2_12", "lineD2_13"],
        inside: true,
        time: 170
    },
    {
        stations: ["lineD2_13", "lineD2_14"],
        inside: true,
        time: 200
    },
    {
        stations: ["lineD2_14", "lineD2_16"],
        inside: true,
        time: 170
    },
    {
        stations: ["lineD2_16", "lineD2_17"],
        inside: true,
        time: 205
    },
    {
        stations: ["lineD2_17", "lineD2_18"],
        inside: true,
        time: 265
    },
    {
        stations: ["lineD2_18", "lineD2_19"],
        inside: true,
        time: 325
    },
    {
        stations: ["lineD2_19", "lineD2_20"],
        inside: true,
        time: 100
    },
    {
        stations: ["lineD2_20", "lineD2_21"],
        inside: true,
        time: 205
    },
    {
        stations: ["lineD2_21", "lineD2_22"],
        inside: true,
        time: 235
    },
    {
        stations: ["lineD2_22", "lineD2_24"],
        inside: true,
        time: 100
    },
    {
        stations: ["lineD2_24", "lineD2_25"],
        inside: true,
        time: 100
    },
    {
        stations: ["lineD2_25", "lineD2_26"],
        inside: true,
        time: 100
    },
    {
        stations: ["lineD2_26", "lineD2_28"],
        inside: true,
        time: 135
    },
     {
        stations: ["lineD2_28", "lineD2_29"],
        inside: true,
        time: 340
    }, {
        stations: ["lineD2_29", "lineD2_31"],
        inside: true,
        time: 260
    },
    {
        stations: ["lineD2_31", "lineD2_32"],
        inside: true,
        time: 305
    },
    {
        stations: ["lineD2_32", "lineD2_33"],
        inside: true,
        time: 180
    },
    {
        stations: ["lineD2_33", "lineD2_34"],
        inside: true,
        time: 235
    },
     {
        stations: ["lineD2_34", "lineD2_35"],
        inside: true,
        time: 305
    },   
    {
        stations: ["lineD2_35", "lineD2_36"],
        inside: true,
        time: 170
    },
    {
        stations: ["lineD2_36", "lineD2_37"],
        inside: true,
        time: 170
    },
     {
        stations: ["lineD2_37", "lineD2_38"],
        inside: true,
        time: 375
    },
      // Пересадки
    {
        stations: ["line1_1", "line14_1"],
        time: 300
    },
        {
        stations: ["line1_2", "line14_2"],
        time: 180
    },
    {
        stations: ["line1_6", "line5_1"],
        inside: true,
        time: 300
    },
    {
        stations: ["line1_6", "lineD2_17"],
        time: 480
    },
    {
        stations: ["line1_8", "line10_10"],
        time: 180
    },
    {
        stations: ["line1_8", "line6_10"],
        time: 180
    },
    {
        stations: ["line1_9", "line7_12"],
        time: 180
    },
    {
        stations: ["line1_10", "line2_12"],
        time: 240
    },
    {
        stations: ["line1_11", "line9_12"],
        time: 360
    },
    {
        stations: ["line1_11", "line3_13"],
        time: 300
    },
    {
        stations: ["line1_11", "line4_1"],
        time: 180
    },
    {
        stations: ["line1_13", "line5_7"],
        time: 300
    },
    {
        stations: ["line1_15", "line14_16"],
        time: 420
    },
    {
        stations: ["line2_5", "line14_24"],
        time: 720
    },
    {
        stations: ["line2_5", "lineD2_11"],
        time: 660
    },
    {
        stations: ["line2_8", "line8A_2"],
        time: 300
    },
    {
        stations: ["line2_8", "line11_2"],
        time: 300
    },
    {
        stations: ["line2_9", "lineD1_17"],
        time: 300
    },
    {
        stations: ["line2_9", "line5_10"],
        time: 180
    }, 
    {
        stations: ["line2_11", "line9_11"],
        time: 240
    },
     {
        stations: ["line2_11", "line7_11"],
        time: 180
    }, 
    {
        stations: ["line2_12", "line3_14"],
        time: 240
    },
    {
        stations: ["line2_13", "line8_8"],
        time: 180
    },
    {
        stations: ["line2_13", "line6_12"],
        time: 180
    },
    {
        stations: ["line2_14", "line5_4"],
        time: 240
    },
    {
        stations: ["line2_15", "line14_11"],
        time: 600
    },
  /*  {
        stations: ["line2_18", "line11A_1"],
        time: 180
    }, */
    {
        stations: ["line2_20", "lineD2_29"],
        time: 240
    },
    {
        stations: ["line10_23", "line2_23"],
        time: 180
    },
        {
        stations: ["line3_3", "lineD2_7"],
        time: 180
    },
    {
        stations: ["line3_8", "line4_13"],
        time: 180
    },
    {
        stations: ["line3_8", "lineD1_22"],
        time: 600
    },
  /*  {
        stations: ["line3_9", "lineD1_21"],
        time: 120
    }, */
    {
        stations: ["line3_10", "line8A_6"],
        time: 120
    },
    {
        stations: ["line3_11", "line5_8"],
        time: 180
    },
    {
        stations: ["line3_11", "line4_4"],
        time: 240
    },
    {
        stations: ["line3_13", "line9_12"],
        time: 180
    },
    {
        stations: ["line3_13", "line4_1"],
        time: 240
    },
    {
        stations: ["line3_15", "line10_11"],
        time: 180
    },
    {
        stations: ["line3_15", "line5_2"],
        time: 240
    },
    {
        stations: ["line3_19", "line14_3"],
        time: 480
    },
    {
        stations: ["line3_15", "lineD2_18"],
        time: 240
    },
    {
        stations: ["line4_4", "line5_8"],
        time: 360
    }, 
    {
        stations: ["line4_5", "line11_6"],
        time: 180
    },
     {
        stations: ["line4_6", "lineD1_19"],
        time: 540
    },
    {
        stations: ["line4_6", "line14_18"],
        time: 360
    },
    {
        stations: ["line4_8", "line14_17"],
        time: 360
    },
    {
        stations: ["line4_9", "lineD1_20"],
        time: 300
    },
     {
        stations: ["line4_13", "lineD1_22"],
        time: 600
    },
    {
        stations: ["line5_1", "lineD2_17"],
        time: 600
    },
    {
        stations: ["line5_2", "line10_11"],
        time: 360
    },
    {
        stations: ["line5_2", "lineD2_18"],
        time: 240
    },
    {
        stations: ["line5_3", "line7_14"],
        time: 180
    },
    {
        stations: ["line5_3", "line8_7"],
        time: 180
    },
    {
        stations: ["line5_5", "line9_14"],
        time: 180
    },
    {
        stations: ["line5_6", "line6_13"],
        time: 180
    },
    {
        stations: ["line5_9", "line7_10"],
        time: 180
    },
    {
        stations: ["line5_10", "lineD1_17"],
        time: 300
    },
    {
        stations: ["line5_11", "line9_9"],
        time: 180
    },
    {
        stations: ["line5_12", "line6_8"],
        time: 180
    },
    {
        stations: ["line6_4", "line14_29"],
        time: 240
    },
    {
        stations: ["line6_5", "line13_2"],
        time: 360
    },
    {
        stations: ["line6_7", "lineD2_16"],
        time: 300
    },
    {
        stations: ["line6_10", "line10_10"],
        time: 180
    },
    {
        stations: ["line6_11", "line7_13"],
        time: 120
    },
    {
        stations: ["line6_12", "line8_8"],
        time: 120
    },
    {
        stations: ["line6_15", "line14_15"],
        time: 300
    },
    {
        stations: ["line6_24", "line12_1"],
        time: 120
    },
    {
        stations: ["line7_3", "lineD2_9"],
        time: 180
    },
    {
        stations: ["line7_5", "lineD2_10"],
        time: 900
    },
    {
        stations: ["line7_6", "line14_21"],
        time: 660
    },
    {
        stations: ["line7_6", "line14_22"],
        time: 600
    },
    {
        stations: ["line7_7", "line8A_4"],
        time: 180
    },
    {
        stations: ["line7_7", "line11_4"],
        time: 180
    },
    {
        stations: ["line7_7", "line14_20"],
        time: 600
    },
    {
        stations: ["line7_8", "lineD1_18"],
        time: 150
    },
    {
        stations: ["line7_11", "line9_11"],
        time: 240
    },
    {
        stations: ["line7_14", "line8_7"],
        time: 240
    },
    {
        stations: ["line7_15", "line10_13"],
        time: 240
    },
    {
        stations: ["line7_16", "line14_9"],
        time: 1020
    },
    {
        stations: ["line7_17", "lineD2_22"],
        time: 120
    },
    {
        stations: ["line7_21", "line15_6"],
        time: 240
    },
    {
        stations: ["line8_4", "line14_5"],
        time: 600
    },
    {
        stations: ["line8_6", "line10_12"],
        time: 180
    },
    {
        stations: ["line8_6", "lineD2_19"],
        time: 360
    },
    {
        stations: ["line8A_1", "line9_8"],
        time: 180
    },
    {
        stations: ["line8A_1", "line11_1"],
        time: 60
    },
    {
        stations: ["line8A_1", "lineD1_16"],
        time: 240
    },
    {
        stations: ["line8A_2", "line11_2"],
        time: 60
    },
    {
        stations: ["line8A_3", "line11_3"],
        time: 60
    },
    {
        stations: ["line8A_4", "line11_4"],
        time: 60
    },
    {
        stations: ["line8A_4", "line14_20"],
        time: 480
    },
    {
        stations: ["line8A_5", "line11_5"],
        time: 60
    },
    {
        stations: ["line8A_5", "line14_19"],
        time: 240
    },
    {
        stations: ["line8A_5", "lineD1_19"],
        time: 600
    },
    {
        stations: ["line9_4", "line14_28"],
        time: 420
    },
    {
        stations: ["line9_5", "line10_4"],
        time: 60
    },
    {
        stations: ["line9_6", "line13_6"],
        time: 360
    },
    {
        stations: ["line9_6", "lineD1_14"],
        time: 240
    },
    {
        stations: ["lineD1_14", "line13_6"],
        time: 300
    },
    {
        stations: ["line9_7", "lineD2_14"],
        time: 120
    },
    {
        stations: ["line9_8", "lineD1_16"],
        time: 360
    },
    {
        stations: ["line9_8", "line11_1"],
        time: 180
    },
    {
        stations: ["line9_10", "line10_9"],
        time: 180
    },
    {
        stations: ["line9_16", "line14_13"],
        time: 720
    },
    {
        stations: ["line9_25", "line12_3"],
        time: 240
    },
    {
        stations: ["line10_3", "lineD1_12"],
        time: 420
    },
    {
        stations: ["line10_3", "line14_27"],
        time: 480
    },
    {
        stations: ["line10_5", "line13_5"],
        time: 240
    },
    {
        stations: ["line10_12", "lineD2_19"],
        time: 360
    },
    {
        stations: ["line10_14", "line14_10"],
        time: 720
    },
    {
        stations: ["line10_15", "line14_10"],
        time: 840
    },
    {
        stations: ["line10_16", "lineD2_24"],
        time: 840
    },
    {
        stations: ["line11_1", "lineD1_16"],
        time: 240
    },
    {
        stations: ["line11_4", "line14_20"],
        time: 480
    },
    {
        stations: ["line11_5", "lineD1_19"],
        time: 660
    },
    {
        stations: ["line11_5", "line14_19"],
        time: 240
    },
    {
        stations: ["line11_6", "lineD1_19"],
        time: 660
    },
    {
        stations: ["line14_18", "lineD1_19"],
        time: 600
    },
    {
        stations: ["line14_19", "lineD1_19"],
        time: 600
    },
    {
        stations: ["line14_27", "lineD1_12"],
        time: 180
    },
    {
        stations: ["line14_23", "lineD2_11"],
        time: 120
    },
    {
        stations: ["line14_8", "lineD2_21"],
        time: 120
    },

];
// Компонент поиска маршрута по карте
(function(w) {
    var graphOptimizedForTime,
        graphOptimizedForChanging;

    function StationNode(id){
        w.crow.ConnectedNode.apply(this, arguments);
    }
    StationNode.prototype = new w.crow.ConnectedNode();

    function getLinesWithIds() {
        if (metroLinesWithIds) {
            return metroLinesWithIds;
        } else {
            var lines = metro;

            return _.map(lines, function(lineObject, lineIndex) {
                return {
                    id: 'line' + lineIndex,
                    name: lineObject.line,
                    color: lineObject.color,
                    stations: _.map(lineObject.stations, function(stationName, stationIndex) {
                        return {
                            name: stationName,
                            id: 'line' + lineIndex + '_station' + stationIndex
                        };
                    })
                };
            });
        }
    }

    function getStationsConnections() {
        return metroStationsConnections;
    }

    function prepareGraph(options) {
        var g = {};
        var lines = getLinesWithIds();
        var connections = getStationsConnections();

        options = options || {};

        _.each(lines, function(line) {
            var firstNode, previousNode;

            _.each(line.stations, function(station) {
                var currentNode = new StationNode(station.id);

                g[station.id] = currentNode;

                if (!previousNode) {
                    firstNode = currentNode;
                }
                previousNode = currentNode;
            });
        });

        // Добавляем связи
        _.each(connections, function(connection) {

            var nodes = _.compact(_.map(connection.stations, function(stationId) {
                return g[stationId];
            }));
            var previousNode;
            var time = connection.time || 120;
            var duration = connection.inside ? time : options.connectionTime + time;

            _.each(nodes, function(currentNode) {
                if (previousNode) {
                    currentNode.connectTo(previousNode, duration);
                }
                previousNode = currentNode;
            });
        });

        return g;
    }

    function getNodeById(graph, id) {
        if (!graph) return;

        return graph[id];
    }

    function convertPathToSlices(path) {
        var slices = [];
        var nodes = path.nodes;
        for (var i = 0; i < nodes.length; i++) {
            var glued = glueWithPrevious(nodes, i);
            if (glued) {
                slices.push(glued);
            }
        }
        return slices;

        function glueWithPrevious(nodes, i) {
            var curr = nodes[i];
            var prev = nodes[i-1];

            if (!curr || !curr.id || !prev || !prev.id) return;

            var currLineId = curr.id.split('_')[0];
            var prevLineId = prev.id.split('_')[0];

            var currStationId = curr.id.split('_')[1];
            var prevStationId = prev.id.split('_')[1];

            var isSameLine = currLineId == prevLineId;

            if (isSameLine) {
                var stationIdNumbers = _.map([currStationId, prevStationId], function(stationId) {
                    return _.parseInt(stationId.replace('station', ''));
                });
                var sliceId = currLineId + '_' + _.sortBy(stationIdNumbers).join('-');
                return sliceId;
            } else {
                return _.sortBy([curr.id, prev.id]).join('-');
            }
        }
    }

    /**
     * Конвертирует передаваемый объект с результатом поиска маршрута (в формате
     * библиотеки crow) в массив, пригодный для отображения схемы
     *
     * @param {Object} path
     * @returns {Array}
     */
    function convertPathToScheme(path) {
        var stationsCounters = [];
        var changes;

        var sections = _.chain(path.nodes)

            // Создаем базовый массив со всеми станциями
            .map(function(node, i, arr) {
                var station = StationHelper.getStationById(node.id);
                var line = StationHelper.getLineByStationId(node.id);

                return {
                    _line: line.id,
                    _station: station.id,
                    station: station.name,
                    color: line.color,
                    outside: station.outside || false,
                    isMcd: StationHelper.stationIsMcd(station.id) || false,
                    validation: StationHelper.stationIsMcd(station.id) || line.id === "line13" || line.id === "line14"
                };
            })

            // Устанавливаем модификаторы
            .each(function(node, i, arr) {
                var next = arr[i + 1];

                if (next) {
                    node.modifier = node._line == next._line ? 'train' : 'afoot';
                }
            })

            // Удаляем промежуточные станции
            .map(function(node, i, arr) {
                var prev = arr[i - 1];
                var next = arr[i + 1];

                if (prev && next && prev._line == node._line && next._line == node._line) {
                    stationsCounters[stationsCounters.length - 1]++;
                    node = null;
                } else {
                    stationsCounters.push(1);
                }

                return node;
            })

            // Удаляем лишние элементы
            .compact()

            // Вставляем количество станций
            .each(function(node, i, arr) {
                if (node.modifier != 'afoot' && i != arr.length - 1) {
                    node.length = stationsCounters[i];
                }
            })

            .value();

        // По-честному считаем количество пересадок
        _.each(sections, function(node, i, arr) {
            var next = arr[i + 1];

            if (isTrain(node) && !isDefined(changes)) {
                changes = 0;
            } else if (!isTrain(node) && isTrain(next) && isDefined(changes)) {
                changes++;
            }
        });

        function isTrain(node) {
            return node && node.modifier == 'train';
        }

        function isDefined(a) {
            return typeof a !== 'undefined';
        }

        return {
            sections: sections,
            changesCount: changes || 0
        };
    }

    const transformationPathToLineSegmenst = ({ nodes }, addConnectionTime) => {
      const state = {
        prevStation: null,
        prevLine: null,
        lengthAcc: 0
      };

      return nodes.reduce((acc, node, index) => {
        const { prevLine, prevStation, lengthAcc } = state;
        const { connectionDistances, id } = node;
        const nextStation = nodes[index + 1] || null;
        const nextStationLineId = nextStation && StationHelper.getLineByStationId(nextStation.id).id;

        const lineId = StationHelper.getLineByStationId(id).id;
        const length = nextStation ?
          lineId === nextStationLineId ? 
          connectionDistances[nextStation.id] :
          Math.abs(addConnectionTime - connectionDistances[nextStation.id]) : 0;

        if ( !prevLine ) {
          state.prevLine = lineId;
          return [
            ...acc,
            {
              line: lineId,
              length
            }
          ]
        }

        if ( prevLine === lineId ) {
          const idx = acc.findIndex(({ line }) => line === lineId);
          const oldAcc = acc[idx];
          const update = {...oldAcc, length: oldAcc.length + length };
          return [
            ...acc.slice(0, idx),
            update,
            ...acc.slice(idx + 1)
          ]
        } else {
          state.prevLine = lineId;
          return [
            ...acc,
            {
              line: lineId,
              length
            }
          ]
        }
      }, [])
    }

    /**
     * Ищет путь между станциями
     *
     * @param  {String} from ID станции отправления
     * @param  {String} to   ID станции назначения
     * @return {Object}      Путь в формате библиотеки crow
     */
    function findPath(from, to) {
        var graphOptimizedForTimeOptions = { connectionTime: 0 };
        var graphOptimizedForChangingOptions = { connectionTime: 2000000};

        graphOptimizedForTime = graphOptimizedForTime || prepareGraph(graphOptimizedForTimeOptions);
        graphOptimizedForChanging = graphOptimizedForChanging || prepareGraph(graphOptimizedForChangingOptions);

        var result = _.map([{
            graph: graphOptimizedForTime,
            options: graphOptimizedForTimeOptions
        }, {
            graph: graphOptimizedForChanging,
            options: graphOptimizedForChangingOptions
        }], function(graphObject) {
            var graph = graphObject.graph;
            var fromNode = getNodeById(graph, from);
            var toNode = getNodeById(graph, to);

            var path = w.crow.Graph.findGoal({start: fromNode, goal: toNode, algorithm: "dijkstra"});
            var usedStations = _.map(path && path.nodes || [], function(node) {
                return node.id;
            });

            var changesCount = _.reduce(usedStations, function(sum, nodeId, index) {
                if (index > 0) {
                    var prevLineId = usedStations[index-1].split('_')[0].replace('line', '');
                    var currLineId = nodeId.split('_')[0].replace('line', '');

                    if (prevLineId != currLineId) {
                        sum++;
                    }
                }
                return sum;
            }, 0);

            // Поправка на хак для приоритета по пересадкам
            const timeOnLines = transformationPathToLineSegmenst(path, graphObject.options.connectionTime)
                                .map(el => {
                                  return {
                                    ...el,
                                    length: parseInt(el.length / 60)
                                }});
            var duration = path.length - graphObject.options.connectionTime * changesCount;
            var scheme = _.extend(convertPathToScheme(path), {
                duration: parseInt(duration / 60),
                timeOnLines
            });

            if (duration > 0) {
                return {
                    raw: path,
                    slices: convertPathToSlices(path),
                    scheme: scheme,
                    stations: usedStations,
                    time: duration,
                    changesCount: scheme.changesCount
                };
            }
        });

        //console.log(result);

        return _.uniq(_.compact(result), function(resultItem) {
            return JSON.stringify(_.pick(resultItem, 'duration', 'changesCount'));
        });
    }

    w.PathFinder = {
        findPath: findPath
    };

})(window);
(function(w) {

    function getStationById(stationId) {
        var allStations = _.flatten(_.map(metroLinesWithIds, function(line) {
            return line.stations;
        }));

        return _.find(allStations, function(station) {
            return station.id == stationId;
        });
    }

    function getLineByStationId(stationId) {
        var lines = metroLinesWithIds;
        var lineId = stationId.split('_')[0];

        return _.find(lines, function(line) {
            return line.id == lineId;
        });
    }

    function findSameStationOnOtherLines(stationId) {
        var thisStation = getStationById(stationId);

        var connections = metroStationsConnections;
        var myConnections = _.filter(connections, function(con) {
           return _.contains(con.stations, stationId);
        });

        var allConnectedStationsIds = _.chain(myConnections).map(function(con) {
            return con.stations;
        }).flatten().uniq().value();

        var allConnectedStations = _.map(allConnectedStationsIds, getStationById);

        var sameNameStations = _.filter(allConnectedStations, function(station) {
            return station.name == thisStation.name;
        });

        return sameNameStations;
    }

    function stationIsMcd(stationId) {
      const { id } = getLineByStationId(stationId);
      return id === 'lineD1' || id === 'lineD2';
    }

    w.StationHelper = {
        getStationById: getStationById,
        findSameStationOnOtherLines: findSameStationOnOtherLines,
        getLineByStationId: getLineByStationId,
        stationIsMcd: stationIsMcd
    };
})(window);
blocks.callout = {
    cls: {
        callout: '.callout',
        title: '.callout__header-title',
        from: '.callout__from',
        to: '.callout__to',
        info: '.callout__header-info'
    },

    init: function() {
        var that = this;

        $(this.cls.callout).on('click', this.cls.from, function(e) {
            var id = that.getCurrentlySelectedId();
            if (id) {
                blocks.fromto.setFrom(id);
                that.hide();
            }
        });

        $(this.cls.callout).on('click', this.cls.to, function(e) {
            var id = that.getCurrentlySelectedId();
            if (id) {
                blocks.fromto.setTo(id);
                that.hide();
            }
        });

        $(this.cls.callout).on('click', this.cls.info, function(e) {
            $('.map').addClass('_card_active');
        });
    },

    getCurrentlySelectedId: function() {
        var data = this.data;
        if (data) {
            var id = data.id;

            if (data.crossing) {
                id = $('[name=crossing]:checked').val();
            }

            return id;
        }
    },

    hide: function() {
        $(this.cls.callout).hide();
    },

    show: function(stationId) {
        if (stationId) {
            var data = {};

            var station = StationHelper.getStationById(stationId);
            var line = StationHelper.getLineByStationId(stationId);
            var sameStations = StationHelper.findSameStationOnOtherLines(stationId);

            data.id = stationId;
            data.color = line.color;
            data.title = station.name;

            if (sameStations && sameStations.length > 1) {
                data.crossing = _.map(sameStations, function(station) {
                    var line = StationHelper.getLineByStationId(station.id);
                    return {
                        id: station.id,
                        title: line.isCircle ? 'Кольцевая' : line.isMCD ? 'МЦД' : 'Радиальная',
                        color: line.color
                    };
                });
                _.first(data.crossing).checked = true;
            }

            this.data = data;

            var newHTML = Metro.templates.callout({ callout: data });
            if (!station.close) {
              $(this.cls.callout).html($(newHTML).html());
            }
        }
        if(!station.close) {
          $(this.cls.callout).show();
        }
    },
};
blocks.apps = {
    init: function() {
        $(function () {
            littleParallax( $( '.apps__iphone' ), 0.5);
        });

        function littleParallax(bg, step) {
            var backGroundBlock = bg,
                parentBlock = backGroundBlock.parent(),
                win = $( window ),
                winHeight = win.height();

            var stepBackground = parentBlock.height() * step;

            backGroundBlock.css({
                'height': ( parentBlock.outerHeight() + ( stepBackground ) ) + 'px',
                'top': ( -stepBackground ) + 'px'
            });

            win.on( 'scroll', function () {
                var winPosition = win.scrollTop(),
                    offsetTop = parentBlock.offset().top;

                if ( ( winPosition + winHeight ) >= ( offsetTop ) && winPosition <= ( offsetTop + parentBlock.outerHeight() )) {
                    backGroundBlock.css({
                        'top': Math.ceil( -stepBackground * ( 1 - (( winPosition  + winHeight - offsetTop ) / ( winHeight + parentBlock.outerHeight() ))) ) + 'px'
                    });
                }
            });
        }
    }
};
blocks.card = {
    cls: {
        article: 'card__article',
        header: 'card__article-header',
        close: 'card__close'
    },

    init: function() {
        this.bind();
    },

    bind: function() {
        var that = this,
            header = $('.' + this.cls.header),
            article = $('.' + this.cls.article),
            close = $('.' + this.cls.close);

        header.on('click', function() {
            var currentArticle = $(this).parents('.' + that.cls.article);

            if (!currentArticle.hasClass('_external')) {
                if (currentArticle.hasClass('_active')) {
                    currentArticle.removeClass('_active');
                } else {
                    article.removeClass('_active');
                    currentArticle.addClass('_active');
                }
            }
        });

        close.on('click', function() {
            $('.map').removeClass('_card_active');
        });
    }
};
blocks.form = {
  init: function() {
    var date = $('.form__item._date input');
    var time = $('.form__item._time input');

    $(document).ready(function(){
      date.inputmask("d/m/y",{ "placeholder": "дд/мм/гггг"});
      //console.log(date);
      time.inputmask("hh:mm",{ "placeholder": "чч:мм"});
    });
  }
};
blocks.fromto = {

    block: $('.fromto'),

    cls: {
        select: 'fromto__select',
        field: 'fromto__select-field',
        fieldIn: 'fromto__select-field-in',
        item: 'fromto__select-list-item',
        input: 'fromto__select-input',
        listIn: 'fromto__select-list-in',
        clear: 'fromto__clear'
    },

    data: {
        from: {},
        to: {}
    },

    init: function() {
        var optionsLists = this.block.find('.' + this.cls.listIn);

        optionsLists.html(this.renderOptions(this.viewModel()));
        this.handlers();

        var from = getParameterByName('from');
        var to = getParameterByName('to');

        if (from && to) {
            this.setFrom(from);
            this.setTo(to);
            this.runSearch();
            location.hash = '';
        }

        function getParameterByName(name) {
            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var regex = new RegExp("[\\#&]" + name + "=([^&#]*)"),
                results = regex.exec(location.hash);
            return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
        }

    },

    viewModel: function() {
        var data = [];

        _.each(metroLinesWithIds, function(line) {
            _.each(line.stations, function(station) {
                data.push({
                    id: station.id,
                    label: station.name,
                    color: line.color,
                    close: station.close
                });
            });
        });

        function groupByFirstLetter(item) {
            return item.label.charAt(0);
        }

        return _.groupBy(_.sortBy(data, 'label'), groupByFirstLetter);
    },

    renderOptions: function(data) {
        var out = '';

        _.each(data, function(group, key) {
            out += '<div class="fromto__select-list-title">' + key + '</div>';

            _.each(group, function(station) {
                out += '' +
                    '<div class="fromto__select-list-item"' +
                        ' style="border-color: #' + station.color + ';"' +
                        ' data-color="#' + station.color + '"' +
                        ' data-id="' + station.id + '">' +
                        station.label +
                    '</div>';
            });
        });

        return out;
    },

    handlers: function() {
        var ft = this,
            field = $('.' + ft.cls.field),
            item = $('.' + ft.cls.item),
            input = $('.' + ft.cls.input),
            clear = $('.' + ft.cls.clear),
            map = $('.map');

        function setSelectActive(select, on) {
            if (on) {
                select.addClass('_active');
            } else {
                select.removeClass('_active');
            }

            var someSelectIsActive = false;
            $('.' + ft.cls.select).each(function(index, select) {
                if ($(select).hasClass('_active')) {
                    someSelectIsActive = true;
                }
            });

            if (someSelectIsActive) {
                map.addClass('_sidebar_active');
            } else {
                map.removeClass('_sidebar_active');
            }
        }

        field.on('click', function() {
            var select = $(this).parents('.' + ft.cls.select),
                otherSelect = $('.' + ft.cls.select).not('#' + select[0].id);

            if (!select.hasClass('_active')) {
                setSelectActive(otherSelect, false);
                setSelectActive(select, true);
            } else {
                setSelectActive(select, false);
                if (!otherSelect.find('.' + ft.cls.input).val()) {
                    setSelectActive(otherSelect, true);
                }
            }
        });

        item.on('click', function() {
            var select = $(this).parents('.' + ft.cls.select),
                field = select.find('.' + ft.cls.field),
                fieldIn = select.find('.' + ft.cls.fieldIn),
                input = select.find('.' + ft.cls.input),
                otherSelect = $('.' + ft.cls.select).not('#' + select[0].id);

            var item = $(this);

            ft.setActive(select, {
                id: item.data('id'),
                color: item.data('color'),
                label: item.text()
            });

            setSelectActive(select, false);

            if (!otherSelect.find('.' + ft.cls.input).val()) {
                setSelectActive(otherSelect, true);
            }
        });

        input.on('change', function() {
            // Не срабатывает когда программно меняется значение инпута
            // Открыть второй селект, если надо
            // запустить результаты, если надо
        });

        clear.on('click', function() {
            blocks.map.clearRoute();
            blocks.fromto.clearSelects();
        });
    },

    clearSelects: function() {
        var that = this;
        var selects = $('.' + that.cls.select);

        selects.each(function() {
            var select = $(this),
                field = select.find('.' + that.cls.field),
                fieldIn = select.find('.' + that.cls.fieldIn),
                input = select.find('.' + that.cls.input);

            field
                .css('background-color', '#e3e4e6')
                .removeClass('_filled');

            fieldIn.text(fieldIn.attr('data-placeholder'));
            input.val('');
        });
    },

    setActive: function(select, data) {
        var field = select.find('.' + this.cls.field),
            fieldIn = select.find('.' + this.cls.fieldIn),
            input = select.find('.' + this.cls.input);

        field
            .css('background-color', data.color)
            .addClass('_filled');

        fieldIn.text(data.label);
        input.val(data.id);

        this.runSearch();
    },

    setFrom: function(id) {
        var selects = $('.' + this.cls.select);
        var station = StationHelper.getStationById(id);
        var line = StationHelper.getLineByStationId(id);

        this.setActive(selects.first(), {
            id: id,
            label: station.name,
            color: '#' + line.color
        });
    },

    setTo: function(id) {
        var selects = $('.' + this.cls.select);
        var station = StationHelper.getStationById(id);
        var line = StationHelper.getLineByStationId(id);

        this.setActive(selects.last(), {
            id: id,
            label: station.name,
            color: '#' + line.color
        });
    },

    runSearch: function() {
        var ft = this,
            inputs = $('.' + ft.cls.input),
            map = $('.map');

        var values = inputs.map(function(index, inputItem) {
            return $(inputItem).val();
        });

        values = _.compact(values);

        if (values.length == 2) {
            var paths = PathFinder.findPath(values[0], values[1]);

            ft.data = {
                scheme: [],
                paths: []
            };

            _.each(paths, function(path, index) {
                if (index == 0) {
                    blocks.map.drawRoute(path);
                    blocks.map.elem.result.empty();
                }
                if (path.time) {
                    // Рисуем упрощенную схему
                    ft.data.scheme.push(path.scheme);
                    ft.data.paths.push(path);
                    map.addClass('_scheme_active');
                } else {
                    map.removeClass('_scheme_active');
                }
            });

            blocks.scheme.render(ft.data);
            

        } else {
            map.removeClass('_scheme_active');
        }
    }
};



blocks.header = {

    init: function() {
        var win = $(window),
            header = $('.header'),
            body = $('body'),
            preloader = $('.preloader'),
            stickedClass = '_sticked__fake',
            slimHead = '_slimHead',
            hoverClass = '_hover',
            searchClass = '_search',
            searchBtn = $('.header__search'),
            nav = $('.nav'),
            isMap = body.hasClass('_map');

        if (!isMap && !isMobileDevice()) {
            win.on('scroll', function() {
                if (win.scrollTop() > 0) {
                    if (body.hasClass('_nav-active')) {
                        blocks.nav.close(function (){
                            header.addClass(stickedClass).removeClass(searchClass);
                            body.addClass(slimHead);
                        });
                    } else {
                        header.addClass(stickedClass).removeClass(searchClass);
                        body.addClass(slimHead);
                    }
                } else {
                    header.removeClass(stickedClass).removeClass(hoverClass);
                    body.removeClass(slimHead);
                }
            });
        } else if (!isMobileDevice()) {
            header.addClass(stickedClass);

            header.hover(
                function(e) {
                    header.removeClass(stickedClass);
                },
                function(e) {
                    header.addClass(stickedClass);
                }
            );
        }

        searchBtn.click(function(e) {
            e.preventDefault();

            header.addClass(searchClass);
        });

        header.hover(
            function(e) {
                if (win.scrollTop() > 0) {
                    header.removeClass(stickedClass).addClass(hoverClass);
                }
            },
            function(e) {
                if (win.scrollTop() > 0) {
                    header.addClass(stickedClass).removeClass(hoverClass).removeClass(searchClass);
                }
            }
        );

        //$(function() {
        //    if (preloader.hasClass('_show')) {
        //        setTimeout(function(){
        //            preloader.removeClass('_show');
        //        }, 2500);
        //    }
        //});
    }
};
blocks.map = {

    elem: {
        viewport: $('.map__viewport'),
        viewportIn: $('.map__viewport-in'),
        background: $('.map__layer-img'),
        route: $('#map-route'),
        markers: $('#map-markers'),

        result: $('.map__aside-result'),

        zoomIn: $('.zoom__in'),
        zoomOut: $('.zoom__out')
    },

    init: function() {
        this.showMarkers();
        panzoom(document.querySelector('.map__viewport-in'), {
          onDoubleClick: function(e) {
            e.preventDefault();
            // `e` - is current double click event.
            return false; // tells the library to not preventDefault, and not stop propagation
        },
        onTouch: function(e) {
          // `e` - is current touch event.
          e.preventDefault();
          // скрыть коллаут
          blocks.callout.hide();
          return false;
        },
        zoomSpeed: 0.1,
        maxZoom: 2.8,
        minZoom: 0.3,
        zoomDoubleClickSpeed: 1,
        contain: 'inside' })
        .zoomAbs(
          -400, // initial x position
          25, // initial y position
          0.5  // initial zoom 
        );
        // this.getViewportSize();
        this.handlers();
    },

    handlers: function() {
       let click;
       let initPoint;
       let finalPoint;
        this.elem.markers.on('touchstart', 'g', function(e) {
          e.preventDefault();
          initPoint=event.changedTouches[0];
          click = true;
        });

        // this.elem.markers.on('touchmove', 'g', function(e) {
        //   e.preventDefault();
        //   click = false;
        // })

        this.elem.markers.on('touchend', 'g', function(e) {
          e.preventDefault();
          finalPoint=event.changedTouches[0];
          let xAbs = Math.abs(initPoint.pageX - finalPoint.pageX);
          let yAbs = Math.abs(initPoint.pageY - finalPoint.pageY);
          if (xAbs < 10 && yAbs < 10) {
            e.stopPropagation()
            var id = $(this).attr('id');
            blocks.callout.show(id);
          }
        })
    },

    moveUnderCallout: function(element) {
        var elementOffset = $(element).offset();
        var left = elementOffset.left;
        var top = elementOffset.top;

        var callout = $('.callout');
        var destLeft = callout.offset().left + callout.width() / 2;
        var destTop = callout.offset().top + callout.height() + 30;

        this.state.shiftX += destLeft - left;
        this.state.shiftY += destTop - top;

        this.applyState(this.state.shiftX, this.state.shiftY);
    },

    drawRoute: function(path) {
        var slices = path && path.slices;
        var stations = path && path.stations;

        if (slices && slices.length) {
            $('#map-background').css('opacity', 0.3);
            $('#map-route').css('opacity', 1);
        } else {
            $('#map-background').css('opacity', 1);
        }

        var markers = $('#map-markers').find('g');
        if (stations && stations.length > 1) {
            markers.each(function(index, markerElement) {
                var marker = $(markerElement);
                var markerId = marker.attr('id');

                if (_.contains(stations, markerId)) {
                    if (_.first(stations) == markerId || _.last(stations) == markerId) {
                        marker.attr('class', '_highlighted');
                    } else {
                        marker.attr('class', '');
                    }
                } else {
                    marker.attr('class', '_faded');
                }
            });
        } else {
            markers.each(function(index, markerElement) {
                var marker = $(markerElement);
                marker
                    .attr('class', '');
            });
        }

        var newRoute = '<svg viewBox="0 0 1600 2000">';
        var newSlices = slices && slices.slice().sort((a, b) => {
          return a.length - b.length;
        });
        _.each(newSlices, function(slice) {
            newRoute += '<use xlink:href="#' + slice + '"></use>';
        });
        newRoute += '</svg>';

        this.elem.route.html(newRoute);
    },

    clearRoute: function() {
        $('#map-background').css('opacity', 1);
        $('#map-markers').find('g').attr('class', '');
        $('#map-route').css('opacity', 0);
        $('.map').removeClass('_scheme_active');
    },

    showMarkers: function() {
        var out = '',
            markers = [],
            library;

        // Take library DOM-tree
        getMapLibrary(function() {
            library = $('.map__library svg');

            _.each(metroLinesWithIds, function(line) {
                _.each(line.stations, function(station) {
                    var symbol = library[0].querySelector('symbol[id=' + station.id + ']');

                    if (!symbol) {
                        console.warn('Cannot find a symbol ' + station);
                    } else {
                        out += '<g id="' + station.id + '">' +
                            symbol.innerHTML +
                        '</g>';
                    }
                });
            });

            $('#map-markers').html('<svg viewBox="0 0 1600 2000">' + out + '</svg>');
        });
    }
};

blocks.validation__path = {

  cls: {
    closeButton: $('.validation__turn'),
    body: $('.map__validation'),
    paths_wrapper: [$('#val_path-0'), $('#val_path-1')],
    clear_button: $('.fromto__clear'),
    showValidationButton: $('.fromto__validation-info')
  },

  init: function() {
    this.handlers();
  },

  handlers: function() {
    that = this;
    var initialPoint;
    var finalPoint;
    document.querySelector('.validation__turn').addEventListener('touchstart', function(event) {
      event.preventDefault();
      event.stopPropagation();
      initialPoint=event.changedTouches[0];
      }, false);

      document.querySelector('.validation__turn').addEventListener('touchend', function(event) {
      event.preventDefault();
      event.stopPropagation();
      finalPoint=event.changedTouches[0];
      var xAbs = Math.abs(initialPoint.pageX - finalPoint.pageX);
      var yAbs = Math.abs(initialPoint.pageY - finalPoint.pageY);

      if (xAbs > 20 || yAbs > 20) {
        if (finalPoint.pageY > initialPoint.pageY) {
          that.cls.body.removeClass('open');
        } else {
          
        }
      }
    }, false);

    this.cls.showValidationButton.on('click', function(e) {
      that.cls.body.addClass('open');
    })

    that.cls.clear_button.on('click', function() {
      that.clear();
      that.hiddenButton();
    })
  },

  clear: function() {
    this.cls.paths_wrapper.forEach(wrapper => {
      wrapper.empty();
      wrapper.removeClass('active');
    });
    this.cls.paths_wrapper[0].addClass('active');
  },

  showButton: function() {
    this.cls.showValidationButton.addClass('active');
  },

  hiddenButton: function() {
    this.cls.showValidationButton.removeClass('active');
  },

  combineData: function(data) {
    this.clear();
    this.hiddenButton();
    const MCD_LINE_1 = 'lineD1';
    const MCD_LINE_2 = 'lineD2';
    const MONO_LINE = 'line13';
    const MCC_LINE = 'line14';
    const OUTSIDE_COST = 45;
    const DEFAULT_COST = 38;
    const COME_TEXT = 'Валидация на вход'
    const EXIT_TEXT = 'Валидация на выход';
    const CHANGE_TEXT = 'Переход';
    const CARD_ELEMENT = "<img src='/img/card-val.svg'>";
    const { scheme } = data;

    const renderNode = (stations, selector) => {
      const nodes = stations.map(({ station, cost, validationNode, _line }) => {
        return $('<div>', {
          class: 'validation__path',
          append: $('<div>', {
            class: 'path__wrapper',
            append: $('<h3>', {
              text: station,
              append: $('<img>', {
                class: 'line__logo ' + _line,
                src: '/img/lines/' + _line + '.svg',
              })
            })
            .add(validationNode)
            .add(cost && $('<p>', {
              text: 'Списание ',
              append: $('<span>', {
                class: "price",
                text: cost + ' р.'
              })
            }))
          })
        })
      });

      nodes.forEach(node => {
        node.appendTo(selector);
      });

      this.showButton();
    }


    scheme.forEach(({ sections }, index) => {
      if ((sections.findIndex(({ _line }) => _line === MCD_LINE_1 || _line === MCD_LINE_2)) === -1) {
        this.cls.paths_wrapper[index].addClass('empty');
        return;
      }

      const state = {
        comingCost: null,
        prevIsMcd: false
      };


      this.cls.paths_wrapper[index].removeClass('empty');


      const res = sections.reduce((acc, st, index) => {

        const { modifier, _line, _station, station, isMcd, validation, outside } = st;

        if (index > 0) state.prevIsMcd = sections[index - 1].isMcd;

        const validationNode = $('<p>');

        const { prevIsMcd, comingCost } = state;

        if (modifier === 'train') {
          if ( index === 0 ) {
            state.comingCost = outside ? OUTSIDE_COST : DEFAULT_COST;
            validationNode.text(COME_TEXT)
                          .append(CARD_ELEMENT);
            return [...acc, {
                ...st,
                cost: state.comingCost,
                validationNode
              }]
          }

          if ( prevIsMcd || isMcd || validation || sections[index - 1].validation) {
            validationNode.text(COME_TEXT).append(CARD_ELEMENT);
            return [...acc, {
              ...st,
              cost: 0,
              validationNode
            }]
          } else {
            return [...acc, {
              ...st,
              cost: 0,
              validationNode
            }]
          }
          
        } else if (modifier === 'afoot') {
          if ( index === 0 ) {
            state.comingCost = outside ? OUTSIDE_COST : DEFAULT_COST;

            const text = isMcd ? `${COME_TEXT} <br> ${EXIT_TEXT}` : COME_TEXT;
            
            validationNode
            .html(text)
            .append(CARD_ELEMENT);

            return [...acc, {
                ...st,
                cost: state.comingCost,
                validationNode
              }]
          }

          if (isMcd) {
            const cost = outside ? comingCost === DEFAULT_COST ? 7 : 0 : 0;
            const text = !prevIsMcd  ? `${COME_TEXT} <br> ${EXIT_TEXT}` : EXIT_TEXT;
            validationNode.html(text).append(CARD_ELEMENT);
            return [...acc, {
                ...st,
                cost,
                validationNode
            }]
          } else if (sections.length -1 > index) {
            validationNode.text(CHANGE_TEXT);
            return [...acc, {
              ...st,
              cost: 0,
              validationNode
            }]
          }

        } else if (!modifier) {
          if (isMcd) {
            const cost = outside ? comingCost === DEFAULT_COST ? 7 : 0 : 0;
            const text = !prevIsMcd  ? `${COME_TEXT} <br> ${EXIT_TEXT}` : EXIT_TEXT;
            validationNode.html(text).append(CARD_ELEMENT);
            return [...acc, {
                ...st,
                cost,
                validationNode
            }]
          } else if ((validation && !sections[index - 1].validation) || prevIsMcd ) {
            validationNode.text(COME_TEXT).append(CARD_ELEMENT);
            return [...acc, {
              ...st,
              cost: 0,
              validationNode
            }]
          } else if (sections[index - 1].validation && !validation) {
            validationNode.text(COME_TEXT).append(CARD_ELEMENT);
            return [...acc, {
              ...st,
              cost: 0,
              validationNode
            }]
          }
           return [...acc, {
            ...st,
            cost: 0,
            validationNode
          }]
        }
      }, []);

     renderNode(res, `#val_path-${index}`);
    });
},
}

blocks.shemeInfo = {

  elem: {
    paths: ["#path-0", "#path-1"]
  },

  init: function() {

  },

  lineIds: {
    mcd1: 'lineD1',
    mcd2: 'lineD2'
  },
 
  checkDoubleEnterMetro: function(path, index, timeOnLines) {

    const mcdStationFirstIndex = path.findIndex(({ isMcd }) => isMcd);
    const mcdStationLastIndex = _.findLastIndex( path, ({ isMcd }) => isMcd);
    
    const notMcdStationIndexLast = _.findLastIndex( path, ({ isMcd }) => !isMcd);
    const notMcdStationIndexFirst = path.findIndex(({ isMcd }) => !isMcd);

    // console.log(`${mcdStationFirstIndex} ${mcdStationLastIndex} ${notMcdStationIndexFirst} ${notMcdStationIndexLast}`)

    if (mcdStationFirstIndex > notMcdStationIndexFirst &&
        mcdStationLastIndex < notMcdStationIndexLast &&
        mcdStationFirstIndex !== mcdStationLastIndex) {
      this.renderDefaultCost(path, index, true, timeOnLines);
    } else {
      this.renderDefaultCost(path, index, false, timeOnLines);
    }
  },
 
  
   renderDefaultCost: function(path, index, doubleCominMetro = false, timeOnLines) {

    const hasOutsideStation = path.findIndex(({ outside }) => outside) > -1;

    const hasMetroStation = path.findIndex(({ isMcd }) => !isMcd) > -1;

    const costWithMetro = hasMetroStation ? 38 : 0;

    const timeLeftCost = timeOnLines.length > 1 &&
        timeOnLines.find(({ length }) => length >= 90) ?
        38 : 0

    // const outsideCost = hasOutsideStation && hasMetroStation ? 7 : 0;

    const troikaCost = (hasOutsideStation ? 45 : 38) + timeLeftCost;

    const mcd1Stations = path.filter(({ _line }) => _line === this.lineIds.mcd1);
    const mcd2Stations = path.filter(({ _line }) => _line === this.lineIds.mcd2);

    let cost = doubleCominMetro ? 38 : 0;
    cost += costWithMetro;

    if (mcd1Stations.length) {
      const [from, ...other] = mcd1Stations;
      const fromId = from._station;
      const to = other.length ? other[other.length - 1]._station : fromId;
      const { toIds } = metroCost.find(st => st.fromId === fromId);
      cost += toIds.find(({ id }) => id === to).cost;
    }
    if (mcd2Stations.length) {
      const [from, ...other] = mcd2Stations;
      const fromId = from._station;
      const to = other.length ? other[other.length - 1]._station : fromId;
      const { toIds } = metroCost.find(st => st.fromId === fromId);
      cost += toIds.find(({ id }) => id === to).cost;
    }

    const coast = document.createElement('div');
    coast.classList.add('scheme__coat');

    coast.textContent = `Текущая стоимость поездки ${ cost } ₽`;
    const mcdCost = document.createElement('div');
    mcdCost.classList.add('scheme__coat');
    mcdCost.textContent = `По тарифу "Кошелек" карты "Тройка" ${troikaCost} ₽`;
    $(`#path-${index} .scheme__duration`).after(coast);
    $(`#path-${index} .scheme__coat`).before(mcdCost);

    //this.renderMcdInformation();
  },

  checkMcdInPath: function(path) {
    return path.findIndex(({ isMcd }) => isMcd) > -1 ? true : false;
  },

  renderCoast: function({ scheme }) {
  scheme.forEach(({ changesCount, sections, timeOnLines }, index) => {
    if (this.checkMcdInPath(sections)) {
      const canMcdMiddle = changesCount >= 2;
      canMcdMiddle ? this.checkDoubleEnterMetro(sections, index, timeOnLines) : this.renderDefaultCost(sections, index, false, timeOnLines);
    }
  })
  }
    
};

function isMobileDevice() {
    var keyWords = ['Android', 'webOS', 'iPhone', 'iPad', 'iPod', 'BlackBerry', 'Windows Phone'],
        ua = navigator.userAgent,
        isMobile = false;

    _.each(keyWords, function(word) {
        if (ua.match(RegExp(word, 'i'))) {
            isMobile = true;
        }
    });

    return isMobile;
}

/**
 * Устанавливает обработчики управления указателем (touch, mouse, pen)
 */
function bindMapControl() {
    var M = blocks.map,
        touch = {},
        handlers = {},
        evt = getSupportedEvents(),
        events = [];

    /**
     * Обработчик touchstart
     *
     * @param {Event} e Событие pointerdown
     */
    handlers.onStart = function(e) {
        // if (isMobileDevice()) return;

        // Запоминаем координаты и время
        touch.x1 = e.clientX || e.touches && e.touches[0].clientX;
        touch.y1 = e.clientY || e.touches && e.touches[0].clientY;
        touch.t1 = new Date();
        touch.isPressed = true;

        M.elem.viewport.addClass('_dragging');
        M.elem.viewportIn.css('transition-duration', '0s');
    };

    /**
     * Обработчик touch move
     *
     * @param {Event} e Событие pointermove
     */
    handlers.onMove = function(e) {
        // if (isMobileDevice()) return;

        if (touch.isPressed) {
            // смещения
            touch.shiftX = (e.clientX || e.touches && e.touches[0].clientX) - touch.x1;
            touch.shiftY = (e.clientY || e.touches && e.touches[0].clientY) - touch.y1;

            // абсолютные значения смещений
            touch.shiftXAbs = Math.abs(touch.shiftX);
            touch.shiftYAbs = Math.abs(touch.shiftY);

            // Detect multitouch
            touch.isMultitouch = touch.isMultitouch || !!e.touches && e.touches.length > 1;

            if (touch.isMultitouch) {
                end();

                return;
            }

            move();

            // запрещаем скролл
            if (e.preventDefault) {
                e.preventDefault();
            }
        }
    };

    /**
     * Обработчик touch end
     *
     * @param {Event} e Событие pointerup
     */
    handlers.onEnd = function(e) {
        // if (isMobileDevice()) return;

        M.elem.viewportIn.css('transition-duration', '200ms');
        end();
    };

    /**
     * Обработчик mousewheel
     *
     * @param {Event} e Событие pointerup
     */
    handlers.onWheel = _.throttle(function(e) {
        var s = M.state,
            zoomValue = e.wheelDelta > 0 ? s.zoom * 2 : s.zoom / 2;

        s.zoom = validateZoom(zoomValue);
        applyState();
    }, 500);

    /**
     * Двигаем карту
     */
    function move() {
        var x = M.state.shiftX + touch.shiftX,
            y = M.state.shiftY + touch.shiftY,
            coords = validateCoords(x, y);

        applyState(coords.x, coords.y);
    }

    /**
     * перестали двигать карту
     */
    function end() {
        var x = M.state.shiftX + touch.shiftX,
            y = M.state.shiftY + touch.shiftY,
            coords = validateCoords(x, y);

        if (x && y) {
            M.state.shiftX = coords.x;
            M.state.shiftY = coords.y;
        }

        M.elem.viewport.removeClass('_dragging');
        touch = {};
    }

    /**
     * Применяем текущий сдвиг и масштаб
     */
    function applyState(x, y) {
        var coords;

        if (!x || !y) {
            coords = validateCoords(M.state.shiftX, M.state.shiftY);
            x = coords.x;
            y = coords.y;
        }

        M.elem.viewportIn.css({
            transform: 'translate3d(' + x + 'px, ' + y + 'px, 0) scale(' + M.state.zoom / 2 + ')'
        });
    }

    M.applyState = applyState;


    /**
     * Проверяем валидность отступов
     */
    function validateCoords(x, y) {
        var s = M.state,
            minX, minY, maxX, maxY,
            zoomShiftX = s.ox * (s.zoom - 1),
            zoomShiftY = s.oy * (s.zoom - 1);

        // Координаты левого верхнего угла
        var realX = s.winW / 2 - s.w / 2;
        var realY = s.winH / 2 - s.h / 2;

        // Ну тут всё понятно.
        minX = Math.min(s.winW - s.safe - s.w - realX, s.safe - realX) - zoomShiftX;
        maxX = Math.max(s.winW - s.safe - s.w - realX, s.safe - realX) + zoomShiftX;
        minY = Math.min(s.winH - s.safe - s.h - realY, s.safe - realY) - zoomShiftY;
        maxY = Math.max(s.winH - s.safe - s.h - realY, s.safe - realY) + zoomShiftY;

        if (x < minX) x = minX;
        if (x > maxX) x = maxX;
        if (y < minY) y = minY;
        if (y > maxY) y = maxY;

        return {x: x, y: y};
    }

    /**
     * Проверяем валидность зума
     */
    function validateZoom(value) {
        if (value > 2) value = 2;
        if (value < 0.5) value = 0.5;

        return value;
    }


    events.push({
        element: M.elem.viewport[0],
        event: evt[0],
        handler: handlers.onStart
    }, {
        element: M.elem.viewport[0],
        event: evt[1],
        handler: handlers.onMove,
        capture: true
    }, {
        element: M.elem.viewport[0],
        event: evt[2],
        handler: handlers.onEnd
    }, {
        element: M.elem.viewport[0],
        event: evt[3],
        handler: handlers.onEnd
    }, {
        element: M.elem.viewport[0],
        event: 'contextmenu',
        handler: handlers.onEnd
    }, {
        element: M.elem.viewport[0],
        event: 'mousewheel',
        handler: handlers.onWheel
    }, {
        element: M.elem.background[0],
        event: 'dragstart',
        handler: function(e) {
            e.preventDefault();
        }
    }, {
        element: M.elem.zoomIn[0],
        event: 'click',
        handler: function() {
            var zoomValue = M.state.zoom * 2;

            M.state.zoom = validateZoom(zoomValue);
            applyState();
        }
    }, {
        element: M.elem.zoomOut[0],
        event: 'click',
        handler: function() {
            var zoomValue = M.state.zoom / 2;

            M.state.zoom = validateZoom(zoomValue);
            applyState();
        }
    });

    for (var i = 0, len = events.length; i < len; i++) {
        eventManager(events[i].element, events[i].event, events[i].handler, events[i].capture);
    }
}


/**
 * Возвращает массив поддерживаемых событий
 * Если браузер поддерживает pointer events или подключена handjs, вернет события указателя.
 * Если нет, используем события мыши
 *
 * @returns {Array} Массив с названиями событий
 */
function getSupportedEvents() {
    var touchEnabled = 'ontouchstart' in window;

    if (touchEnabled) {
        return ['touchstart', 'touchmove', 'touchend', 'touchcancel'];
    }

    return ['mousedown', 'mousemove', 'mouseup', 'mouseleave'];
}


/**
 * Кроссбраузерно добавляет обработчики событий
 *
 * @param {HTMLElement} element HTMLElement
 * @param {Event} e Событие
 * @param {Function} handler Обработчик события
 * @param {bool} capture Capturing
 */
function eventManager(element, e, handler, capture, off) {
    capture = !!capture;

    if (!element) {
        return;
    }

    if (off) {

        if (element.removeEventListener) {
            element.removeEventListener(e, handler, capture);
        } else {
            $(element).off(e);
        }

    } else {

        if (element.addEventListener) {
            element.addEventListener(e, handler, capture);
        } else {
            $(element).on(e, handler);
        }

    }
}


function getMapLibrary(callback) {
    var img = $('.map__library-img'),
        imgID = img.attr('id'),
        imgClass = img.attr('class'),
        imgURL = img.attr('src');

    $.get(imgURL, function(svg) {
        var importedSvg = document.importNode(svg.documentElement, true);

        // if (typeof imgID !== 'undefined') {
        //     importedSvg.id = imgID;
        // }

        // if (typeof imgClass !== 'undefined') {
        //     importedSvg.classList.add(imgClass);
        //     importedSvg.classList.add('replaced-svg');
        // }

        // $(importedSvg).removeAttr('xmlns:a');
        img.replaceWith(importedSvg);

        callback();
    });
}
blocks.infrastructure = {
    init: function() {
        $('.infrastructure__header').on('click', function() {
            var block = $(this).parents('.infrastructure');

            block.toggleClass('_active');
        });
    }
};
blocks.message = {
  msg: $('.message'),
  modifier: '_start',
  time: 10150,
  closeBtn: $('.message__close'),

  init: function() {
    var that = this;

    $(document).ready(function(){
      that.msg.addClass(that.modifier);
    });

    setTimeout(function(){
      that.close();
    }, that.time);

    that.closeBtn.click(function(){
      that.close();
    });
  },

  close: function() {
    var that = this;

    $('body').removeClass('_message');
    that.msg.fadeOut(100);
  }
};
blocks.nav = {
  self: $('.nav'),

  init: function () {
    var body = $('body');
    var burgerBtn = $('.nav__burger-btn');
    var closeBtn = $('.nav__burger-close');
    var support = $('.overlay');
    var header = $('.header');
    var burger = $('.nav__burger');

    if(isMobileDevice()) {
      body.addClass('_mobile');
    }

    burgerBtn.on('click', function () {
      body.addClass('_nav-active');

      setTimeout(function(){
        blocks.nav.open();
      }, 200);
    });

    closeBtn.on('click', function () {
      blocks.nav.close(function(){});
    });

    support.on('click', function () {
      blocks.nav.close(function(){});
    });

    $('.nav__holder-inner').on('scroll', function(){
      if ($('.nav__holder-inner').scrollTop() > 0) {
        burger.addClass('_dark-bg');
      } else {
        burger.removeClass('_dark-bg');
      }
    });
  },

  close: function (callback) {
    var nav = this.self;
    var burger = $('.nav__burger');
    var holder = $('.nav__holder');
    var holderInner = $('.nav__holder-inner');
    var body = $('body');
    var sup = $('.overlay');

    burger.addClass('_closing');

    nav.removeClass('_active');
    $('.nav__holder-inner').scrollTop(0);
    holder.bind('transitionend', function () {
      holder.unbind('transitionend');
      holder.fadeOut(200, function () {
        sup.fadeOut(300);
        holder.removeClass('_side');
        burger.removeClass('_closing').removeClass('_full');
        nav.removeClass('_opening');
        body.removeClass('_nav-active');
        holder.fadeIn(200, function(){
          return callback();
        });
      });
    });
  },

  open: function() {
    var nav = this.self;
    var burger = $('.nav__burger');
    var holder = $('.nav__holder');
    var sup = $('.overlay');

    if (!burger.hasClass('_full')) {
      burger.addClass('_full');

      holder.fadeOut(100, function () {
        sup.fadeIn(300);
        holder.addClass('_side');

        holder.fadeIn(100, function () {
          nav.addClass('_active');
          nav.addClass('_opening');
        });
      });
    }
  }
};
blocks.newslist = {
    init: function() {
        var $msnrContainer = $('.newslist__list');
        // initialize
        $msnrContainer.masonry({
          itemSelector: '.newslist__list-item',
          gutter: 15,
          columnWidth: 300
        });
    }
};
blocks.news = {
  init: function() {
    var $msnrContainer = $('.newslist__list');
    // initialize
    $msnrContainer.masonry({
      itemSelector: '.newslist__list-item',
      gutter: 15,
      columnWidth: 300
    });
  }
};
blocks.newspage = {

  init: function(){
    var contentSlider= $('.newspage__slider');
    contentSlider.photor({
      current: 0,           // {Number}  Index of start slide
        delay: 300,           // {Number}  Transition duration
        loop: true,          // {Boolean} Loop gallery
        slidesOnScreen: 1,
        single: false,        // {Boolean} Initialize event handlers if gallery contains only one photo?
        keyboard: false,
        viewport: 'newspage__slider-viewport',
        layer: 'newspage__slider-layer',
        slide: 'newspage__slider-slide',
      thumbs: 'newspage__slider-thumbs',
      thumbsLayer: 'newspage__slider-thumbsWrap',
        slideImg: 'newspage__slider-image',
        control: 'newspage__slider-controls',
        next: 'newspage__slider-next',
        prev: 'newspage__slider-prev'
    });

    $('.newspage__slider-next').on('click', function(){
      contentSlider.fn.photor.next(0);
    });
  }
};
blocks.newsside = {

    init: function() {
        var nav = $( '.newsside' ),
            navItem = $('.newsside__nav-item'),
            wholePage = $('.newspage'),
            pageContent = $('.newspage__content'),
            newspage = this;

       newspage.stick();

        // что бы страница не ездила при прокрутки навигации
        nav.mouseenter(function() {
            $( 'body').css({
                overflow: "hidden"
            });
        }).mouseleave(function() {
            $( 'body').css({
                overflow: "auto"
            });
        });

        $('.newsside').baron({
            bar: '.newsside__bar',
            track: '.newsside__track',
            barOnCls: 'baron'
        });
    },
    stick: function() {
        var nav = $( '.newsside' ),
            subNav = $( '.newsside__nav' ),
            header = $( '.header'),
            win = $(window);

        if( win.height() - header.height() < subNav.height() ) {
            nav.height(win.height() - ( header.height() === 100 ? header.height() :  50 ));
        } else {
            nav.height(subNav);
        }

        win.on('scroll resize', function() {
            var winPosition = win.scrollTop();

            if( win.height() - header.height() < subNav.height() ) {
                nav.height(win.height() - ( header.height() === 100 ? header.height() :  50 ));
            } else {
                nav.height(subNav);
            }

            var stick = $( '.footer' ).offset().top - ( win.height() < subNav.height() ? win.height() - 50 : subNav.height() ) - header.height();

            if (winPosition >= 1 && winPosition < stick ) {
                nav.css({
                    position: 'fixed',
                    top: '50px'
                });

                if(winPosition > stick / 2) {
                    nav.css({
                        transition: 'none'
                    });
                } else {
                    nav.css({
                        transition: 'all .4s ease'
                    });
                }

                nav.height(win.height() - 50 ); //todo: убрать костыль
            } else {
                if (winPosition >= stick ) {
                    nav.css({
                        position: 'absolute',
                        top: stick + header.height() + 'px',
                        transition: 'none'
                    });
                } else {
                    nav.css({
                        position: 'absolute',
                        top: '100px',
                        transition: 'all .4s ease .24s'
                    });
                }
            }
        });
    }
};
blocks.overlook = {
    self: $('.overlook'),

    cls: {
        bg: 'overlook__viewport-bg',
        bgImg: 'overlook__viewport-bg-img',
        section: 'overlook__section',
        navLink: 'overlook__nav-link'
    },

    mod: {
        autoplay: '_autoplay',
        loading: '_loading',

        current: '_current',    // Контент секции отображается
        opened: '_opened'       // Раскрыт второй уровень
    },

    timers: {},

    init: function() {
        var overlook = this,
            sections = $('.' + this.cls.section);

        this.imageLoaded = 0;
        this.sections = [];
        this.current = 0;

        // Get data about sections
        sections.each(function(i) {
            var section = $(this);

            // Load backgrounds
            loadImage(section.data('background'), function() {
                overlook.imageLoaded++;
            });
        });

        // // Check loading of backgrounds
        this.timers.checkload = setInterval(function() {
            if (overlook.imageLoaded == sections.length) {
                overlook.self.removeClass(overlook.mod.loading);
                clearInterval(overlook.timers.checkload);

                overlook.bind();
            }
        }, 100);
    },

    bind: function() {
        var overlook = this,
            sections = $('.' + this.cls.section),
            autoplayEnabled = true,
            fotorama,
            fotoramaClass = {
                slide: '.fotorama__stage__frame',
                navItem: '.fotorama__nav__frame',
                border: '.fotorama__thumb-border'
            },
            sectionsData = [];

        overlook.self.removeClass(overlook.mod.loading);

        this.fotorama = fotorama = overlook.self
            .on('fotorama:ready', function() {
                var navItems = overlook.self.find(fotoramaClass.navItem);

                // Собираем данные о слайдах
                sections.each(function(i) {
                    var self = $(this);

                    sectionsData.push({
                        modifier: self.data('modifier'),
                        caption: self.data('title'),
                        img: self.data('background')
                    });
                });

                // Кастомизируем навигацию
                navItems.each(function(i) {
                    $(this)
                        .addClass('_' + sectionsData[i].modifier)
                        .text(sectionsData[i].caption);
                });
            })
            .on('fotorama:stopautoplay', function() {
                // Отключаем анимацию автоплея
                overlook.self.removeClass(overlook.mod.autoplay);
                autoplayEnabled = false;
            })
            .on('fotorama:show', function() {
                var slides = overlook.self.find(fotoramaClass.slide);

                // Выделяем текущий элемент полосой
                if (!autoplayEnabled) {
                    var border = overlook.self.find(fotoramaClass.border);

                    var width = Math.round(100 / fotorama.size);
                    var indent = fotorama.activeIndex * width;

                    border.css({
                        width: (width) + '%',
                        left: (indent) + '%',
                    });
                }

                // Закрываем селекты
                overlook.closeSelects();
            })
            .on('fotorama:showend', function(e) {
                var slide = overlook.self.find(fotoramaClass.slide),
                    select = slide.find('.select');

                if (select.length) {
                    select.each(function() {
                        var self = $(this);

                        if (!self.hasClass('selectized') && !self.hasClass('selectize-control')) {
                            blocks.select.initSelect(self);

                            self.on('change', function() {
                                var slide = $(this).parents('.overlook__section');

                                if (fotorama) {
                                    fotorama.stopAutoplay();
                                }

                                overlook.self.addClass('_minified');
                                slide.addClass('_opened');
                            });

                            blocks.tariffs.initTariffSelect();
                        }
                    });
                }
            })
            .fotorama({
                width: '100%',
                height: '100%',
                transition: 'dissolve',
                click: false,
                swipe: false,
                transitionduration: 500
            })
            .data('fotorama');

        // Запускаем автоплей
        if (autoplayEnabled) {
            overlook.self.addClass(overlook.mod.autoplay);
            fotorama.startAutoplay(10000);
        }
    },

    closeSelects: function() {
        var selects = this.self.find('select.select');

        selects.each(function() {
            if ($(this).hasClass('selectize')) {
                this.selectize.close();
            }
        });
    }

};
blocks.page = {
  init: function(){
    var pageSidebar = $('.page__sidebar');
    var pageContent = $('.page__content');

    var img = $('.usercontent').find('img');
    var length = img.length;
    var count = 0;

    if(length) {
      img.each(function(){
        var url = $(this).attr('src');

        loadImage(url, function() {
          count++;
          if(count === length){
            var pageHeight = $('.page').outerHeight();

            pageSidebar.height(pageHeight);
            pageContent.height(pageHeight);
          }
        });
      });
    } else {
      $(document).ready(function(){
        var pageHeight = $('.page').outerHeight();

        pageSidebar.height(pageHeight);
        pageContent.height(pageHeight);
      });
    }
  }
};
//this place for block.parking blocks.parking
/*
 *
 */
blocks.priority_block = {
    init: function() {
        $(function () {
            littleParallax( $( '.priority-block__image' ), 0.5 );
        });

        function littleParallax(bg, step) {
            var backGroundBlock = bg,
                parentBlock = backGroundBlock.parent(),
                win = $( window ),
                winHeight = win.height();

            var stepBackground = parentBlock.height() * step;

            backGroundBlock.css({
                'height': ( parentBlock.outerHeight() + ( stepBackground ) ) + 'px',
                'top': ( -stepBackground ) + 'px'
            });

            win.on( 'scroll', function () {
                var winPosition = win.scrollTop(),
                    offsetTop = parentBlock.offset().top;

                if ( ( winPosition + winHeight ) >= ( offsetTop ) && winPosition <= ( offsetTop + parentBlock.outerHeight() )) {
                    backGroundBlock.css({
                        'top': Math.ceil( -stepBackground * ( 1 - (( winPosition  + winHeight - offsetTop ) / ( winHeight + parentBlock.outerHeight() ))) ) + 'px'
                    });
                }
            });
        }
    }
};
blocks.radio = {
    init: function() {
        var play = $('.radio__play');

        play.on('click', function() {
            var self = $(this),
                player = $('.radio__player'),
                activeClass = '_active',
                isActive = self.hasClass(activeClass);

            play[isActive ? 'removeClass' : 'addClass'](activeClass);
            player[0][isActive ? 'pause' : 'play']();
        });
    }
};

blocks.route = {

    block: $('.route'),
    schemeContainer: $('.route__shown-holder'),

    init: function() {
        var that = this,
            block = this.block,
            fromtoContainer = $('.route__main'),
            from = $('.select[name=route-from]'),
            to = $('.select[name=route-to]'),
            close = $('.route__shown-close-btn');

        close.click(function(){
            block.removeClass('_show-route');

            var selects = $('.route__items .selectized');

            selects[0].selectize.clear();
            selects[1].selectize.clear();
        });

        from.on('change', changeHandler);
        to.on('change', changeHandler);

        function changeHandler() {
            var fromVal = from.val();
            var toVal = to.val();
            var template = Metro.templates.schemewidget;
            var scheme;

            if (fromVal && toVal) {
                scheme = _.min(PathFinder.findPath(fromVal, toVal), 'changesCount').scheme;
                scheme.url = '#from=' + fromVal + 'to=' + toVal;

                that.schemeContainer.html(template(scheme));
                block.addClass('_show-route');
            }

            fromtoContainer.css('height', that.schemeContainer.outerHeight() + 'px');
            that.widget();
        }
    },

    widget: function() {
        var header = $('.schemewidget__head');
        var headerItem = $('.schemewidget__head-inner');
        var body = $('.schemewidget__main');
        var bodyItem = $('.schemewidget__main-path');

        body.on('scroll', function(){
            var fromTop = body.scrollTop();

            if (fromTop > 0) {
                header.addClass('_dark-bg');
            } else {
                header.removeClass('_dark-bg');
            }

            var index;

            bodyItem.each(function(){
                var top = $(this).offset().top - header.offset().top - 120;

                if (top < fromTop) {
                    index = $(this).index();
                }
            });

            headerItem.hide();
            headerItem.eq(index).show();
        });
    }
};
blocks.schedule = {

    block: $('.schedule'),

    init: function() {
        var win = $(window);

        var that = this;
        win.on('resize', function() {
            that.applyBackground();
        });

        this.applyBackground();
    },

    applyBackground: function() {
        var bg = $('.schedule__bg'),
            section = bg.parents('.overlook__section');

        bg.css({
            backgroundImage: 'url(' + section.data('bg') + ')',
            width: section.width() + 'px',
            height: section.height() + 'px',
            marginTop: parseInt(-0.5 * section.height()) + 'px',
            marginLeft: parseInt(-0.5 * section.width()) + 'px'
        });
    }

};
blocks.scheduleletters = {
  
  init: function() {
    var letter = $('.scheduleletters__item'),
      station = $('.schedulestations__item'),
      list = $('.schedulestations'),
      startLetter = letter.filter('._active').text();

    $('.schedulestations__item:contains(' + startLetter + ')').addClass('_active');

    letter.click(function(){
      var currentLetter = $(this).text();

      letter.removeClass('_active');
      $(this).addClass('_active');
      station.removeClass('_active');
      $('.schedulestations__item:contains(' + currentLetter + ')').addClass('_active');
    });
  },
};
/*
blocks.scheduleline = {
    self: $('.scheduleline'),

    init: function () {
        $(function(){
            var block = $('.scheduleline'),
                select = block.find('select.select')[0].selectize;
                
            select.setValue('line1_8');
            var color = '#' + select.options[select.getValue()].color;
            $('.scheduleline___table').css({
                "color": color
            });

            select.on('change', function() {
                var color = '#' + select.options[select.getValue()].color;
                $('.scheduleline___table').css({
                    "color": color
                });
            });
        });


        var filterBtn = $('.scheduleline__filter-item');

        filterBtn.click(function() {
            filterBtn.removeClass('_active');
            $(this).addClass('_active');

            if ( $(this).data('day') === 'ferial' ) {
                $('.scheduleline__table-time.ferial').removeClass('_hidden').addClass('_visible');
                $('.scheduleline__table-time.weekend').removeClass('_visible').addClass('_hidden');
            } else if ( $(this).data('day') === 'weekend' ) {
                $('.scheduleline__table-time.weekend').removeClass('_hidden').addClass('_visible');
                $('.scheduleline__table-time.ferial').removeClass('_visible').addClass('_hidden');
            }
        });
    }
};*/
blocks.schedulepage = {
  
  init: function(){
    var select = $('.schedulepage__select select.select._station');

    select.selectize({
      //onChange: window.location.href = '/scheduleline.html';
    });
  }
};

blocks.scheme = {

    cls: {
        tab: 'scheme__tabs-item',
        path: 'scheme__main-path'
    },

    init: function() {
        var that = this;

        $('body').on('click', '.scheme__tabs-item', function(e) {
            var self = $(this),
                box = self.closest('.scheme'),
                tabs = box.find('.' + blocks.scheme.cls.tab),
                validation = $('.validation__paths');
                paths = box.find('.' + blocks.scheme.cls.path),
                curCls = '_current',
                rel = parseInt(self.attr('data-rel'));

            if (!self.hasClass(curCls)) {
                tabs.removeClass(curCls);
                paths.removeClass(curCls);
                validation.removeClass('active');

                tabs
                    .filter('[data-rel=' + rel + ']')
                    .addClass(curCls);
                validation
                    .filter('#val_path-' + rel)
                    .addClass('active');

                paths
                    .filter('#path-' + rel)
                    .addClass(curCls);

                blocks.map.drawRoute(that.data.paths[rel]);
            }

        });
    },

    viewModel: function(data) {
        var out = _.clone(data);

        out.scheme = _.chain(out.scheme)
            .each(function(item, i) {
                if (item.changesCount == 0) {
                    item.title = 'Без пересадки';
                } else {
                    item.title = numeralsString(
                        item.changesCount,
                        'пересадка',
                        'пересадки',
                        'пересадок'
                    ).join(' ');
                }
            })
            .sortBy('time')
            .value();

        out.paths = _.sortBy(out.paths, 'time');

        out.tabs = out.scheme.length > 1;

        if (out.scheme && out.scheme[0]) {
            out.scheme[0].current = true;
        }

        this.data = out;

        return out;
    },

    render: function(data) {
        blocks.map.elem.result.html(
            Metro.templates.scheme(this.viewModel(data))
        );
        blocks.validation__path.combineData(data);
        blocks.shemeInfo.renderCoast(data);
        blocks.map.drawRoute(this.data.paths[0]);
    }
};
blocks.schemewidget = {
  init: function() {

  }
};
blocks.search = {
  init: function() {
    var header = $('.header'),
      closeBtn = $('.search__close-btn');

    closeBtn.click(function(e){
      e.preventDefault();

      header.removeClass('_search');
    });
  }
};
blocks.select = {

    init: function() {
        var ctx = this,
            selects = $('.select');

        selects.each(function() {
            var self = $(this);

            if (!self.parents('.overlook').length) {
                ctx.initSelect(self);
            }
        });
    },

    initSelect: function(select) {
        var ctx = blocks.select,
            type = select.data('type'),
            prefix = select.data('prefix'),
            options,
            modifier;

        if (type == 'station') {
            options = ctx.defaults(ctx.getStationsOptions(select));

            if (prefix === 'schedule') {
                options.onChange = function(value){
                    window.location.href = '/schedule/';
                };
            }

            modifier = '_station';

            select.addClass(modifier);
        } else if (type == 'tariffs') {
            options = ctx.defaults(ctx.getTariffsOptions(select));
            modifier = '_tariffs';

            select.addClass(modifier);
        } else if (type == 'feedbackType') {
            options = ctx.defaults(ctx.getFBTypeOptions(select));
            modifier = '_fb-type';

            select.addClass(modifier);
        } else if (type == 'feedbackCat') {
            options = ctx.defaults(ctx.getFBCatOptions(select));
            modifier = '_fb-category';

            select.addClass(modifier);
        } else if (type == 'feedbackTheme') {
            options = ctx.defaults(ctx.getFBThemeOptions(select));
            modifier = '_fb-theme';

            select.addClass(modifier);
        } else if (type == "parking") {
            options = ctx.defaults(ctx.getParkingOptions(select));
            modifier = '_station';
            select.addClass(modifier);
        } else {
            options = ctx.defaults();
        }

        // logObject(options);

        select.selectize(options);
    },

    /**
     * Получает список опций для селекта станций метро
     */
    getStationsOptions: function(select) {
        var optionsList = [];

        _.each(metroLinesWithIds, function(line) {
            _.each(line.stations, function(station) {
                optionsList.push({
                    name: station.name,
                    value: station.id,
                    line: line.name,
                    color: line.color
                });
            });
        });

        optionsList = _.sortBy(optionsList, 'name');

        return {
            valueField: 'value',
            labelField: 'name',
            searchField: ['name', 'line'],

            options: optionsList,
            placeholder: select.data('placeholder'),

            render: {
                item: function(item, escape) {
                    return '<div class="selectize-input-field" style="background: #' + item.color + '">' +
                        '<span class="selectize-input-field-text">' +
                            escape(item.name) + ', ' + escape(item.line) +
                        '</span>' +
                    '</div>';
                },
                option: function(item, escape) {
                    var name = item.name || '',
                        color = item.color || '000';

                    return '<div class="selectize-dropdown-content-option" style="border-color: #' + item.color + '">' +
                        '<span class="selectize-dropdown-content-option-text">' +
                            escape(name) +
                        '</span>' +
                    '</div>';
                }
            },
            onChange: function(value) {
                //console.log(this.options[value], value);
            }
        };
    },

    getParkingOptions: function(select) {
        var optionsList = [];

        _.each(select.find('option'), function(park) {
            //_.each(line.stations, function(station) {
            optionsList.push({
                name: $(park).text(),
                value: $(park).val(),
                //line: line.name,
                color: $(park).data('color')
            });
            //});
        });

        optionsList = _.sortBy(optionsList, 'name');
        return {
            valueField: 'value',
            labelField: 'name',
            searchField: ['name'],//, 'line'],

            options: optionsList,
            placeholder: select.data('placeholder'),

            render: {
                item: function(item, escape) {
                    return '<div class="selectize-input-field" style="background: #' + item.color + '">' +
                    '<span class="selectize-input-field-text">' +
                    escape(item.name) +
                    '</span>' +
                    '</div>';
                },
                option: function(item, escape) {
                    var name = item.name || '',
                        color = item.color || '000';

                    return '<div class="selectize-dropdown-content-option" style="border-color: #' + item.color + '">' +
                    '<span class="selectize-dropdown-content-option-text">' +
                    escape(name) +
                    '</span>' +
                    '</div>';
                }
            },
            //onChange: function(value) {
            //console.log(this.options[value], value);
            //}
        };
    },

    getTariffsOptions: function(select) {
        return {
            valueField: 'name',
            labelField: 'name',

            options: [{
                modifier: "trine",
                name: "Тройка"
            }, {
                modifier: "unified",
                name: "Единый"
            }, {
                modifier: "ninety",
                name: "90 минут"
            }],

            allowEmptyOption: false
        };
    },

    getFBTypeOptions: function(select) {
        return {
            valueField: 'name',
            labelField: 'name',

            options: [{
                modifier: "",
                name: "Заявление"
            }, {
                modifier: "",
                name: "Предложение"
            }, {
                modifier: "",
                name: "Благодарность"
            }, {
                modifier: "",
                name: "Жалоба"
            }],

            allowEmptyOption: false
        };
    },

    getFBCatOptions: function(select) {
        return {
            valueField: 'name',
            labelField: 'name',

            options: [{
                modifier: "",
                name: "Первичное"
            }, {
                modifier: "",
                name: "Вторичное"
            }, {
                modifier: "",
                name: "Многократное"
            }],

            allowEmptyOption: false
        };
    },

    getFBThemeOptions: function(select) {
        return {
            valueField: 'name',
            labelField: 'name',

            options: [{
                modifier: "",
                name: "Обращения по правилам пользования метрополитеном"
            }, {
                modifier: "",
                name: "Качество и культура обслуживания пассажиров"
            }, {
                modifier: "",
                name: "Техническое содержание метрополитена"
            }, {
                modifier: "",
                name: "Санитарное состояние метрополитена"
            }, {
                modifier: "",
                name: "Организация движения поездов, режим работы метрополитена, пассажиропотоки"
            }, {
                modifier: "",
                name: "Тарифная политика и способы оплаты проезда"
            }, {
                modifier: "",
                name: "Информационно-рекламное обслуживание"
            }, {
                modifier: "",
                name: "Реконструкция (ремонт), развитие и модернизация метрополитена"
            }, {
                modifier: "",
                name: "Общие вопросы по метрополитену"
            }],

            allowEmptyOption: false
        };
    },

    defaults: function(customOptions) {
        return _.merge({
            allowEmptyOption: true,
            dropdownParent: 'body',
            maxItems: 1,
            copyClassesToDropdown: true,
            openOnFocus: true
        }, customOptions || {});
    }
};
blocks.tariffs = {
    block: $('.tariffs'),

    init: function() {
        var win = $(window),
            that = this;

        win.on('resize', function() {
            that.applyBackground();
        });

        this.applyBackground();

        $('.tariffs__list-container').baron({
            direction: 'h',
            bar: '.scroller',
            track: '.scroller__track',
            freeze: true
        });
    },

    initTariffSelect: function() {
        var tariffSelect = $('.tariffs__select ._tariffs'),
            tariffList = $('.tariffs__list-wrapper');

        tariffSelect.on('change', function(){
            tariffList.removeClass('_active').filter('[data-value="'+tariffSelect[0].selectize.getValue()+'"]').addClass('_active');
        });
    },

    applyBackground: function() {
        var bg = $('.tariffs__bg'),
            section = bg.parents('.overlook__section');

        bg.css({
            backgroundImage: 'url(' + section.data('background') + ')',
            width: section.width() + 'px',
            height: section.height() + 'px',
            marginTop: parseInt(-0.5 * section.height()) + 'px',
            marginLeft: parseInt(-0.5 * section.width()) + 'px'
        });
    }

};
blocks.tariffPage = {
    init: function() {
        $(document).ready(function() {
            var $grid = $('.tariffPage__list');

            $grid.shuffle({
                itemSelector: '.tariffPage__list-item',
                gutterWidth: 20,
                columnWidth: 0
            });

            $('.tariffPage__filter-item').click(function (e) {
                e.preventDefault();

                $('.tariffPage__filter-item').removeClass('_active');
                $(this).addClass('_active');

                var item = $('.tariffPage__list-item');
                var sort = $(this).attr('data-group'),
                    opts = {
                        reverse: true,
                        by: function($el) {
                            return $el.data(sort);
                        }
                    };

                item.removeClass('_disable');

                item.each(function(){
                    if($(this).data(sort) === 0) {
                        $(this).addClass('_disable');
                    }
                });

                $grid.shuffle('sort', opts);
            });
        });
    }
};
/**
 * Created by sergey on 22.06.15.
 */
blocks.tariffDetail = {
  init: function() {
        var tariffDetail = this,
            win = $(window);
    this.navNavigation();
    this.setMinHeight();
        $('.page__content').css("height","auto");

        //win.on('scroll resize', function (){
        //    tariffDetail.stick();
        //});
        $( '.tariffDetail__qa-title').click(function() {
            var text = $(this).parent();
            text.toggleClass('_open').find('.tariffDetail__qa-text').slideToggle(function(){
                $('.page__sidebar').css("height","auto");
                $('.page__sidebar').height(parseInt($('.page__content').height()) +  ( parseInt($('.page__wrapper').height()) - parseInt($('.page__content').height()) ));
            });
        });

        $( '.tariffDetail__qa-close' ).click(function() {
            $(this).parent().slideToggle(function(){
                $('.page__sidebar').css("height","auto");
                $('.page__sidebar').height(parseInt($('.page__content').height()) +  ( parseInt($('.page__wrapper').height()) - parseInt($('.page__content').height()) ));
            }).parent().toggleClass('_open');
        });
  },

  setMinHeight: function() {
    var sidebar = $('.tariffDetail__side-nav');
    var pageContent = $('.tariffDetail__content');
    pageContent.each(function() {
            if(sidebar.outerHeight() > $(this).outerHeight()) {
        $(this).css({'min-height': sidebar.outerHeight() + 'px'});
      }
    });
  },

  navNavigation: function() {
    var navItem = $('.tariffDetail__nav-item');
    var wholePage = $('.tariffDetail');
    var pageContent = $('.tariffDetail__content');

    //navItem.on('click', function(e){
    //  e.preventDefault();
    //  wholePage.removeClass('_troika _unity _hourly _moscow _school _student');
    //  wholePage.addClass('_'+$(this).attr('data-href'));
    //  pageContent.removeClass('_active');
    //  pageContent.filter('._'+$(this).attr('data-href')).addClass('_active');
    //});
  },
    /*stick: function() {
        var nav = $( '.tariffDetail__side-nav' ),
            subNav = $( '.tariffDetail__nav' ),
            header = $( '.header'),
            win = $(window);

        var winPosition = win.scrollTop();

        if( win.height() - header.height() < subNav.height() ) {
            nav.height(win.height() - ( header.height() === 100 ? header.height() :  50 ));
        } else {
            nav.height(subNav);
        }

        var stick = $( '.footer' ).offset().top - ( win.height() < subNav.height() ? win.height() - 50 : subNav.height() ) - header.height();

        if (winPosition >= 1 && winPosition < stick ) {
            nav.css({
                position: 'fixed',
                top: '50px'
            });

            if(winPosition > stick / 2) {
                nav.css({
                    transition: 'none'
                });
            } else {
                nav.css({
                    transition: 'all .4s ease'
                });
            }

            nav.height(win.height() - 50 ); //todo: убрать костыль
        } else {
            if (winPosition >= stick ) {
                nav.css({
                    position: 'absolute',
                    top: stick + header.height() + 'px',
                    transition: 'none'
                });
            } else {
                nav.css({
                    position: 'absolute',
                    top: '100px',
                    transition: 'all .4s ease .24s'
                });
            }
        }
    }*/
};
blocks.troika = {
    init: function() {
        $(function () {
            littleParallax( $( '.troika__bg' ), 1 );
        });

        function littleParallax(bg, step) {
            var backGroundBlock = bg,
                parentBlock = backGroundBlock.parent(),
                win = $( window ),
                winHeight = win.height();

            var stepBackground = parentBlock.height() * step;

            backGroundBlock.css({
                'height': ( parentBlock.outerHeight() + ( stepBackground ) ) + 'px',
                'transform': 'translate3D(0, ' + ( -stepBackground ) + 'px, 0)'
            });

            win.on( 'scroll', function () {
                var winPosition = win.scrollTop(),
                    offsetTop = parentBlock.offset().top;

                if ( ( winPosition + winHeight ) >= ( offsetTop ) && winPosition <= ( offsetTop + parentBlock.outerHeight() )) {
                    backGroundBlock.css({
                        'transform': 'translate3D(0, ' + Math.ceil( -stepBackground * ( 1 - (( winPosition  + winHeight - offsetTop ) / ( winHeight + parentBlock.outerHeight() ))) ) + 'px, 0)'
                    });
                }
            });
        }
    }
};
blocks.worktime = {

    block: $('.worktime'),

    init: function() {
        var win = $(window),
            that = this;

        win.on('resize', function() {
            that.applyBackground();
        });

        this.applyBackground();
    },

    applyBackground: function() {
        var bg = $('.worktime__bg'),
            section = bg.parents('.overlook__section');

        bg.css({
            backgroundImage: 'url(' + section.data('bg') + ')',
            width: section.width() + 'px',
            height: section.height() + 'px',
            marginTop: parseInt(-0.5 * section.height()) + 'px',
            marginLeft: parseInt(-0.5 * section.width()) + 'px'
        });
    }

};
blocks.zoom = {

    init: function() {
        this.handlers();
    },

    handlers: function() {
        var zoomIn = $('.zoom__in'),
            zoomOut = $('.zoomOut');

        // Zoom in button
        zoomIn.on('click', function() {

        });

        // Zoom out button
        zoomOut.on('click', function() {

        });
    }

};